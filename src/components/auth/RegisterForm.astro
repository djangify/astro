---
// src/components/auth/RegisterForm.astro
export interface Props {
  showTitle?: boolean;
  className?: string;
}

const { showTitle = true, className = "" } = Astro.props;
---

<div class={`register-form ${className}`}>
  {
    showTitle && (
      <div class="text-center mb-8">
        <h2 class="text-3xl font-bold text-gray-900">Create Account</h2>
        <p class="text-gray-600 mt-2">Join us today and get started</p>
      </div>
    )
  }

  <form id="register-form" class="space-y-6">
    <!-- Error Display -->
    <div
      id="register-error"
      class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg"
    >
      <div class="flex">
        <svg
          class="w-5 h-5 mr-2 mt-0.5 flex-shrink-0"
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path
            fill-rule="evenodd"
            d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
            clip-rule="evenodd"></path>
        </svg>
        <span id="register-error-message"></span>
      </div>
    </div>

    <!-- Name Fields -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <label
          for="first_name"
          class="block text-sm font-medium text-gray-700 mb-1"
        >
          First Name
        </label>
        <input
          type="text"
          id="first_name"
          name="first_name"
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-colors"
          placeholder="John"
        />
        <div id="first_name-error" class="hidden text-red-600 text-sm mt-1">
        </div>
      </div>

      <div>
        <label
          for="last_name"
          class="block text-sm font-medium text-gray-700 mb-1"
        >
          Last Name
        </label>
        <input
          type="text"
          id="last_name"
          name="last_name"
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-colors"
          placeholder="Doe"
        />
        <div id="last_name-error" class="hidden text-red-600 text-sm mt-1">
        </div>
      </div>
    </div>

    <!-- Username Field -->
    <div>
      <label
        for="username"
        class="block text-sm font-medium text-gray-700 mb-1"
      >
        Username <span class="text-red-500">*</span>
      </label>
      <input
        type="text"
        id="username"
        name="username"
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-colors"
        placeholder="johndoe"
      />
      <p class="text-gray-500 text-xs mt-1">
        Letters, numbers, and @/./+/-/_ characters only.
      </p>
      <div id="username-error" class="hidden text-red-600 text-sm mt-1"></div>
    </div>

    <!-- Email Field -->
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
        Email Address <span class="text-red-500">*</span>
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-colors"
        placeholder="john@example.com"
      />
      <div id="email-error" class="hidden text-red-600 text-sm mt-1"></div>
    </div>

    <!-- Password Fields -->
    <div>
      <label
        for="password"
        class="block text-sm font-medium text-gray-700 mb-1"
      >
        Password <span class="text-red-500">*</span>
      </label>
      <div class="relative">
        <input
          type="password"
          id="password"
          name="password"
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-colors pr-10"
          placeholder="Create a strong password"
        />
        <button
          type="button"
          id="toggle-password"
          class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
        >
          <svg
            id="eye-open"
            class="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
            ></path>
          </svg>
          <svg
            id="eye-closed"
            class="w-5 h-5 hidden"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"
            ></path>
          </svg>
        </button>
      </div>
      <div class="mt-1">
        <div class="text-xs text-gray-500 space-y-1">
          <p>Password must contain:</p>
          <ul class="ml-4 space-y-1">
            <li id="length-check" class="flex items-center">
              <span class="w-2 h-2 rounded-full bg-gray-300 mr-2"></span>
              At least 8 characters
            </li>
            <li id="uppercase-check" class="flex items-center">
              <span class="w-2 h-2 rounded-full bg-gray-300 mr-2"></span>
              One uppercase letter
            </li>
            <li id="lowercase-check" class="flex items-center">
              <span class="w-2 h-2 rounded-full bg-gray-300 mr-2"></span>
              One lowercase letter
            </li>
            <li id="number-check" class="flex items-center">
              <span class="w-2 h-2 rounded-full bg-gray-300 mr-2"></span>
              One number
            </li>
          </ul>
        </div>
      </div>
      <div id="password-error" class="hidden text-red-600 text-sm mt-1"></div>
    </div>

    <!-- Confirm Password Field -->
    <div>
      <label
        for="password_confirm"
        class="block text-sm font-medium text-gray-700 mb-1"
      >
        Confirm Password <span class="text-red-500">*</span>
      </label>
      <input
        type="password"
        id="password_confirm"
        name="password_confirm"
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-colors"
        placeholder="Confirm your password"
      />
      <div id="password_confirm-error" class="hidden text-red-600 text-sm mt-1">
      </div>
    </div>

    <!-- Terms and Conditions -->
    <div class="flex items-start">
      <input
        type="checkbox"
        id="agree_terms"
        name="agree_terms"
        required
        class="w-4 h-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500 mt-1"
      />
      <label for="agree_terms" class="ml-2 text-sm text-gray-600">
        I agree to the
        <a
          href="/terms"
          target="_blank"
          class="text-teal-600 hover:text-teal-500 font-medium"
          >Terms of Service</a
        >
        and
        <a
          href="/privacy"
          target="_blank"
          class="text-teal-600 hover:text-teal-500 font-medium"
          >Privacy Policy</a
        >
      </label>
    </div>

    <!-- Submit Button -->
    <button
      type="submit"
      id="register-submit"
      class="w-full bg-teal-600 text-white py-2 px-4 rounded-lg hover:bg-teal-700 focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed"
    >
      <span id="register-submit-text">Create Account</span>
      <svg
        id="register-loading"
        class="hidden animate-spin -ml-1 mr-3 h-5 w-5 text-white"
        fill="none"
        viewBox="0 0 24 24"
      >
        <circle
          class="opacity-25"
          cx="12"
          cy="12"
          r="10"
          stroke="currentColor"
          stroke-width="4"></circle>
        <path
          class="opacity-75"
          fill="currentColor"
          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        ></path>
      </svg>
    </button>

    <!-- Login Link -->
    <div class="text-center">
      <p class="text-sm text-gray-600">
        Already have an account?
        <a
          href="/auth/login"
          class="text-teal-600 hover:text-teal-500 font-medium ml-1"
        >
          Sign in here
        </a>
      </p>
    </div>
  </form>
</div>

<script is:inline>
  (function () {
    let authStore;

    async function initializeAuthStore() {
      if (!authStore) {
        const module = await import("../../stores/authStore");
        authStore = module.authStore;
      }
      return authStore;
    }

    document.addEventListener("DOMContentLoaded", async function () {
      await initializeAuthStore();

      const form = document.getElementById("register-form");
      const errorDiv = document.getElementById("register-error");
      const errorMessage = document.getElementById("register-error-message");
      const submitButton = document.getElementById("register-submit");
      const submitText = document.getElementById("register-submit-text");
      const loadingIcon = document.getElementById("register-loading");
      const passwordToggle = document.getElementById("toggle-password");
      const passwordInput = document.getElementById("password");
      const passwordConfirmInput = document.getElementById("password_confirm");
      const eyeOpen = document.getElementById("eye-open");
      const eyeClosed = document.getElementById("eye-closed");

      // Password validation elements
      const lengthCheck = document.getElementById("length-check");
      const uppercaseCheck = document.getElementById("uppercase-check");
      const lowercaseCheck = document.getElementById("lowercase-check");
      const numberCheck = document.getElementById("number-check");

      // Password visibility toggle
      if (passwordToggle && passwordInput && eyeOpen && eyeClosed) {
        passwordToggle.addEventListener("click", function () {
          const isPassword = passwordInput.type === "password";
          passwordInput.type = isPassword ? "text" : "password";

          if (isPassword) {
            eyeOpen.classList.add("hidden");
            eyeClosed.classList.remove("hidden");
          } else {
            eyeOpen.classList.remove("hidden");
            eyeClosed.classList.add("hidden");
          }
        });
      }

      // Password validation
      if (passwordInput) {
        passwordInput.addEventListener("input", function () {
          const password = passwordInput.value;

          // Length check
          if (lengthCheck)
            updateValidationItem(lengthCheck, password.length >= 8);

          // Uppercase check
          if (uppercaseCheck)
            updateValidationItem(uppercaseCheck, /[A-Z]/.test(password));

          // Lowercase check
          if (lowercaseCheck)
            updateValidationItem(lowercaseCheck, /[a-z]/.test(password));

          // Number check
          if (numberCheck)
            updateValidationItem(numberCheck, /\d/.test(password));
        });
      }

      // Password confirmation validation
      if (passwordConfirmInput && passwordInput) {
        passwordConfirmInput.addEventListener("input", function () {
          const password = passwordInput.value;
          const confirmPassword = passwordConfirmInput.value;

          if (confirmPassword && password !== confirmPassword) {
            showFieldError("password_confirm", "Passwords do not match");
          } else {
            clearFieldError("password_confirm");
          }
        });
      }

      function updateValidationItem(element, isValid) {
        const indicator = element.querySelector("span");
        if (indicator) {
          if (isValid) {
            indicator.classList.remove("bg-gray-300");
            indicator.classList.add("bg-green-500");
            element.classList.add("text-green-600");
            element.classList.remove("text-gray-500");
          } else {
            indicator.classList.remove("bg-green-500");
            indicator.classList.add("bg-gray-300");
            element.classList.remove("text-green-600");
            element.classList.add("text-gray-500");
          }
        }
      }

      // Form submission
      if (form) {
        form.addEventListener("submit", async function (e) {
          e.preventDefault();

          // Clear previous errors
          if (errorDiv) errorDiv.classList.add("hidden");
          clearAllFieldErrors();

          // Validate passwords match
          if (passwordInput && passwordConfirmInput) {
            const password = passwordInput.value;
            const confirmPassword = passwordConfirmInput.value;

            if (password !== confirmPassword) {
              showFieldError("password_confirm", "Passwords do not match");
              return;
            }
          }

          // Show loading state
          setLoadingState(true);

          const formData = new FormData(form);
          const userData = {
            username: String(formData.get("username") || ""),
            email: String(formData.get("email") || ""),
            password: String(formData.get("password") || ""),
            password_confirm: String(formData.get("password_confirm") || ""),
            first_name: String(formData.get("first_name") || ""),
            last_name: String(formData.get("last_name") || ""),
          };

          try {
            await authStore.register(userData);

            // Success - redirect to verification page
            window.location.href =
              "/auth/verify-email?email=" + encodeURIComponent(userData.email);
          } catch (error) {
            console.error("Registration error:", error);

            setLoadingState(false);

            // Handle field-specific errors
            if (error && error.errors) {
              Object.keys(error.errors).forEach(function (field) {
                const messages = error.errors[field];
                const message = Array.isArray(messages)
                  ? messages[0]
                  : messages;
                showFieldError(field, String(message));
              });
            }

            // Show general error
            let message =
              "Registration failed. Please check your information and try again.";
            if (error && error.detail) {
              message = String(error.detail);
            } else if (
              error &&
              error.non_field_errors &&
              error.non_field_errors[0]
            ) {
              message = String(error.non_field_errors[0]);
            }
            showError(message);
          }
        });
      }

      function setLoadingState(loading) {
        if (submitButton && submitText && loadingIcon) {
          if (loading) {
            submitButton.disabled = true;
            submitText.textContent = "Creating Account...";
            loadingIcon.classList.remove("hidden");
          } else {
            submitButton.disabled = false;
            submitText.textContent = "Create Account";
            loadingIcon.classList.add("hidden");
          }
        }
      }

      function showError(message) {
        if (errorMessage && errorDiv) {
          errorMessage.textContent = String(message);
          errorDiv.classList.remove("hidden");
        }
      }

      function showFieldError(field, message) {
        const errorElement = document.getElementById(field + "-error");
        const inputElement = document.getElementById(field);

        if (errorElement && inputElement) {
          errorElement.textContent = String(message);
          errorElement.classList.remove("hidden");
          inputElement.classList.add("border-red-500");
        }
      }

      function clearFieldError(field) {
        const errorElement = document.getElementById(field + "-error");
        const inputElement = document.getElementById(field);

        if (errorElement && inputElement) {
          errorElement.classList.add("hidden");
          errorElement.textContent = "";
          inputElement.classList.remove("border-red-500");
        }
      }

      function clearAllFieldErrors() {
        if (form) {
          const errorElements = form.querySelectorAll('[id$="-error"]');
          const inputElements = form.querySelectorAll("input");

          errorElements.forEach(function (el) {
            el.classList.add("hidden");
            el.textContent = "";
          });

          inputElements.forEach(function (input) {
            input.classList.remove("border-red-500");
          });
        }
      }
    });
  })();
</script>
