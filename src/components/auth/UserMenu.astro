---
// src/components/auth/UserMenu.astro
export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<div class={`user-menu relative ${className}`} id="user-menu-container">
  <!-- User Menu Button -->
  <button
    type="button"
    id="user-menu-button"
    class="flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="sr-only">Open user menu</span>

    <!-- User Avatar -->
    <div
      class="w-8 h-8 bg-teal-100 rounded-full flex items-center justify-center mr-2"
    >
      <span id="user-initials" class="text-teal-700 font-medium text-sm"></span>
    </div>

    <!-- User Name -->
    <span id="user-name" class="hidden md:block text-gray-700 font-medium"
    ></span>

    <!-- Dropdown Arrow -->
    <svg
      class="ml-2 w-4 h-4 text-gray-400"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <!-- Dropdown Menu -->
  <div
    id="user-menu-dropdown"
    class="hidden origin-top-right absolute right-0 mt-2 w-56 rounded-lg shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="user-menu-button"
  >
    <div class="py-1" role="none">
      <!-- User Info Header -->
      <div class="px-4 py-3 border-b border-gray-100">
        <p class="text-sm font-medium text-gray-900" id="menu-user-name"></p>
        <p class="text-sm text-gray-500" id="menu-user-email"></p>

        <!-- Email Verification Status -->
        <div id="email-verification-status" class="mt-2">
          <span
            id="verified-badge"
            class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800"
          >
            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path
                fill-rule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clip-rule="evenodd"></path>
            </svg>
            Verified
          </span>

          <span
            id="unverified-badge"
            class="hidden items-center px-2 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800"
          >
            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path
                fill-rule="evenodd"
                d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                clip-rule="evenodd"></path>
            </svg>
            Verify Email
          </span>
        </div>
      </div>

      <!-- Navigation Links -->
      <a
        href="/auth/dashboard"
        class="group flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors"
        role="menuitem"
      >
        <svg
          class="w-4 h-4 mr-3 text-gray-400 group-hover:text-gray-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"
          ></path>
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M8 7V5a2 2 0 012-2h4a2 2 0 012 2v2m-6 4h4"></path>
        </svg>
        Dashboard
      </a>

      <a
        href="/auth/profile"
        class="group flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors"
        role="menuitem"
      >
        <svg
          class="w-4 h-4 mr-3 text-gray-400 group-hover:text-gray-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
          ></path>
        </svg>
        Profile Settings
      </a>

      <a
        href="/courses"
        class="group flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors"
        role="menuitem"
      >
        <svg
          class="w-4 h-4 mr-3 text-gray-400 group-hover:text-gray-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
          ></path>
        </svg>
        My Courses
      </a>

      <a
        href="/calendar"
        class="group flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors"
        role="menuitem"
      >
        <svg
          class="w-4 h-4 mr-3 text-gray-400 group-hover:text-gray-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
          ></path>
        </svg>
        Calendar
      </a>

      <!-- Divider -->
      <div class="border-t border-gray-100"></div>

      <!-- Settings -->
      <a
        href="/auth/profile"
        class="group flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors"
        role="menuitem"
      >
        <svg
          class="w-4 h-4 mr-3 text-gray-400 group-hover:text-gray-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
          ></path>
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
        Settings
      </a>

      <!-- Support -->
      <a
        href="/support"
        class="group flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors"
        role="menuitem"
      >
        <svg
          class="w-4 h-4 mr-3 text-gray-400 group-hover:text-gray-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z"
          ></path>
        </svg>
        Help & Support
      </a>

      <!-- Divider -->
      <div class="border-t border-gray-100"></div>

      <!-- Logout -->
      <button
        id="logout-button"
        class="group flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors text-left"
        role="menuitem"
      >
        <svg
          class="w-4 h-4 mr-3 text-gray-400 group-hover:text-gray-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
          ></path>
        </svg>
        <span id="logout-text">Sign Out</span>
        <svg
          id="logout-loading"
          class="hidden animate-spin w-4 h-4 ml-2"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"></circle>
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  import { authStore } from "../../stores/authStore";

  document.addEventListener("DOMContentLoaded", function () {
    const menuButton = document.getElementById(
      "user-menu-button",
    ) as HTMLButtonElement;
    const menuDropdown = document.getElementById(
      "user-menu-dropdown",
    ) as HTMLElement;
    const userInitials = document.getElementById(
      "user-initials",
    ) as HTMLElement;
    const userName = document.getElementById("user-name") as HTMLElement;
    const menuUserName = document.getElementById(
      "menu-user-name",
    ) as HTMLElement;
    const menuUserEmail = document.getElementById(
      "menu-user-email",
    ) as HTMLElement;
    const verifiedBadge = document.getElementById(
      "verified-badge",
    ) as HTMLElement;
    const unverifiedBadge = document.getElementById(
      "unverified-badge",
    ) as HTMLElement;
    const logoutButton = document.getElementById(
      "logout-button",
    ) as HTMLButtonElement;
    const logoutText = document.getElementById("logout-text") as HTMLElement;
    const logoutLoading = document.getElementById(
      "logout-loading",
    ) as HTMLElement;

    // Initialize user menu with current user data
    updateUserMenu();

    // Subscribe to auth state changes
    authStore.subscribe(() => {
      updateUserMenu();
    });

    // Toggle dropdown menu
    menuButton?.addEventListener("click", function (e) {
      e.stopPropagation();
      const isExpanded = menuButton.getAttribute("aria-expanded") === "true";

      if (isExpanded) {
        closeMenu();
      } else {
        openMenu();
      }
    });

    // Close menu when clicking outside
    document.addEventListener("click", function (e) {
      const target = e.target as HTMLElement;
      const menuContainer = document.getElementById("user-menu-container");

      if (menuContainer && !menuContainer.contains(target)) {
        closeMenu();
      }
    });

    // Close menu on escape key
    document.addEventListener("keydown", function (e) {
      if (e.key === "Escape") {
        closeMenu();
      }
    });

    // Logout functionality
    logoutButton?.addEventListener("click", async function (e) {
      e.preventDefault();
      e.stopPropagation();

      // Show loading state
      logoutText.textContent = "Signing Out...";
      logoutLoading.classList.remove("hidden");
      logoutButton.disabled = true;

      try {
        await authStore.logout();

        // Redirect to home page
        window.location.href = "/";
      } catch (error) {
        console.error("Logout error:", error);

        // Reset button state
        logoutText.textContent = "Sign Out";
        logoutLoading.classList.add("hidden");
        logoutButton.disabled = false;

        // Still redirect even if logout request failed
        window.location.href = "/";
      }
    });

    function updateUserMenu() {
      const state = authStore.getState();
      const user = state.user;

      if (!user) return;

      // Update user initials
      const initials = getInitials(
        user.first_name,
        user.last_name,
        user.username,
      );
      if (userInitials) userInitials.textContent = initials;

      // Update user name
      const fullName = authStore.getUserFullName();
      if (userName) userName.textContent = fullName;
      if (menuUserName) menuUserName.textContent = fullName;

      // Update email
      if (menuUserEmail) menuUserEmail.textContent = user.email;

      // Update email verification status
      const isVerified = authStore.isEmailVerified();
      if (verifiedBadge && unverifiedBadge) {
        if (isVerified) {
          verifiedBadge.classList.remove("hidden");
          unverifiedBadge.classList.add("hidden");
        } else {
          verifiedBadge.classList.add("hidden");
          unverifiedBadge.classList.remove("hidden");
        }
      }
    }

    function getInitials(
      firstName: string,
      lastName: string,
      username: string,
    ): string {
      if (firstName && lastName) {
        return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
      } else if (firstName) {
        return firstName.charAt(0).toUpperCase();
      } else if (username) {
        return username.substring(0, 2).toUpperCase();
      }
      return "U";
    }

    function openMenu() {
      menuDropdown.classList.remove("hidden");
      menuButton.setAttribute("aria-expanded", "true");
    }

    function closeMenu() {
      menuDropdown.classList.add("hidden");
      menuButton.setAttribute("aria-expanded", "false");
    }
  });
</script>
