---
// src/components/dashboard/DashboardNav.astro
export interface Props {
  currentPage?: string;
  className?: string;
}

const { currentPage = "", className = "" } = Astro.props;

// Helper function to get SVG icons
const getIcon = (iconName: string) => {
  const icons: Record<string, string> = {
    dashboard: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V5a2 2 0 012-2h4a2 2 0 012 2v2m-6 4h4"></path>
    </svg>`,
    user: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
    </svg>`,
    book: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
    </svg>`,
    appointments: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
    </svg>`,
    calendar: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
    </svg>`,
    manage: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
    </svg>`,
    shopping: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l-1 12H6L5 9z"></path>
    </svg>`,
    settings: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
    </svg>`,
  };
  return icons[iconName] || icons.dashboard;
};
---

<nav class={`dashboard-nav ${className}`}>
  <!-- Desktop Navigation -->
  <div
    class="hidden lg:flex lg:flex-col lg:w-64 lg:fixed lg:inset-y-0 lg:bg-white lg:border-r lg:border-gray-200"
  >
    <!-- Logo and User Section at Top -->
    <div class="flex flex-col px-6 py-6 border-b border-gray-200">
      <!-- Logo -->
      <a href="/" class="flex items-center mb-4">
        <div
          class="w-8 h-8 bg-teal-700 flex items-center justify-center rounded-md mr-2"
        >
          <span class="text-white text-xl font-bold italic">C</span>
        </div>
        <span class="text-teal-700 font-bold text-xl">Corrison API</span>
      </a>
    </div>

    <!-- Navigation Links -->
    <div class="flex-1 flex flex-col overflow-y-auto">
      <nav class="flex-1 px-3 py-4 space-y-1" id="desktop-nav-links">
        <!-- Navigation items will be populated by JavaScript -->
      </nav>

      <!-- Bottom section with Logout -->
      <!-- User Info -->
      <div class="flex items-center">
        <div
          class="w-8 h-8 mb-8 bg-teal-100 rounded-full flex items-center justify-center mr-3"
          id="sidebar-user-avatar"
        >
          <span
            id="sidebar-user-initials"
            class="text-teal-700 font-medium text-sm"></span>
        </div>
        <div>
          <p id="sidebar-user-name" class="text-sm font-medium text-gray-900">
          </p>
          <p id="sidebar-user-email" class="text-xs text-gray-500"></p>
        </div>
      </div>
      <div class="px-3 pb-6 border-t border-gray-200 pt-4 space-y-1">
        <a
          href="/support"
          class="group flex items-center px-3 py-2 text-sm font-medium text-gray-700 hover:text-teal-700 hover:bg-gray-50 rounded-md transition-colors"
        >
          <svg
            class="w-5 h-5 mr-3"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z"
            ></path>
          </svg>
          Help & Support
        </a>

        <a
          href="/"
          class="group flex items-center px-3 py-2 text-sm font-medium text-gray-700 hover:text-teal-700 hover:bg-gray-50 rounded-md transition-colors"
        >
          <svg
            class="w-5 h-5 mr-3"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
            ></path>
          </svg>
          Back to Site
        </a>

        <!-- Logout Button -->
        <button
          id="sidebar-logout-button"
          class="group flex items-center w-full px-3 py-2 text-sm font-medium text-gray-700 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors"
        >
          <svg
            class="w-5 h-5 mr-3"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
            ></path>
          </svg>
          <span id="sidebar-logout-text">Sign Out</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Navigation - Keep existing mobile menu -->
  <div class="lg:hidden bg-white border-b border-gray-200">
    <div class="px-4 py-3">
      <button
        id="mobile-dashboard-menu-button"
        type="button"
        class="flex items-center text-sm font-medium text-gray-700 hover:text-teal-700"
      >
        <svg
          class="w-5 h-5 mr-2"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
        Dashboard Menu
        <svg
          class="w-4 h-4 ml-2"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile Menu Dropdown -->
    <div
      id="mobile-dashboard-menu"
      class="hidden border-t border-gray-200 bg-gray-50"
    >
      <nav class="px-4 py-2 space-y-1" id="mobile-nav-links">
        <!-- Navigation items will be populated by JavaScript -->
      </nav>

      <div class="border-t border-gray-200 pt-2 mt-2">
        <a
          href="/support"
          class="block px-3 py-2 text-sm font-medium text-gray-700 hover:text-teal-700 hover:bg-white rounded-md transition-colors"
        >
          <span class="inline-flex items-center">
            <svg
              class="w-5 h-5 mr-3"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z"
              ></path>
            </svg>
            Help & Support
          </span>
        </a>

        <a
          href="/"
          class="block px-3 py-2 text-sm font-medium text-gray-700 hover:text-teal-700 hover:bg-white rounded-md transition-colors"
        >
          <span class="inline-flex items-center">
            <svg
              class="w-5 h-5 mr-3"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
              ></path>
            </svg>
            Back to Site
          </span>
        </a>

        <!-- Mobile Logout Button -->
        <button
          id="mobile-logout-button"
          class="block w-full text-left px-3 py-2 text-sm font-medium text-gray-700 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors"
        >
          <span class="inline-flex items-center">
            <svg
              class="w-5 h-5 mr-3"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
              ></path>
            </svg>
            <span id="mobile-logout-text">Sign Out</span>
          </span>
        </button>
      </div>
    </div>
  </div>
</nav>

<script>
  import { authStore } from "../../stores/authStore";

  document.addEventListener("DOMContentLoaded", function () {
    // Define all navigation items - FIXED NAMING AND ROUTING
    const allNavItems = [
      {
        label: "Overview",
        href: "/auth/dashboard",
        icon: "dashboard",
        id: "dashboard",
      },
      {
        label: "Profile",
        href: "/auth/profile",
        icon: "user",
        id: "profile",
      },
      // CUSTOMER APPOINTMENTS - All users can see their own appointments
      {
        label: "My Appointments", // Renamed from "Appointments" for clarity
        href: "/calendar/appointment",
        icon: "appointments", // Using different icon
        id: "customer-appointments",
        // NO permission requirement - all users can see their own appointments
      },
      {
        label: "My Courses",
        href: "/courses/my-courses",
        icon: "book",
        id: "courses",
      },
      {
        label: "Calendar",
        href: "/calendar",
        icon: "calendar",
        id: "calendar",
      },
      {
        label: "Orders",
        href: "/orders",
        icon: "shopping",
        id: "orders",
      },
      {
        label: "Settings",
        href: "/auth/settings",
        icon: "settings",
        id: "settings",
      },
      // STAFF/ADMIN APPOINTMENTS MANAGEMENT - Only for staff/superuser
      {
        label: "Manage Calendar", // Renamed from "My Appointments" for clarity
        href: "/calendar/my-appointments",
        icon: "manage", // Using different icon to distinguish
        id: "manage-appointments",
        requiresStaffOrSuperuser: true, // Only staff/superuser can manage calendar
      },
    ];

    // Helper function to get SVG icons
    const getIcon = (iconName: string) => {
      const icons: Record<string, string> = {
        dashboard: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V5a2 2 0 012-2h4a2 2 0 012 2v2m-6 4h4"></path>
        </svg>`,
        user: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
        </svg>`,
        book: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
        </svg>`,
        appointments: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>`,
        calendar: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
        </svg>`,
        manage: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
        </svg>`,
        shopping: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l-1 12H6L5 9z"></path>
        </svg>`,
        settings: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>`,
      };
      return icons[iconName] || icons.dashboard;
    };

    // Function to filter navigation items based on user permissions
    function getVisibleNavItems() {
      const state = authStore.getState();
      const user = state.user;

      if (!user)
        return allNavItems.filter((item) => !item.requiresStaffOrSuperuser);

      // Check if user is staff or superuser
      // Use bracket notation to access properties that might not be in the interface
      const isStaffOrSuperuser =
        (user as any).is_staff || (user as any).is_superuser;

      console.log("User permissions:", {
        username: user.username,
        is_staff: (user as any).is_staff,
        is_superuser: (user as any).is_superuser,
        isStaffOrSuperuser,
      });

      // Filter items based on permissions
      return allNavItems.filter((item) => {
        // If item requires staff/superuser and user is not, hide it
        if (item.requiresStaffOrSuperuser && !isStaffOrSuperuser) {
          return false;
        }
        return true;
      });
    }

    // Function to render navigation items
    function renderNavigation() {
      const currentPage = getPageId(); // Get current page from URL or other method
      const visibleNavItems = getVisibleNavItems();

      console.log(
        "Rendering navigation with items:",
        visibleNavItems.map((item) => ({
          label: item.label,
          href: item.href,
          requiresStaff: item.requiresStaffOrSuperuser,
        })),
      );

      renderDesktopNavigation(visibleNavItems, currentPage);
      renderMobileNavigation(visibleNavItems, currentPage);
    }

    // Function to get current page ID (you might need to adjust this based on your routing)
    function getPageId() {
      const path = window.location.pathname;
      if (path === "/auth/dashboard") return "dashboard";
      if (path === "/auth/profile") return "profile";
      if (path === "/calendar/appointment") return "customer-appointments";
      if (path === "/courses/my-courses") return "courses";
      if (path === "/calendar") return "calendar";
      if (path === "/orders") return "orders";
      if (path === "/auth/settings") return "settings";
      if (path === "/calendar/my-appointments") return "manage-appointments";
      return "";
    }

    // Render desktop navigation
    function renderDesktopNavigation(navItems: any[], currentPage: string) {
      const desktopNav = document.getElementById("desktop-nav-links");
      if (!desktopNav) return;

      desktopNav.innerHTML = navItems
        .map((item) => {
          const isActive = currentPage === item.id;
          const baseClasses =
            "group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors";
          const activeClasses =
            "bg-teal-50 text-teal-700 border-r-2 border-teal-700";
          const inactiveClasses =
            "text-gray-700 hover:text-teal-700 hover:bg-gray-50";
          const classes = isActive
            ? `${baseClasses} ${activeClasses}`
            : `${baseClasses} ${inactiveClasses}`;

          return `
          <a href="${item.href}" class="${classes}">
            <span class="mr-3">${getIcon(item.icon)}</span>
            ${item.label}
          </a>
        `;
        })
        .join("");
    }

    // Render mobile navigation
    function renderMobileNavigation(navItems: any[], currentPage: string) {
      const mobileNav = document.getElementById("mobile-nav-links");
      if (!mobileNav) return;

      mobileNav.innerHTML = navItems
        .map((item) => {
          const isActive = currentPage === item.id;
          const baseClasses =
            "block px-3 py-2 text-sm font-medium rounded-md transition-colors";
          const activeClasses = "bg-teal-100 text-teal-700";
          const inactiveClasses =
            "text-gray-700 hover:text-teal-700 hover:bg-white";
          const classes = isActive
            ? `${baseClasses} ${activeClasses}`
            : `${baseClasses} ${inactiveClasses}`;

          return `
          <a href="${item.href}" class="${classes}">
            <span class="inline-flex items-center">
              <span class="mr-3">${getIcon(item.icon)}</span>
              ${item.label}
            </span>
          </a>
        `;
        })
        .join("");
    }

    // Mobile menu toggle functionality
    const mobileMenuButton = document.getElementById(
      "mobile-dashboard-menu-button",
    );
    const mobileMenu = document.getElementById("mobile-dashboard-menu");

    mobileMenuButton?.addEventListener("click", function () {
      mobileMenu?.classList.toggle("hidden");
    });

    // Close mobile menu when clicking outside
    document.addEventListener("click", function (e) {
      const target = e.target as HTMLElement;
      if (
        mobileMenu &&
        mobileMenuButton &&
        !mobileMenu.contains(target) &&
        !mobileMenuButton.contains(target)
      ) {
        mobileMenu.classList.add("hidden");
      }
    });

    // Initialize user info and navigation
    updateUserInfo();
    renderNavigation();

    // Subscribe to auth state changes
    authStore.subscribe(() => {
      updateUserInfo();
      renderNavigation(); // Re-render navigation when auth state changes
    });

    // Logout functionality for sidebar
    const sidebarLogoutButton = document.getElementById(
      "sidebar-logout-button",
    ) as HTMLButtonElement;
    const sidebarLogoutText = document.getElementById("sidebar-logout-text");

    sidebarLogoutButton?.addEventListener("click", async function (e) {
      e.preventDefault();

      // Show loading state
      if (sidebarLogoutText) {
        sidebarLogoutText.textContent = "Signing Out...";
      }
      sidebarLogoutButton.disabled = true;

      try {
        await authStore.logout();
        window.location.href = "/";
      } catch (error) {
        console.error("Logout error:", error);

        // Reset button state
        if (sidebarLogoutText) {
          sidebarLogoutText.textContent = "Sign Out";
        }
        sidebarLogoutButton.disabled = false;

        // Still redirect even if logout request failed
        window.location.href = "/";
      }
    });

    // Logout functionality for mobile
    const mobileLogoutButton = document.getElementById(
      "mobile-logout-button",
    ) as HTMLButtonElement;
    const mobileLogoutText = document.getElementById("mobile-logout-text");

    mobileLogoutButton?.addEventListener("click", async function (e) {
      e.preventDefault();

      // Show loading state
      if (mobileLogoutText) {
        mobileLogoutText.textContent = "Signing Out...";
      }
      mobileLogoutButton.disabled = true;

      try {
        await authStore.logout();
        window.location.href = "/";
      } catch (error) {
        console.error("Mobile logout error:", error);

        // Reset button state
        if (mobileLogoutText) {
          mobileLogoutText.textContent = "Sign Out";
        }
        mobileLogoutButton.disabled = false;

        // Still redirect even if logout request failed
        window.location.href = "/";
      }
    });

    function updateUserInfo() {
      const state = authStore.getState();
      const user = state.user;

      if (!user) return;

      // Update user initials
      const initials = getInitials(
        user.first_name,
        user.last_name,
        user.username,
      );
      const sidebarInitials = document.getElementById("sidebar-user-initials");
      if (sidebarInitials) sidebarInitials.textContent = initials;

      // Update user name
      const fullName = authStore.getUserFullName();
      const sidebarUserName = document.getElementById("sidebar-user-name");
      if (sidebarUserName) sidebarUserName.textContent = fullName;

      // Update email
      const sidebarUserEmail = document.getElementById("sidebar-user-email");
      if (sidebarUserEmail) sidebarUserEmail.textContent = user.email;
    }

    function getInitials(
      firstName: string,
      lastName: string,
      username: string,
    ): string {
      if (firstName && lastName) {
        return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
      } else if (firstName) {
        return firstName.charAt(0).toUpperCase();
      } else if (username) {
        return username.substring(0, 2).toUpperCase();
      }
      return "U";
    }
  });
</script>

<style>
  /* Ensure dashboard nav doesn't interfere with main layout */
  .dashboard-nav {
    /* Custom styles if needed */
  }
</style>
