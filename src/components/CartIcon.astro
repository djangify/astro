---
// src/components/CartIcon.astro
export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<div class={`cart-icon relative ${className}`} id="cart-icon-container">
  <!-- Cart Button -->
  <button
    type="button"
    id="cart-button"
    class="relative flex items-center text-gray-700 hover:text-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 p-2 rounded-md transition-colors"
    aria-label="View shopping cart"
  >
    <!-- Cart SVG Icon -->
    <svg
      class="w-6 h-6"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 7m0 0l-1.5-5M7 13l-2-8m0 0h16m-7 4v8a2 2 0 01-2 2H9a2 2 0 01-2-2v-8a2 2 0 012-2h2a2 2 0 012 2z"
      ></path>
    </svg>

    <!-- Item Count Badge -->
    <span
      id="cart-count-badge"
      class="absolute -top-1 -right-1 bg-teal-600 text-white text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center"
      aria-hidden="true"
    >
      0
    </span>
  </button>

  <!-- Cart Dropdown (initially hidden) -->
  <div
    id="cart-dropdown"
    class="hidden absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-xl border border-gray-200 z-50"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="cart-button"
  >
    <!-- Dropdown content will be populated by JavaScript -->
    <div id="cart-dropdown-content">
      <!-- Loading state -->
      <div id="cart-loading" class="p-4 text-center text-gray-500">
        <svg class="animate-spin h-5 w-5 mx-auto mb-2" viewBox="0 0 24 24">
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"
            fill="none"></circle>
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
        Loading cart...
      </div>

      <!-- Empty cart state -->
      <div id="cart-empty" class="hidden p-6 text-center">
        <svg
          class="w-12 h-12 mx-auto mb-4 text-gray-300"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 7m0 0l-1.5-5M7 13l-2-8m0 0h16"
          ></path>
        </svg>
        <p class="text-gray-500 mb-4">Your cart is empty</p>
        <a
          href="/ecommerce"
          class="inline-block bg-teal-600 text-white px-4 py-2 rounded-md hover:bg-teal-700 transition-colors text-sm font-medium"
        >
          Start Shopping
        </a>
      </div>

      <!-- Cart items container -->
      <div id="cart-items" class="hidden">
        <div class="p-4 border-b border-gray-100">
          <h3 class="text-lg font-semibold text-gray-900">Shopping Cart</h3>
        </div>

        <!-- Items list -->
        <div id="cart-items-list" class="max-h-64 overflow-y-auto">
          <!-- Cart items will be populated here -->
        </div>

        <!-- Cart summary -->
        <div class="p-4 border-t border-gray-100 bg-gray-50">
          <div class="flex justify-between items-center mb-3">
            <span class="text-sm text-gray-600">Subtotal:</span>
            <span id="cart-subtotal" class="font-semibold text-gray-900"
              >$0.00</span
            >
          </div>

          <!-- Cart type indicator -->
          <div id="cart-type-indicator" class="hidden mb-3">
            <span
              class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
            >
              <span id="cart-type-icon" class="mr-1"></span>
              <span id="cart-type-text"></span>
            </span>
          </div>

          <div class="space-y-2">
            <a
              href="/cart"
              class="block w-full text-center bg-gray-100 text-gray-800 hover:bg-gray-200 font-medium py-2 px-4 rounded-md transition-colors text-sm"
            >
              View Cart
            </a>
            <a
              href="/checkout"
              id="checkout-button"
              class="block w-full text-center bg-teal-600 text-white hover:bg-teal-700 font-medium py-2 px-4 rounded-md transition-colors text-sm"
            >
              Checkout
            </a>
          </div>
        </div>
      </div>

      <!-- Error state -->
      <div id="cart-error" class="hidden p-6 text-center">
        <svg
          class="w-12 h-12 mx-auto mb-4 text-red-300"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <p class="text-red-600 mb-4">Failed to load cart</p>
        <button
          id="retry-cart-load"
          class="inline-block bg-teal-600 text-white px-4 py-2 rounded-md hover:bg-teal-700 transition-colors text-sm font-medium"
        >
          Try Again
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // CartIcon functionality will be handled by the cart.ts module
  // This script just handles the dropdown toggle behavior
  document.addEventListener("DOMContentLoaded", function () {
    const cartButton = document.getElementById("cart-button");
    const cartDropdown = document.getElementById("cart-dropdown");
    const retryButton = document.getElementById("retry-cart-load");

    // Toggle dropdown
    cartButton?.addEventListener("click", function (e) {
      e.stopPropagation();
      cartDropdown?.classList.toggle("hidden");

      // Load cart data when dropdown is opened
      if (!cartDropdown?.classList.contains("hidden")) {
        // This will be called from cart.ts
        if (typeof window.cartManager !== "undefined") {
          window.cartManager.loadCartData();
        }
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", function (e) {
      const target = e.target as HTMLElement;
      if (
        cartDropdown &&
        cartButton &&
        !cartDropdown.contains(target) &&
        !cartButton.contains(target)
      ) {
        cartDropdown.classList.add("hidden");
      }
    });

    // Retry loading cart
    retryButton?.addEventListener("click", function () {
      if (typeof window.cartManager !== "undefined") {
        window.cartManager.loadCartData();
      }
    });

    // Close dropdown when pressing Escape key
    document.addEventListener("keydown", function (e) {
      if (e.key === "Escape" && !cartDropdown?.classList.contains("hidden")) {
        cartDropdown?.classList.add("hidden");
      }
    });
  });
</script>
