---
// src/components/calendar/CalendarView.astro
export interface Props {
  username: string;
  selectedDate?: string;
}

const { username, selectedDate } = Astro.props;
---

<div
  class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden"
>
  <!-- Calendar Header -->
  <div class="px-6 py-4 border-b border-gray-200">
    <div class="flex items-center justify-between">
      <div>
        <h3 class="text-lg font-semibold text-gray-900" id="calendar-title">
          Loading...
        </h3>
        <p class="text-sm text-gray-600" id="calendar-subtitle">
          Select a date to view available appointment times
        </p>
      </div>

      <!-- Month Navigation -->
      <div class="flex items-center space-x-2">
        <button
          id="prev-month"
          class="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          aria-label="Previous month"
        >
          <svg
            class="w-5 h-5 text-gray-600"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>

        <div
          class="px-4 py-2 text-sm font-medium text-gray-700"
          id="month-year-display"
        >
          <!-- Will be populated by JavaScript -->
        </div>

        <button
          id="next-month"
          class="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          aria-label="Next month"
        >
          <svg
            class="w-5 h-5 text-gray-600"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Loading State -->
  <div id="calendar-loading" class="p-6">
    <div class="animate-pulse">
      <div class="grid grid-cols-7 gap-1 mb-4">
        <div class="h-8 bg-gray-200 rounded"></div>
        <div class="h-8 bg-gray-200 rounded"></div>
        <div class="h-8 bg-gray-200 rounded"></div>
        <div class="h-8 bg-gray-200 rounded"></div>
        <div class="h-8 bg-gray-200 rounded"></div>
        <div class="h-8 bg-gray-200 rounded"></div>
        <div class="h-8 bg-gray-200 rounded"></div>
      </div>
      <div class="grid grid-cols-7 gap-1">
        {
          Array.from({ length: 35 }).map(() => (
            <div class="h-16 bg-gray-100 rounded" />
          ))
        }
      </div>
    </div>
  </div>

  <!-- Calendar Grid -->
  <div id="calendar-content" class="hidden">
    <!-- Day Headers -->
    <div class="grid grid-cols-7 border-b border-gray-200">
      <div
        class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200"
      >
        Sun
      </div>
      <div
        class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200"
      >
        Mon
      </div>
      <div
        class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200"
      >
        Tue
      </div>
      <div
        class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200"
      >
        Wed
      </div>
      <div
        class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200"
      >
        Thu
      </div>
      <div
        class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200"
      >
        Fri
      </div>
      <div class="px-3 py-2 text-xs font-medium text-gray-500 text-center">
        Sat
      </div>
    </div>

    <!-- Calendar Days -->
    <div id="calendar-grid" class="grid grid-cols-7">
      <!-- Days will be populated by JavaScript -->
    </div>
  </div>

  <!-- Error State -->
  <div id="calendar-error" class="hidden p-6 text-center">
    <div class="text-red-600 mb-2">
      <svg
        class="w-12 h-12 mx-auto mb-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
    </div>
    <h3 class="text-lg font-medium text-gray-900 mb-2">
      Unable to load calendar
    </h3>
    <p class="text-gray-600 mb-4" id="error-message">Please try again later</p>
    <button
      id="retry-calendar"
      class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-4 py-2 rounded-lg transition-colors"
    >
      Try Again
    </button>
  </div>
</div>

<!-- Selected Date Details Modal/Panel -->
<div
  id="date-details"
  class="hidden mt-4 bg-white rounded-lg shadow-sm border border-gray-200"
>
  <div class="px-6 py-4 border-b border-gray-200">
    <div class="flex items-center justify-between">
      <h4 class="text-lg font-medium text-gray-900" id="selected-date-title">
        Available Times
      </h4>
      <button
        id="close-date-details"
        class="text-gray-400 hover:text-gray-600"
        aria-label="Close"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>

  <div class="p-6">
    <div id="available-slots" class="space-y-3">
      <!-- Available time slots will be populated here -->
    </div>

    <div id="no-slots" class="hidden text-center py-8">
      <svg
        class="w-12 h-12 mx-auto mb-4 text-gray-300"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
        ></path>
      </svg>
      <h5 class="text-lg font-medium text-gray-900 mb-2">No Available Times</h5>
      <p class="text-gray-600">
        No appointment slots are available on this date.
      </p>
    </div>
  </div>
</div>

<script is:inline>
  class CalendarView {
    constructor(username, selectedDate = null) {
      this.username = username;
      this.currentDate = new Date();
      this.selectedDate = selectedDate ? new Date(selectedDate) : null;
      this.availableSlots = new Map(); // Map of date string to slots array
      this.calendarUser = null;
      this.appointmentTypes = [];

      this.init();
    }

    async init() {
      try {
        await this.loadCalendarUser();
        await this.loadCurrentMonth();
        this.setupEventListeners();
        this.hideLoading();
      } catch (error) {
        console.error("Calendar initialization failed:", error);
        this.showError("Failed to load calendar");
      }
    }

    async loadCalendarUser() {
      const API_BASE = window.location.origin.includes("localhost")
        ? "http://localhost:8000"
        : "https://corrison.corrisonapi.com";

      const response = await fetch(
        `${API_BASE}/api/v1/appointments-booking/api/public/${this.username}/`,
      );

      if (!response.ok) {
        throw new Error(`Failed to load calendar user: ${response.status}`);
      }

      this.calendarUser = await response.json();
      this.appointmentTypes = this.calendarUser.appointment_types || [];

      // Update calendar title
      const title = document.getElementById("calendar-title");
      if (title) {
        title.textContent = `Book with ${this.calendarUser.display_name}`;
      }
    }

    async loadCurrentMonth() {
      const year = this.currentDate.getFullYear();
      const month = this.currentDate.getMonth() + 1; // JS months are 0-based

      // Update month/year display
      const monthYearDisplay = document.getElementById("month-year-display");
      if (monthYearDisplay) {
        monthYearDisplay.textContent = this.currentDate.toLocaleDateString(
          "en-US",
          {
            month: "long",
            year: "numeric",
          },
        );
      }

      // Load available slots for the month
      await this.loadAvailableSlots(year, month);

      // Render calendar grid
      this.renderCalendarGrid();
    }

    async loadAvailableSlots(year, month) {
      const API_BASE = window.location.origin.includes("localhost")
        ? "http://localhost:8000"
        : "https://corrison.corrisonapi.com";

      // Calculate date range for the month
      const startDate = new Date(year, month - 1, 1);
      const endDate = new Date(year, month, 0); // Last day of month

      const startDateStr = startDate.toISOString().split("T")[0];
      const endDateStr = endDate.toISOString().split("T")[0];

      // We need appointment_type_id, so use the first available type
      if (this.appointmentTypes.length === 0) {
        console.warn("No appointment types available");
        return;
      }

      try {
        // Load slots for each appointment type and combine
        const allSlots = new Map();

        for (const appointmentType of this.appointmentTypes) {
          const url = `${API_BASE}/api/v1/appointments-booking/api/public/${this.username}/slots/?start_date=${startDateStr}&end_date=${endDateStr}&appointment_type_id=${appointmentType.id}`;

          const response = await fetch(url);
          if (!response.ok) continue;

          const slots = await response.json();

          // Group slots by date
          slots.forEach((slot) => {
            const dateKey = slot.date;
            if (!allSlots.has(dateKey)) {
              allSlots.set(dateKey, []);
            }
            allSlots.get(dateKey).push({
              ...slot,
              appointment_type: appointmentType,
            });
          });
        }

        this.availableSlots = allSlots;
      } catch (error) {
        console.error("Failed to load available slots:", error);
      }
    }

    renderCalendarGrid() {
      const grid = document.getElementById("calendar-grid");
      if (!grid) return;

      grid.innerHTML = "";

      const year = this.currentDate.getFullYear();
      const month = this.currentDate.getMonth();

      // Get first day of month and number of days
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const daysInMonth = lastDay.getDate();
      const startingDayOfWeek = firstDay.getDay();

      // Add empty cells for days before month starts
      for (let i = 0; i < startingDayOfWeek; i++) {
        const emptyCell = document.createElement("div");
        emptyCell.className = "h-16 border-r border-b border-gray-200";
        grid.appendChild(emptyCell);
      }

      // Add cells for each day of the month
      for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(year, month, day);
        const dateStr = date.toISOString().split("T")[0];
        const isToday = this.isToday(date);
        const isPast = date < new Date().setHours(0, 0, 0, 0);
        const hasSlots = this.availableSlots.has(dateStr);
        const isSelected =
          this.selectedDate && this.isSameDate(date, this.selectedDate);

        const dayCell = document.createElement("div");
        dayCell.className = `h-16 border-r border-b border-gray-200 p-1 cursor-pointer transition-colors ${
          isPast
            ? "bg-gray-50 text-gray-400"
            : hasSlots
              ? "hover:bg-teal-50 bg-white"
              : "bg-gray-50 text-gray-600"
        } ${isSelected ? "bg-teal-100 border-teal-300" : ""}`;

        dayCell.innerHTML = `
        <div class="flex flex-col h-full">
          <div class="flex-1">
            <span class="text-sm font-medium ${isToday ? "text-teal-700" : ""}">${day}</span>
            ${isToday ? '<div class="w-1 h-1 bg-teal-700 rounded-full mt-1"></div>' : ""}
          </div>
          ${
            hasSlots && !isPast
              ? `
            <div class="flex-shrink-0">
              <div class="w-2 h-2 bg-teal-600 rounded-full"></div>
            </div>
          `
              : ""
          }
        </div>
      `;

        if (!isPast && hasSlots) {
          dayCell.addEventListener("click", () => this.selectDate(dateStr));
        }

        grid.appendChild(dayCell);
      }
    }

    selectDate(dateStr) {
      this.selectedDate = new Date(dateStr);
      this.renderCalendarGrid(); // Re-render to show selection
      this.showDateDetails(dateStr);
    }

    showDateDetails(dateStr) {
      const dateDetails = document.getElementById("date-details");
      const selectedDateTitle = document.getElementById("selected-date-title");
      const availableSlotsContainer =
        document.getElementById("available-slots");
      const noSlotsMessage = document.getElementById("no-slots");

      if (!dateDetails || !selectedDateTitle || !availableSlotsContainer)
        return;

      const date = new Date(dateStr);
      selectedDateTitle.textContent = `Available Times - ${date.toLocaleDateString(
        "en-US",
        {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
        },
      )}`;

      const slots = this.availableSlots.get(dateStr) || [];

      if (slots.length === 0) {
        availableSlotsContainer.classList.add("hidden");
        noSlotsMessage.classList.remove("hidden");
      } else {
        noSlotsMessage.classList.add("hidden");
        availableSlotsContainer.classList.remove("hidden");

        // Group slots by appointment type
        const slotsByType = new Map();
        slots.forEach((slot) => {
          const typeId = slot.appointment_type.id;
          if (!slotsByType.has(typeId)) {
            slotsByType.set(typeId, {
              type: slot.appointment_type,
              slots: [],
            });
          }
          slotsByType.get(typeId).slots.push(slot);
        });

        // Render slots by type
        availableSlotsContainer.innerHTML = "";
        slotsByType.forEach(({ type, slots }) => {
          const typeSection = document.createElement("div");
          typeSection.className = "mb-6 last:mb-0";

          typeSection.innerHTML = `
          <h6 class="font-medium text-gray-900 mb-3">
            ${type.name} (${type.duration_minutes} min)
            ${type.price ? `- $${type.price}` : ""}
          </h6>
          <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2">
            ${slots
              .map(
                (slot) => `
              <button
                class="p-2 text-sm border border-gray-300 rounded-lg hover:border-teal-500 hover:bg-teal-50 transition-colors"
                onclick="window.selectTimeSlot('${dateStr}', '${slot.start_time}', ${type.id})"
              >
                ${this.formatTime(slot.start_time)}
              </button>
            `,
              )
              .join("")}
          </div>
        `;

          availableSlotsContainer.appendChild(typeSection);
        });
      }

      dateDetails.classList.remove("hidden");
      dateDetails.scrollIntoView({ behavior: "smooth", block: "nearest" });
    }

    formatTime(timeString) {
      const [hours, minutes] = timeString.split(":");
      const date = new Date();
      date.setHours(parseInt(hours), parseInt(minutes));
      return date.toLocaleTimeString("en-US", {
        hour: "numeric",
        minute: "2-digit",
        hour12: true,
      });
    }

    setupEventListeners() {
      // Month navigation
      const prevButton = document.getElementById("prev-month");
      const nextButton = document.getElementById("next-month");

      if (prevButton) {
        prevButton.addEventListener("click", () => this.navigateMonth(-1));
      }

      if (nextButton) {
        nextButton.addEventListener("click", () => this.navigateMonth(1));
      }

      // Close date details
      const closeButton = document.getElementById("close-date-details");
      if (closeButton) {
        closeButton.addEventListener("click", () => {
          document.getElementById("date-details").classList.add("hidden");
        });
      }

      // Retry button
      const retryButton = document.getElementById("retry-calendar");
      if (retryButton) {
        retryButton.addEventListener("click", () => {
          this.hideError();
          this.showLoading();
          this.init();
        });
      }
    }

    async navigateMonth(direction) {
      this.currentDate.setMonth(this.currentDate.getMonth() + direction);
      await this.loadCurrentMonth();
    }

    hideLoading() {
      const loading = document.getElementById("calendar-loading");
      const content = document.getElementById("calendar-content");

      if (loading) loading.classList.add("hidden");
      if (content) content.classList.remove("hidden");
    }

    showLoading() {
      const loading = document.getElementById("calendar-loading");
      const content = document.getElementById("calendar-content");
      const error = document.getElementById("calendar-error");

      if (loading) loading.classList.remove("hidden");
      if (content) content.classList.add("hidden");
      if (error) error.classList.add("hidden");
    }

    showError(message) {
      const loading = document.getElementById("calendar-loading");
      const content = document.getElementById("calendar-content");
      const error = document.getElementById("calendar-error");
      const errorMessage = document.getElementById("error-message");

      if (loading) loading.classList.add("hidden");
      if (content) content.classList.add("hidden");
      if (error) error.classList.remove("hidden");
      if (errorMessage) errorMessage.textContent = message;
    }

    hideError() {
      const error = document.getElementById("calendar-error");
      if (error) error.classList.add("hidden");
    }

    isToday(date) {
      const today = new Date();
      return this.isSameDate(date, today);
    }

    isSameDate(date1, date2) {
      return (
        date1.getFullYear() === date2.getFullYear() &&
        date1.getMonth() === date2.getMonth() &&
        date1.getDate() === date2.getDate()
      );
    }
  }

  // Global function for slot selection (called from dynamically generated buttons)
  window.selectTimeSlot = function (date, time, appointmentTypeId) {
    // This will be handled by a booking component/modal
    console.log("Selected slot:", { date, time, appointmentTypeId });

    // For now, show an alert - this will be replaced with booking modal
    alert(
      `Selected: ${date} at ${time}\nAppointment Type ID: ${appointmentTypeId}\n\nBooking functionality will be added in the next component.`,
    );
  };

  // Initialize calendar when page loads
  document.addEventListener("DOMContentLoaded", function () {
    // Get username from a data attribute or script parameter
    const calendarElement = document.querySelector("[data-calendar-username]");
    const username = calendarElement?.getAttribute("data-calendar-username");

    if (username) {
      new CalendarView(username);
    } else {
      console.error("Calendar username not provided");
    }
  });
</script>

<style>
  /* Additional calendar-specific styles */
  #calendar-grid > div:nth-child(7n) {
    border-right: none;
  }

  #calendar-grid > div:nth-last-child(-n + 7) {
    border-bottom: none;
  }
</style>
