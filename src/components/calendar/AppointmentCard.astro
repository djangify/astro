---
// src/components/calendar/AppointmentCard.astro
export interface Props {
  appointment: any; // Appointment object from API
  showActions?: boolean;
  variant?: "default" | "compact" | "detailed";
  isPublic?: boolean; // For public view vs authenticated user view
}

const {
  appointment,
  showActions = true,
  variant = "default",
  isPublic = false,
} = Astro.props;
---

<div
  class={`bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden ${
    variant === "compact" ? "p-4" : "p-6"
  }`}
>
  <!-- Appointment Header -->
  <div class="flex items-start justify-between mb-4">
    <div class="flex-1">
      <h3
        class={`font-semibold text-gray-900 ${
          variant === "compact" ? "text-base" : "text-lg"
        }`}
      >
        {
          appointment.appointment_type_name ||
            appointment.appointment_type?.name ||
            "Appointment"
        }
      </h3>

      {
        !isPublic && (
          <p class="text-sm text-gray-600 mt-1">
            with{" "}
            {appointment.calendar_user_name ||
              appointment.calendar_user ||
              "Provider"}
          </p>
        )
      }
    </div>

    <!-- Status Badge -->
    <div class="flex-shrink-0">
      <span
        class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          appointment.status === "confirmed"
            ? "bg-green-100 text-green-800"
            : appointment.status === "pending"
              ? "bg-yellow-100 text-yellow-800"
              : appointment.status === "cancelled"
                ? "bg-red-100 text-red-800"
                : appointment.status === "completed"
                  ? "bg-blue-100 text-blue-800"
                  : "bg-gray-100 text-gray-800"
        }`}
        id={`status-${appointment.id}`}
      >
        {
          appointment.status === "confirmed"
            ? "Confirmed"
            : appointment.status === "pending"
              ? "Pending"
              : appointment.status === "cancelled"
                ? "Cancelled"
                : appointment.status === "completed"
                  ? "Completed"
                  : appointment.status || "Unknown"
        }
      </span>
    </div>
  </div>

  <!-- Date and Time -->
  <div class="flex items-center space-x-4 mb-4">
    <div class="flex items-center text-sm text-gray-600">
      <svg
        class="w-4 h-4 mr-2 text-gray-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
        ></path>
      </svg>
      <span class="font-medium" id={`date-${appointment.id}`}>
        <!-- Will be formatted by JavaScript -->
      </span>
    </div>

    <div class="flex items-center text-sm text-gray-600">
      <svg
        class="w-4 h-4 mr-2 text-gray-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <span id={`time-${appointment.id}`}>
        <!-- Will be formatted by JavaScript -->
      </span>
    </div>

    {
      appointment.duration_minutes && (
        <div class="flex items-center text-sm text-gray-600">
          <svg
            class="w-4 h-4 mr-2 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M13 10V3L4 14h7v7l9-11h-7z"
            />
          </svg>
          <span>{appointment.duration_minutes} min</span>
        </div>
      )
    }
  </div>

  <!-- Payment Information (if applicable) -->
  {
    appointment.payment_required && appointment.payment_amount && (
      <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg mb-4">
        <div class="flex items-center text-sm">
          <svg
            class="w-4 h-4 mr-2 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v2"
            />
          </svg>
          <span class="text-gray-600">Payment:</span>
        </div>
        <div class="text-right">
          <div class="font-semibold text-gray-900">
            ${appointment.payment_amount}
          </div>
          <div
            class={`text-xs ${
              appointment.payment_status === "paid"
                ? "text-green-600"
                : appointment.payment_status === "pending"
                  ? "text-yellow-600"
                  : "text-gray-600"
            }`}
          >
            {appointment.payment_status === "paid"
              ? "Paid"
              : appointment.payment_status === "pending"
                ? "Payment Required"
                : appointment.payment_status || "Not Required"}
          </div>
        </div>
      </div>
    )
  }

  <!-- Customer Notes (if any and detailed view) -->
  {
    variant === "detailed" && appointment.customer_notes && (
      <div class="mb-4">
        <h4 class="text-sm font-medium text-gray-700 mb-2">Notes:</h4>
        <p class="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
          {appointment.customer_notes}
        </p>
      </div>
    )
  }

  <!-- Actions -->
  {
    showActions && !isPublic && (
      <div class="flex items-center justify-between pt-4 border-t border-gray-200">
        <div class="flex space-x-2">
          {appointment.can_be_cancelled &&
            appointment.status !== "cancelled" &&
            appointment.status !== "completed" && (
              <button
                class="text-sm text-red-600 hover:text-red-800 font-medium"
                onclick={`cancelAppointment(${appointment.id})`}
                id={`cancel-btn-${appointment.id}`}
              >
                Cancel
              </button>
            )}

          {appointment.status === "confirmed" && (
            <button
              class="text-sm text-teal-600 hover:text-teal-800 font-medium"
              onclick={`rescheduleAppointment(${appointment.id})`}
            >
              Reschedule
            </button>
          )}
        </div>

        <div class="flex space-x-2">
          <button
            class="text-sm text-gray-600 hover:text-gray-800 font-medium"
            onclick={`viewAppointmentDetails(${appointment.id})`}
          >
            Details
          </button>
        </div>
      </div>
    )
  }

  <!-- Public Actions (for customer view) -->
  {
    showActions && isPublic && (
      <div class="pt-4 border-t border-gray-200">
        <div class="flex justify-between items-center">
          <div class="text-sm text-gray-600">
            Appointment ID: #{appointment.id}
          </div>

          {appointment.can_be_cancelled &&
            appointment.status !== "cancelled" &&
            appointment.status !== "completed" && (
              <button
                class="text-sm bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded transition-colors"
                onclick={`cancelPublicAppointment(${appointment.id})`}
                id={`public-cancel-btn-${appointment.id}`}
              >
                Cancel Appointment
              </button>
            )}
        </div>
      </div>
    )
  }
</div>

<script is:inline define:vars={{ appointment }}>
  // Format date and time when component loads
  document.addEventListener("DOMContentLoaded", function () {
    const appointmentId = appointment.id;

    // Format date
    const dateElement = document.getElementById(`date-${appointmentId}`);
    if (dateElement && appointment.date) {
      const date = new Date(appointment.date);
      dateElement.textContent = date.toLocaleDateString("en-US", {
        weekday: "short",
        year: "numeric",
        month: "short",
        day: "numeric",
      });
    }

    // Format time
    const timeElement = document.getElementById(`time-${appointmentId}`);
    if (timeElement && appointment.start_time) {
      const [hours, minutes] = appointment.start_time.split(":");
      const startTime = new Date();
      startTime.setHours(parseInt(hours), parseInt(minutes));

      let timeText = startTime.toLocaleTimeString("en-US", {
        hour: "numeric",
        minute: "2-digit",
        hour12: true,
      });

      // Add end time if available
      if (appointment.end_time) {
        const [endHours, endMinutes] = appointment.end_time.split(":");
        const endTime = new Date();
        endTime.setHours(parseInt(endHours), parseInt(endMinutes));

        timeText +=
          " - " +
          endTime.toLocaleTimeString("en-US", {
            hour: "numeric",
            minute: "2-digit",
            hour12: true,
          });
      }

      timeElement.textContent = timeText;
    }
  });

  // Global functions for appointment actions
  window.cancelAppointment = async function (appointmentId) {
    if (!confirm("Are you sure you want to cancel this appointment?")) {
      return;
    }

    const button = document.getElementById(`cancel-btn-${appointmentId}`);
    const statusBadge = document.getElementById(`status-${appointmentId}`);

    if (button) {
      button.textContent = "Cancelling...";
      button.disabled = true;
    }

    try {
      const API_BASE = window.location.origin.includes("localhost")
        ? "http://localhost:8000"
        : "https://corrison.corrisonapi.com";

      // Updated to use new single-user endpoint
      const response = await fetch(
        `${API_BASE}/api/v1/appointments/appointments/${appointmentId}/cancel/`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("access_token")}`,
          },
        },
      );

      if (response.ok) {
        // Update status badge
        if (statusBadge) {
          statusBadge.textContent = "Cancelled";
          statusBadge.className =
            "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800";
        }

        // Hide cancel button
        if (button) {
          button.style.display = "none";
        }

        // Show success message
        showNotification("Appointment cancelled successfully", "success");
      } else {
        throw new Error("Failed to cancel appointment");
      }
    } catch (error) {
      console.error("Error cancelling appointment:", error);
      showNotification(
        "Failed to cancel appointment. Please try again.",
        "error",
      );

      // Reset button
      if (button) {
        button.textContent = "Cancel";
        button.disabled = false;
      }
    }
  };

  window.cancelPublicAppointment = async function (appointmentId) {
    const email = prompt(
      "Please enter your email address to confirm cancellation:",
    );
    if (!email) return;

    if (!confirm("Are you sure you want to cancel this appointment?")) {
      return;
    }

    const button = document.getElementById(
      `public-cancel-btn-${appointmentId}`,
    );

    if (button) {
      button.textContent = "Cancelling...";
      button.disabled = true;
    }

    try {
      const API_BASE = window.location.origin.includes("localhost")
        ? "http://localhost:8000"
        : "https://corrison.corrisonapi.com";

      // Updated to use new single-user endpoint
      const response = await fetch(
        `${API_BASE}/api/v1/calendar/appointment/${appointmentId}/cancel/`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ email }),
        },
      );

      if (response.ok) {
        showNotification("Appointment cancelled successfully", "success");

        // Reload page or update UI
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to cancel appointment");
      }
    } catch (error) {
      console.error("Error cancelling appointment:", error);
      showNotification(
        error.message || "Failed to cancel appointment. Please try again.",
        "error",
      );

      // Reset button
      if (button) {
        button.textContent = "Cancel Appointment";
        button.disabled = false;
      }
    }
  };

  window.rescheduleAppointment = function (appointmentId) {
    // This will be implemented when we add the booking modal/component
    showNotification(
      "Reschedule functionality will be available in the next update",
      "info",
    );
  };

  window.viewAppointmentDetails = function (appointmentId) {
    // Navigate to appointment details page
    window.location.href = `/calendar/appointments/${appointmentId}`;
  };

  // Utility function for notifications
  window.showNotification = function (message, type = "info") {
    // Create notification element
    const notification = document.createElement("div");
    notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm ${
      type === "success"
        ? "bg-green-100 text-green-800 border border-green-200"
        : type === "error"
          ? "bg-red-100 text-red-800 border border-red-200"
          : type === "warning"
            ? "bg-yellow-100 text-yellow-800 border border-yellow-200"
            : "bg-blue-100 text-blue-800 border border-blue-200"
    }`;

    notification.innerHTML = `
      <div class="flex items-center">
        <div class="flex-1">
          <p class="text-sm font-medium">${message}</p>
        </div>
        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-gray-400 hover:text-gray-600">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;

    document.body.appendChild(notification);

    // Auto remove after 5 seconds
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 5000);
  };
</script>
