---
// src/components/courses/CourseGrid.astro
import type { Course, CourseEnrollment } from "../../types";
import CourseCard from "./CourseCard.astro";

export interface Props {
  courses: Course[];
  userEnrollments?: CourseEnrollment[];
  title?: string;
  subtitle?: string;
  showEnrollButtons?: boolean;
  gridCols?: 1 | 2 | 3 | 4;
  className?: string;
}

const {
  courses,
  userEnrollments = [],
  title,
  subtitle,
  showEnrollButtons = true,
  gridCols = 3,
  className = "",
} = Astro.props;

// Helper function to check if user is enrolled in a course
const isUserEnrolled = (courseId: number): boolean => {
  return userEnrollments.some(
    (enrollment) => enrollment.course.id === courseId,
  );
};

// Grid classes mapping
const gridClasses = {
  1: "grid-cols-1",
  2: "grid-cols-1 md:grid-cols-2",
  3: "grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  4: "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4",
};

// Filter and sort functions
const getFilteredCourses = () => {
  return courses.filter((course) => course.is_published);
};

const sortCourses = (coursesToSort: Course[]) => {
  return coursesToSort.sort((a, b) => {
    // Featured courses first
    if (a.is_featured && !b.is_featured) return -1;
    if (!a.is_featured && b.is_featured) return 1;

    // Then by enrollment count (descending)
    const aEnrollments = a.enrollments_count || 0;
    const bEnrollments = b.enrollments_count || 0;
    if (aEnrollments !== bEnrollments) return bEnrollments - aEnrollments;

    // Finally by creation date (newest first)
    return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();
  });
};

const filteredCourses = getFilteredCourses();
const sortedCourses = sortCourses(filteredCourses);
---

<section class={`courses-grid ${className}`}>
  {/* Header */}
  {
    (title || subtitle) && (
      <div class="text-center mb-12">
        {title && (
          <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            {title}
          </h2>
        )}
        {subtitle && (
          <p class="text-xl text-gray-600 max-w-3xl mx-auto">{subtitle}</p>
        )}
      </div>
    )
  }

  {/* Loading State - Only shown when courses array is empty */}
  {
    courses.length === 0 && (
      <div class="text-center py-16">
        <div class="animate-pulse">
          <div class={`grid ${gridClasses[gridCols]} gap-8`}>
            {[...Array(gridCols)].map((_, index) => (
              <div class="bg-white rounded-lg shadow-lg overflow-hidden">
                <div class="w-full h-48 bg-gray-200" />
                <div class="p-6">
                  <div class="h-4 bg-gray-200 rounded mb-2" />
                  <div class="h-6 bg-gray-200 rounded mb-4" />
                  <div class="h-3 bg-gray-200 rounded mb-2" />
                  <div class="h-3 bg-gray-200 rounded mb-4" />
                  <div class="flex space-x-3">
                    <div class="flex-1 h-10 bg-gray-200 rounded" />
                    <div class="flex-1 h-10 bg-gray-200 rounded" />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
        <p class="text-gray-500 mt-4">Loading courses...</p>
      </div>
    )
  }

  {/* Course Grid */}
  {
    sortedCourses.length > 0 && (
      <div class={`grid ${gridClasses[gridCols]} gap-8`}>
        {sortedCourses.map((course) => (
          <CourseCard
            course={course}
            showEnrollButton={showEnrollButtons}
            isEnrolled={isUserEnrolled(course.id)}
          />
        ))}
      </div>
    )
  }

  {/* Empty State */}
  {
    courses.length > 0 && sortedCourses.length === 0 && (
      <div class="text-center py-16">
        <svg
          class="h-16 w-16 mx-auto text-gray-300 mb-4"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
          />
        </svg>
        <h3 class="text-xl font-medium text-gray-900 mb-2">
          No Courses Available
        </h3>
        <p class="text-gray-500">
          {courses.length > 0
            ? "No published courses match your criteria at the moment."
            : "Check back soon for new courses!"}
        </p>
      </div>
    )
  }

  {/* Course Statistics */}
  {
    sortedCourses.length > 0 && (
      <div class="mt-12 text-center">
        <div class="inline-flex items-center text-sm text-gray-500">
          <span class="mr-2">
            Showing {sortedCourses.length} course
            {sortedCourses.length !== 1 ? "s" : ""}
          </span>
          {filteredCourses.length !== courses.length && (
            <span class="text-gray-400">
              â€¢ {courses.length - filteredCourses.length} unpublished
            </span>
          )}
        </div>
      </div>
    )
  }
</section>

<!-- JavaScript for enrollment functionality -->
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    // Handle enrollment button clicks
    document.addEventListener("click", async function (e) {
      if (e.target.classList.contains("enroll-btn")) {
        const button = e.target;
        const courseId = button.getAttribute("data-course-id");

        if (!courseId) return;

        // Check if user is authenticated
        const authStore = await import("/src/stores/authStore.ts");
        if (!authStore.isAuthenticated()) {
          // Redirect to login
          window.location.href =
            "/auth/login?redirect=" +
            encodeURIComponent(window.location.pathname);
          return;
        }

        // Disable button and show loading
        const originalText = button.textContent;
        button.disabled = true;
        button.textContent = "Enrolling...";
        button.classList.add("opacity-50", "cursor-not-allowed");

        try {
          const api = await import("/src/lib/api.ts");
          const enrollment = await api.enrollInCourse(parseInt(courseId));

          // Show success message
          button.textContent = "Enrolled!";
          button.classList.remove("bg-teal-700", "hover:bg-teal-800");
          button.classList.add("bg-green-600");

          // Redirect to course page after a short delay
          setTimeout(() => {
            window.location.href = `/courses/${enrollment.course.slug}`;
          }, 1000);
        } catch (error) {
          console.error("Enrollment failed:", error);

          // Reset button and show error
          button.disabled = false;
          button.textContent = originalText;
          button.classList.remove("opacity-50", "cursor-not-allowed");

          // Show error message (you could implement a toast notification here)
          alert("Failed to enroll in course. Please try again.");
        }
      }
    });
  });
</script>

<style>
  .courses-grid {
    /* Custom styles for the course grid */
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
</style>
