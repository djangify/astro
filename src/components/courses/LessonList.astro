---
// src/components/courses/LessonList.astro
import type { Course, CourseLesson } from "../../types";

export interface Props {
  course: Course;
  lessons: CourseLesson[];
  currentLessonSlug?: string;
  showProgress?: boolean;
  isEnrolled?: boolean;
  variant?: 'sidebar' | 'compact' | 'detailed';
  className?: string;
}

const {
  course,
  lessons,
  currentLessonSlug,
  showProgress = true,
  isEnrolled = false,
  variant = 'sidebar',
  className = '',
} = Astro.props;

// Helper function to format duration
const formatDuration = (minutes: number): string => {
  if (minutes < 60) return `${minutes} min`;
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;
};

// Sort lessons by order
const sortedLessons = lessons.sort((a, b) => a.order - b.order);

// Calculate total duration
const totalDuration = lessons.reduce((sum, lesson) => sum + lesson.duration_minutes, 0);

// Variant-specific classes
const variants = {
  sidebar: 'space-y-2',
  compact: 'space-y-1',
  detailed: 'space-y-4',
};

const listClasses = `lesson-list ${variants[variant]} ${className}`;
---

<div class={listClasses}>
  {variant === 'detailed' && (
    <div class="lesson-list-header mb-6">
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-semibold text-gray-900">Course Curriculum</h3>
        <div class="text-sm text-gray-600">
          {lessons.length} lesson{lessons.length !== 1 ? 's' : ''} â€¢ {formatDuration(totalDuration)}
        </div>
      </div>
      {showProgress && isEnrolled && (
        <div class="mt-3">
          <div class="flex justify-between text-sm text-gray-600 mb-1">
            <span>Course Progress</span>
            <span id="course-progress-text">0%</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div
              id="course-progress-bar"
              class="bg-teal-700 h-2 rounded-full transition-all duration-300"
              style="width: 0%"
            ></div>
          </div>
        </div>
      )}
    </div>
  )}

  <div class="lessons-container">
    {sortedLessons.map((lesson, index) => {
      const isCurrentLesson = currentLessonSlug === lesson.slug;
      const lessonNumber = index + 1;
      
      return (
        <div 
          class={`lesson-item ${isCurrentLesson ? 'current-lesson' : ''}`}
          data-lesson-id={lesson.id}
          data-lesson-slug={lesson.slug}
        >
          {variant === 'detailed' ? (
            <!-- Detailed view for course overview pages -->
            <div class={`lesson-card border rounded-lg transition-all duration-200 ${
              isCurrentLesson 
                ? 'border-teal-300 bg-teal-50' 
                : 'border-gray-200 bg-white hover:border-gray-300 hover:shadow-sm'
            }`}>
              <div class="p-4">
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-4">
                    <!-- Lesson Number/Status -->
                    <div class={`lesson-status flex-shrink-0 w-10 h-10 rounded-full border-2 flex items-center justify-center ${
                      isCurrentLesson 
                        ? 'border-teal-300 bg-teal-100' 
                        : 'border-gray-300 bg-white'
                    }`}>
                      <span class={`text-sm font-medium ${
                        isCurrentLesson ? 'text-teal-700' : 'text-gray-600'
                      }`}>
                        {lessonNumber}
                      </span>
                    </div>

                    <!-- Lesson Info -->
                    <div class="flex-1 min-w-0">
                      <h4 class={`font-medium text-base ${
                        isCurrentLesson ? 'text-teal-900' : 'text-gray-900'
                      }`}>
                        {lesson.title}
                      </h4>
                      
                      <div class="flex items-center space-x-4 mt-1 text-sm text-gray-600">
                        {lesson.duration_minutes && (
                          <span class="flex items-center">
                            <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            {formatDuration(lesson.duration_minutes)}
                          </span>
                        )}
                        
                        {lesson.video_url && (
                          <span class="flex items-center">
                            <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0021 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                            Video
                          </span>
                        )}
                      </div>
                    </div>
                  </div>

                  <!-- Action Button/Status -->
                  <div class="flex items-center space-x-3">
                    {lesson.is_free && (
                      <span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full font-medium">
                        Free Preview
                      </span>
                    )}
                    
                    {isEnrolled ? (
                      <a
                        href={`/courses/${course.slug}/lessons/${lesson.slug}`}
                        class={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                          isCurrentLesson
                            ? 'bg-teal-700 text-white hover:bg-teal-800'
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        }`}
                      >
                        {isCurrentLesson ? 'Current' : 'View Lesson'}
                      </a>
                    ) : (
                      <button
                        class="px-4 py-2 rounded-lg text-sm font-medium bg-gray-100 text-gray-500 cursor-not-allowed"
                        disabled
                      >
                        {lesson.is_free ? 'Preview' : 'Locked'}
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <!-- Sidebar/Compact view for lesson navigation -->
            <a
              href={isEnrolled || lesson.is_free ? `/courses/${course.slug}/lessons/${lesson.slug}` : '#'}
              class={`lesson-link block p-3 rounded-lg transition-colors ${
                isCurrentLesson
                  ? 'bg-teal-50 border border-teal-200'
                  : isEnrolled || lesson.is_free
                  ? 'hover:bg-gray-50 border border-transparent'
                  : 'opacity-60 cursor-not-allowed border border-transparent'
              }`}
            >
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                  <!-- Lesson Number/Status -->
                  <div class={`lesson-status flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                    isCurrentLesson 
                      ? 'border-teal-300 bg-teal-100' 
                      : 'border-gray-300 bg-white'
                  }`}>
                    <span class={`text-xs font-medium ${
                      isCurrentLesson ? 'text-teal-700' : 'text-gray-500'
                    }`}>
                      {lessonNumber}
                    </span>
                  </div>

                  <!-- Lesson Info -->
                  <div class="flex-1 min-w-0">
                    <p class={`text-sm font-medium truncate ${
                      isCurrentLesson ? 'text-teal-700' : 'text-gray-900'
                    }`}>
                      {lesson.title}
                    </p>
                    {lesson.duration_minutes && variant !== 'compact' && (
                      <p class="text-xs text-gray-500">
                        {formatDuration(lesson.duration_minutes)}
                      </p>
                    )}
                  </div>
                </div>

                <!-- Badges -->
                <div class="flex items-center space-x-1">
                  {lesson.is_free && (
                    <span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">
                      Free
                    </span>
                  )}
                  
                  {!isEnrolled && !lesson.is_free && (
                    <svg class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                    </svg>
                  )}
                </div>
              </div>
            </a>
          )}
        </div>
      );
    })}
  </div>

  {variant === 'detailed' && !isEnrolled && (
    <div class="enrollment-prompt mt-6 text-center p-6 bg-gray-50 rounded-lg">
      <h4 class="text-lg font-medium text-gray-900 mb-2">Ready to start learning?</h4>
      <p class="text-gray-600 mb-4">Enroll in this course to access all lessons and track your progress.</p>
      <a
        href={`/courses/${course.slug}#enrollment`}
        class="inline-block bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors"
      >
        Enroll Now
      </a>
    </div>
  )}
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Initialize lesson progress if user is enrolled
    if (document.querySelector('.lesson-list[data-enrolled="true"]')) {
      loadLessonProgress();
    }
  });

  async function loadLessonProgress() {
    try {
      // This would be called if the component knows about enrollment
      const courseId = document.querySelector('.lesson-list')?.getAttribute('data-course-id');
      if (!courseId) return;

      const api = await import("../../lib/api");
      const userCourses = await api.fetchUserCourses();
      const enrollment = userCourses.find(e => e.course.id === parseInt(courseId));
      
      if (!enrollment) return;

      // Update course progress if elements exist
      const progressText = document.getElementById('course-progress-text');
      const progressBar = document.getElementById('course-progress-bar');
      
      if (progressText && progressBar) {
        const progress = enrollment.progress_percentage || 0;
        progressText.textContent = `${progress}%`;
        progressBar.style.width = `${progress}%`;
      }

      // Load individual lesson progress
      const lessonProgress = await api.fetchLessonProgress(enrollment.id);
      
      lessonProgress.forEach(progress => {
        if (progress.completed) {
          updateLessonStatus(progress.lesson.id, true);
        }
      });

    } catch (error) {
      console.error("Error loading lesson progress:", error);
    }
  }

  function updateLessonStatus(lessonId: number, completed: boolean) {
    const lessonItems = document.querySelectorAll(`[data-lesson-id="${lessonId}"] .lesson-status`);
    
    lessonItems.forEach(statusElement => {
      if (completed) {
        statusElement.innerHTML = `
          <svg class="h-4 w-4 text-green-600" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
          </svg>
        `;
        statusElement.classList.add('bg-green-100', 'border-green-300');
        statusElement.classList.remove('border-gray-300', 'bg-white');
      }
    });
  }
</script>

<style>
  .lesson-list {
    /* Component container styles */
  }

  .lesson-item {
    /* Individual lesson item styles */
  }

  .lesson-link:hover:not([disabled]) {
    transform: translateX(2px);
  }

  .current-lesson {
    /* Highlight current lesson */
  }

  .lesson-card {
    /* Card-style lesson item */
  }

  .lesson-status {
    transition: all 0.3s ease;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .lesson-list.detailed .lesson-card {
      padding: 0.75rem;
    }
    
    .lesson-list.detailed .lesson-card .flex {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }
  }
</style>