---
// src/pages/auth/dashboard.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import DashboardNav from "../../components/dashboard/DashboardNav.astro";

// Type definitions
interface User {
  id: string;
  email: string;
  first_name?: string;
  last_name?: string;
  username: string;
  email_verified?: boolean;
}

interface Course {
  id: string;
  name: string;
  slug: string;
  thumbnail?: string;
  youtube_thumbnail?: string;
  progress_percentage?: number;
}

interface SavedCourse {
  course: Course;
}

interface Order {
  id: string;
  order_number: string;
  total: string;
  created_at: string;
}

interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
}
---

<BaseLayout>
  <title slot="title">Dashboard â€“ Corrison</title>
  <meta
    slot="head"
    name="description"
    content="Your personal dashboard with course progress, calendar, and account management."
  />

  <!-- Dashboard Navigation -->
  <DashboardNav currentPage="dashboard" />

  <!-- Main Dashboard Content -->
  <div class="lg:ml-64">
    <main class="py-6">
      <!-- Page Header -->
      <section>
        <div class="container mx-auto px-4 py-12">
          <div class="max-w-4xl mx-auto">
            <h1
              class="text-3xl font-semibold text-gray-900 mb-4"
              id="dashboard-welcome"
            >
              Hello!
            </h1>
            <p class="text-xl text-gray-600">
              Here's what's happening with your account today.
            </p>
          </div>
        </div>
      </section>
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Email Verification Alert -->
        <div
          id="email-verification-alert"
          class="hidden mb-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4"
        >
          <div class="flex">
            <svg
              class="w-5 h-5 text-yellow-400 mr-3 mt-0.5 flex-shrink-0"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                fill-rule="evenodd"
                d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                clip-rule="evenodd"></path>
            </svg>
            <div>
              <h3 class="text-sm font-medium text-yellow-800">
                Email Verification Required
              </h3>
              <p class="mt-1 text-sm text-yellow-700">
                Please verify your email address to access all features.
                <button
                  id="resend-verification"
                  class="font-medium underline hover:no-underline ml-1"
                >
                  Resend verification email
                </button>
              </p>
            </div>
          </div>
        </div>

        <!-- Dashboard Stats Grid -->
        <div
          class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8 mt-8"
        >
          <!-- Active Courses -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="flex items-center">
              <div
                class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center"
              >
                <svg
                  class="w-5 h-5 text-blue-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                  ></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm text-gray-600">Active Courses</p>
                <p
                  class="text-2xl font-semibold text-gray-900"
                  id="active-courses-count"
                >
                  0
                </p>
              </div>
            </div>
          </div>

          <!-- Upcoming Appointments -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="flex items-center">
              <div
                class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center"
              >
                <svg
                  class="w-5 h-5 text-green-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                  ></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm text-gray-600">Upcoming Appointments</p>
                <p
                  class="text-2xl font-semibold text-gray-900"
                  id="upcoming-appointments-count"
                >
                  0
                </p>
              </div>
            </div>
          </div>

          <!-- Upcoming Events -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="flex items-center">
              <div
                class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center"
              >
                <svg
                  class="w-5 h-5 text-purple-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
                  ></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm text-gray-600">Upcoming Events</p>
                <p
                  class="text-2xl font-semibold text-gray-900"
                  id="upcoming-events-count"
                >
                  0
                </p>
              </div>
            </div>
          </div>

          <!-- Account Status -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="flex items-center">
              <div
                class="w-8 h-8 bg-teal-100 rounded-lg flex items-center justify-center"
              >
                <svg
                  class="w-5 h-5 text-teal-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                  ></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm text-gray-600">Account Status</p>
                <p class="text-lg font-semibold" id="account-status">Active</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Actions -->
        <div
          class="mb-8 bg-white rounded-lg shadow-sm border border-gray-200 p-6"
        >
          <h3 class="text-lg font-medium text-gray-900 mb-4">Quick Actions</h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            <a
              href="/courses"
              class="flex items-center p-4 border border-gray-200 rounded-lg hover:border-teal-300 hover:shadow-sm transition-all"
            >
              <svg
                class="w-8 h-8 text-teal-600 mr-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                ></path>
              </svg>
              <div>
                <h4 class="font-medium text-gray-900">Browse Courses</h4>
                <p class="text-sm text-gray-600">
                  Discover new learning opportunities
                </p>
              </div>
            </a>

            <a
              href="/shop"
              class="flex items-center p-4 border border-gray-200 rounded-lg hover:border-teal-300 hover:shadow-sm transition-all"
            >
              <svg
                class="w-8 h-8 text-teal-600 mr-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
              </svg>
              <div>
                <h4 class="font-medium text-gray-900">Browse Shop</h4>
                <p class="text-sm text-gray-600">
                  Explore our products and services
                </p>
              </div>
            </a>

            <a
              href="/calendar"
              class="flex items-center p-4 border border-gray-200 rounded-lg hover:border-teal-300 hover:shadow-sm transition-all"
            >
              <svg
                class="w-8 h-8 text-teal-600 mr-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                ></path>
              </svg>
              <div>
                <h4 class="font-medium text-gray-900">View Calendar</h4>
                <p class="text-sm text-gray-600">
                  Check your schedule and events
                </p>
              </div>
            </a>

            <a
              href="/auth/profile"
              class="flex items-center p-4 border border-gray-200 rounded-lg hover:border-teal-300 hover:shadow-sm transition-all"
            >
              <svg
                class="w-8 h-8 text-teal-600 mr-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                ></path>
              </svg>
              <div>
                <h4 class="font-medium text-gray-900">Update Profile</h4>
                <p class="text-sm text-gray-600">
                  Manage your account settings
                </p>
              </div>
            </a>

            <a
              href="/auth/settings"
              class="flex items-center p-4 border border-gray-200 rounded-lg hover:border-teal-300 hover:shadow-sm transition-all"
            >
              <svg
                class="w-8 h-8 text-teal-600 mr-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                ></path>
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              </svg>
              <div>
                <h4 class="font-medium text-gray-900">Update Settings</h4>
                <p class="text-sm text-gray-600">Configure your preferences</p>
              </div>
            </a>

            <a
              href="/support"
              class="flex items-center p-4 border border-gray-200 rounded-lg hover:border-teal-300 hover:shadow-sm transition-all"
            >
              <svg
                class="w-8 h-8 text-teal-600 mr-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z"
                ></path>
              </svg>
              <div>
                <h4 class="font-medium text-gray-900">Get Support</h4>
                <p class="text-sm text-gray-600">Need help? Contact our team</p>
              </div>
            </a>
          </div>
        </div>

        <!-- My Courses and Products Section -->
        <section class="mb-8">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- My Courses -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
              <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center justify-between">
                  <h3 class="text-lg font-medium text-gray-900">My Courses</h3>
                  <a
                    href="/courses/my-courses"
                    class="text-teal-700 hover:text-teal-800 font-medium text-sm"
                  >
                    View All â†’
                  </a>
                </div>
              </div>
              <div class="p-6">
                <div id="dashboard-courses" class="space-y-4">
                  <!-- Loading state -->
                  <div class="dashboard-courses-loading">
                    <div class="animate-pulse space-y-3">
                      <div class="flex items-center space-x-3">
                        <div class="w-12 h-12 bg-gray-200 rounded"></div>
                        <div class="flex-1">
                          <div class="h-4 bg-gray-200 rounded mb-2"></div>
                          <div class="h-3 bg-gray-200 rounded w-3/4"></div>
                        </div>
                      </div>
                      <div class="flex items-center space-x-3">
                        <div class="w-12 h-12 bg-gray-200 rounded"></div>
                        <div class="flex-1">
                          <div class="h-4 bg-gray-200 rounded mb-2"></div>
                          <div class="h-3 bg-gray-200 rounded w-2/3"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Empty state for courses -->
                <div id="no-courses" class="hidden text-center py-8">
                  <svg
                    class="h-12 w-12 mx-auto text-gray-300 mb-4"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                    ></path>
                  </svg>
                  <h4 class="text-lg font-medium text-gray-900 mb-2">
                    No Courses Yet
                  </h4>
                  <p class="text-gray-500 mb-4">
                    Start learning with our courses
                  </p>
                  <a
                    href="/courses"
                    class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-4 py-2 rounded-lg transition-colors"
                  >
                    Browse Courses
                  </a>
                </div>
              </div>
            </div>

            <!-- My Products -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
              <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center justify-between">
                  <h3 class="text-lg font-medium text-gray-900">My Products</h3>
                  <a
                    href="/auth/orders"
                    class="text-teal-700 hover:text-teal-800 font-medium text-sm"
                  >
                    View All â†’
                  </a>
                </div>
              </div>
              <div class="p-6">
                <div id="dashboard-products" class="space-y-4">
                  <!-- Loading state -->
                  <div class="dashboard-products-loading">
                    <div class="animate-pulse space-y-3">
                      <div class="flex items-center space-x-3">
                        <div class="w-12 h-12 bg-gray-200 rounded"></div>
                        <div class="flex-1">
                          <div class="h-4 bg-gray-200 rounded mb-2"></div>
                          <div class="h-3 bg-gray-200 rounded w-3/4"></div>
                        </div>
                      </div>
                      <div class="flex items-center space-x-3">
                        <div class="w-12 h-12 bg-gray-200 rounded"></div>
                        <div class="flex-1">
                          <div class="h-4 bg-gray-200 rounded mb-2"></div>
                          <div class="h-3 bg-gray-200 rounded w-2/3"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Empty state for products -->
                <div id="no-products" class="hidden text-center py-8">
                  <svg
                    class="h-12 w-12 mx-auto text-gray-300 mb-4"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
                  </svg>
                  <h4 class="text-lg font-medium text-gray-900 mb-2">
                    No Products Yet
                  </h4>
                  <p class="text-gray-500 mb-4">
                    Explore our shop and products
                  </p>
                  <a
                    href="/shop"
                    class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-4 py-2 rounded-lg transition-colors"
                  >
                    Browse Shop
                  </a>
                </div>
              </div>
            </div>
          </div>
        </section>

        <!-- Recent Activity Section (Full Width) -->
        <section class="mb-8">
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="px-6 py-4 border-b border-gray-200">
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-medium text-gray-900">
                  Recent Activity
                </h3>
                <span class="text-sm text-gray-500"
                  >Latest updates and changes</span
                >
              </div>
            </div>
            <div class="p-6">
              <div id="recent-activity-list" class="space-y-4">
                <!-- Loading state -->
                <div class="recent-activity-loading">
                  <div class="animate-pulse space-y-4">
                    <div class="flex items-center space-x-4">
                      <div class="w-10 h-10 bg-gray-200 rounded-lg"></div>
                      <div class="flex-1">
                        <div class="h-4 bg-gray-200 rounded mb-2"></div>
                        <div class="h-3 bg-gray-200 rounded w-2/3"></div>
                      </div>
                      <div class="w-20 h-3 bg-gray-200 rounded"></div>
                    </div>
                    <div class="flex items-center space-x-4">
                      <div class="w-10 h-10 bg-gray-200 rounded-lg"></div>
                      <div class="flex-1">
                        <div class="h-4 bg-gray-200 rounded mb-2"></div>
                        <div class="h-3 bg-gray-200 rounded w-3/4"></div>
                      </div>
                      <div class="w-20 h-3 bg-gray-200 rounded"></div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Empty state for activity -->
              <div id="no-activity" class="hidden text-center py-12">
                <svg
                  class="w-12 h-12 mx-auto text-gray-300 mb-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                  ></path>
                </svg>
                <h4 class="text-lg font-medium text-gray-900 mb-2">
                  No Recent Activity
                </h4>
                <p class="text-gray-500 mb-4">
                  Activity will appear here as you use the site
                </p>
                <a
                  href="/courses"
                  class="mt-2 inline-block text-teal-600 hover:text-teal-500 font-medium"
                >
                  Start Exploring â†’
                </a>
              </div>
            </div>
          </div>
        </section>
      </div>
    </main>
  </div>
</BaseLayout>

<script>
  import { authStore } from "../../stores/authStore";
  import { resendVerification } from "../../lib/auth";

  // Type definitions for TypeScript
  interface User {
    id: string;
    email: string;
    first_name?: string;
    last_name?: string;
    username: string;
    email_verified?: boolean;
  }

  interface Course {
    id: string;
    name: string;
    slug: string;
    thumbnail?: string;
    youtube_thumbnail?: string;
    progress_percentage?: number;
  }

  interface SavedCourse {
    course: Course;
  }

  interface Order {
    id: string;
    order_number: string;
    total: string;
    created_at: string;
  }

  interface AuthState {
    user: User | null;
    isAuthenticated: boolean;
  }

  // Utility functions for safe DOM access
  const getElement = <T extends HTMLElement>(id: string): T | null => {
    return document.getElementById(id) as T | null;
  };

  const safeSetTextContent = (
    element: HTMLElement | null,
    text: string,
  ): void => {
    if (element) {
      element.textContent = text;
    }
  };

  const safeSetClassName = (
    element: HTMLElement | null,
    className: string,
  ): void => {
    if (element) {
      element.className = className;
    }
  };

  const safeSetInnerHTML = (
    element: HTMLElement | null,
    html: string,
  ): void => {
    if (element) {
      element.innerHTML = html;
    }
  };

  const safeAddClass = (
    element: HTMLElement | null,
    className: string,
  ): void => {
    if (element) {
      element.classList.add(className);
    }
  };

  const safeRemoveClass = (
    element: HTMLElement | null,
    className: string,
  ): void => {
    if (element) {
      element.classList.remove(className);
    }
  };

  document.addEventListener("DOMContentLoaded", function () {
    const welcomeHeading = getElement<HTMLHeadingElement>("dashboard-welcome");
    const emailAlert = getElement<HTMLDivElement>("email-verification-alert");
    const resendButton = getElement<HTMLButtonElement>("resend-verification");
    const accountStatus = getElement<HTMLParagraphElement>("account-status");

    // Initialize dashboard
    updateDashboard();

    // Subscribe to auth state changes
    authStore.subscribe(function () {
      updateDashboard();
    });

    // Resend verification email
    if (resendButton) {
      resendButton.addEventListener("click", async function () {
        const state = authStore.getState() as AuthState;
        const userEmail = state.user?.email;

        if (!userEmail) return;

        try {
          safeSetTextContent(resendButton, "Sending...");
          resendButton.disabled = true;

          await resendVerification(userEmail);

          safeSetTextContent(resendButton, "Email sent!");
          resendButton.disabled = true;

          setTimeout(function () {
            safeSetTextContent(resendButton, "Resend verification email");
            resendButton.disabled = false;
          }, 3000);
        } catch (error) {
          console.error("Failed to resend verification:", error);
          safeSetTextContent(resendButton, "Failed to send");

          setTimeout(function () {
            safeSetTextContent(resendButton, "Resend verification email");
            resendButton.disabled = false;
          }, 3000);
        }
      });
    }

    function updateDashboard(): void {
      const state = authStore.getState() as AuthState;
      const user = state.user;

      if (!user) {
        // Redirect to login if not authenticated
        window.location.href = `/auth/login?redirect=${encodeURIComponent(window.location.pathname)}`;
        return;
      }

      // Update welcome message
      const fullName = authStore.getUserFullName();
      const firstName = user.first_name || user.username;
      if (welcomeHeading) {
        if (firstName?.trim()) {
          safeSetTextContent(welcomeHeading, `Hello ${firstName}!`);
        } else {
          safeSetTextContent(welcomeHeading, "Hello!");
        }
      }

      // Show/hide email verification alert
      const isVerified = authStore.isEmailVerified();
      if (emailAlert) {
        if (isVerified) {
          safeAddClass(emailAlert, "hidden");
        } else {
          safeRemoveClass(emailAlert, "hidden");
        }
      }

      // Update account status
      if (accountStatus) {
        if (isVerified) {
          safeSetTextContent(accountStatus, "Verified");
          safeSetClassName(
            accountStatus,
            "text-lg font-semibold text-green-600",
          );
        } else {
          safeSetTextContent(accountStatus, "Pending");
          safeSetClassName(
            accountStatus,
            "text-lg font-semibold text-yellow-600",
          );
        }
      }

      // Load dashboard data including courses and products
      loadDashboardData();
    }

    async function loadDashboardData(): Promise<void> {
      try {
        // Load courses, products, and activity
        await Promise.all([
          loadDashboardCourses(),
          loadDashboardProducts(),
          loadRecentActivity(),
        ]);

        // Update other stats (appointments, events, etc.)
        const upcomingEventsCount = getElement<HTMLParagraphElement>(
          "upcoming-events-count",
        );
        const upcomingAppointmentsCount = getElement<HTMLParagraphElement>(
          "upcoming-appointments-count",
        );

        safeSetTextContent(upcomingEventsCount, "0");
        safeSetTextContent(upcomingAppointmentsCount, "0");
      } catch (error) {
        console.error("Error loading dashboard data:", error);
      }
    }

    async function loadDashboardCourses(): Promise<void> {
      try {
        const accessToken = localStorage.getItem("access_token");
        if (!accessToken) {
          throw new Error("No access token found");
        }

        // Fetch both enrolled and saved courses
        const enrolledResponse = fetch(
          "https://corrison.corrisonapi.com/api/v1/courses/my_courses/",
          {
            headers: {
              Authorization: `Bearer ${accessToken}`,
              "Content-Type": "application/json",
            },
          },
        );

        const savedResponse = fetch(
          "https://corrison.corrisonapi.com/api/v1/courses/my_saved/",
          {
            headers: {
              Authorization: `Bearer ${accessToken}`,
              "Content-Type": "application/json",
            },
          },
        );

        const responses = await Promise.all([enrolledResponse, savedResponse]);
        const enrolledCourses: Course[] = responses[0].ok
          ? await responses[0].json()
          : [];
        const savedCourses: SavedCourse[] = responses[1].ok
          ? await responses[1].json()
          : [];

        const coursesContainer =
          getElement<HTMLDivElement>("dashboard-courses");
        const noCourses = getElement<HTMLDivElement>("no-courses");
        const activeCoursesCount = getElement<HTMLParagraphElement>(
          "active-courses-count",
        );

        // Update stats
        safeSetTextContent(
          activeCoursesCount,
          enrolledCourses.length.toString(),
        );

        if (enrolledCourses.length === 0 && savedCourses.length === 0) {
          if (coursesContainer) {
            const loadingEl = coursesContainer.querySelector(
              ".dashboard-courses-loading",
            );
            if (loadingEl) {
              safeAddClass(loadingEl as HTMLElement, "hidden");
            }
          }
          safeRemoveClass(noCourses, "hidden");
          return;
        }

        // Show enrolled courses (first 3)
        let coursesHTML = "";
        const recentEnrolled = enrolledCourses.slice(0, 3);

        if (recentEnrolled.length > 0) {
          coursesHTML += recentEnrolled
            .map((course: Course) => {
              const thumbnailHtml =
                course.thumbnail || course.youtube_thumbnail
                  ? `<img src="${course.thumbnail || course.youtube_thumbnail}" alt="${course.name}" class="w-full h-full object-cover rounded" />`
                  : `<svg class="w-6 h-6 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                   </svg>`;

              const progressPercentage = course.progress_percentage || 0;
              const buttonText = progressPercentage > 0 ? "Continue" : "Start";

              return `
                <div class="flex items-center space-x-3 p-3 border border-gray-100 rounded-lg hover:border-gray-200 transition-colors">
                  <div class="w-12 h-12 bg-teal-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    ${thumbnailHtml}
                  </div>
                  <div class="flex-1 min-w-0">
                    <h4 class="font-medium text-gray-900 truncate">${course.name}</h4>
                    <div class="flex items-center space-x-2 mt-1">
                      <div class="flex-1 bg-gray-200 rounded-full h-2">
                        <div class="bg-teal-600 h-2 rounded-full" style="width: ${progressPercentage}%"></div>
                      </div>
                      <span class="text-xs text-gray-500 font-medium">${progressPercentage}%</span>
                    </div>
                  </div>
                  <a href="/courses/${course.slug}" class="text-teal-600 hover:text-teal-700 text-sm font-medium">
                    ${buttonText}
                  </a>
                </div>
              `;
            })
            .join("");
        }

        // Add saved courses section if there are any
        if (savedCourses.length > 0) {
          if (coursesHTML) {
            coursesHTML +=
              '<div class="border-t border-gray-200 pt-4 mt-4"></div>';
          }

          coursesHTML += `
            <div class="mb-3">
              <h5 class="text-sm font-medium text-gray-700 flex items-center">
                <svg class="w-4 h-4 mr-2 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.518 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                </svg>
                Saved Courses (${savedCourses.length})
              </h5>
            </div>
          `;

          coursesHTML += savedCourses
            .slice(0, 3)
            .map((saved: SavedCourse) => {
              const course = saved.course;
              const thumbnailHtml =
                course.thumbnail || course.youtube_thumbnail
                  ? `<img src="${course.thumbnail || course.youtube_thumbnail}" alt="${course.name}" class="w-full h-full object-cover rounded" />`
                  : `<svg class="w-4 h-4 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
                     <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.518 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                   </svg>`;

              return `
                <div class="flex items-center space-x-3 p-2 rounded hover:bg-gray-50">
                  <div class="w-10 h-10 bg-yellow-100 rounded flex items-center justify-center">
                    ${thumbnailHtml}
                  </div>
                  <div class="flex-1">
                    <p class="text-sm font-medium text-gray-900 truncate">${course.name}</p>
                    <p class="text-xs text-gray-500">Saved for later</p>
                  </div>
                  <div class="flex space-x-2">
                    <button onclick="removeSavedCourse('${course.slug}')" class="text-xs text-red-600 hover:text-red-700">Remove</button>
                    <a href="/courses/${course.slug}" class="text-xs text-teal-600 hover:text-teal-700">View</a>
                  </div>
                </div>
              `;
            })
            .join("");
        }

        safeSetInnerHTML(coursesContainer, coursesHTML);
      } catch (error) {
        console.error("Error loading dashboard courses:", error);

        const coursesContainer =
          getElement<HTMLDivElement>("dashboard-courses");
        safeSetInnerHTML(
          coursesContainer,
          `
          <div class="text-center py-6">
            <p class="text-gray-500">Unable to load courses</p>
            <a href="/courses" class="text-teal-700 hover:text-teal-800 text-sm">Browse Courses â†’</a>
          </div>
        `,
        );
      }
    }

    async function loadDashboardProducts(): Promise<void> {
      try {
        const accessToken = localStorage.getItem("access_token");
        if (!accessToken) {
          throw new Error("No access token found");
        }

        const response = await fetch(
          "https://corrison.corrisonapi.com/api/v1/orders/",
          {
            headers: {
              Authorization: `Bearer ${accessToken}`,
              "Content-Type": "application/json",
            },
          },
        );

        const productsContainer =
          getElement<HTMLDivElement>("dashboard-products");
        const noProducts = getElement<HTMLDivElement>("no-products");

        if (!response.ok) {
          if (productsContainer) {
            const loadingEl = productsContainer.querySelector(
              ".dashboard-products-loading",
            );
            if (loadingEl) {
              safeAddClass(loadingEl as HTMLElement, "hidden");
            }
          }
          safeRemoveClass(noProducts, "hidden");
          return;
        }

        const orders: Order[] = await response.json();
        const recentOrders = orders.slice(0, 3);

        if (recentOrders.length === 0) {
          if (productsContainer) {
            const loadingEl = productsContainer.querySelector(
              ".dashboard-products-loading",
            );
            if (loadingEl) {
              safeAddClass(loadingEl as HTMLElement, "hidden");
            }
          }
          safeRemoveClass(noProducts, "hidden");
          return;
        }

        const ordersHTML = recentOrders
          .map(
            (order: Order) => `
            <div class="flex items-center space-x-3 p-3 border border-gray-100 rounded-lg hover:border-gray-200 transition-colors">
              <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center flex-shrink-0">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
                </svg>
              </div>
              <div class="flex-1 min-w-0">
                <h4 class="font-medium text-gray-900">Order #${order.order_number}</h4>
                <p class="text-sm text-gray-500">$${order.total} â€¢ ${new Date(order.created_at).toLocaleDateString()}</p>
              </div>
              <a href="/auth/orders/${order.id}" class="text-teal-600 hover:text-teal-700 text-sm font-medium">View</a>
            </div>
          `,
          )
          .join("");

        safeSetInnerHTML(productsContainer, ordersHTML);
      } catch (error) {
        console.error("Error loading dashboard products:", error);

        const productsContainer =
          getElement<HTMLDivElement>("dashboard-products");
        safeSetInnerHTML(
          productsContainer,
          `
          <div class="text-center py-6">
            <p class="text-gray-500">Unable to load orders</p>
            <a href="/shop" class="text-teal-700 hover:text-teal-800 text-sm">Browse Shop â†’</a>
          </div>
        `,
        );
      }
    }

    async function loadRecentActivity(): Promise<void> {
      try {
        // For now, show recent enrollments and saves as activity
        const activityContainer = getElement<HTMLDivElement>(
          "recent-activity-list",
        );
        const noActivity = getElement<HTMLDivElement>("no-activity");

        // Simple implementation - you can enhance this later
        if (activityContainer) {
          const loadingEl = activityContainer.querySelector(
            ".recent-activity-loading",
          );
          if (loadingEl) {
            safeAddClass(loadingEl as HTMLElement, "hidden");
          }
        }
        safeRemoveClass(noActivity, "hidden");
      } catch (error) {
        console.error("Error loading recent activity:", error);

        const activityContainer = getElement<HTMLDivElement>(
          "recent-activity-list",
        );
        safeSetInnerHTML(
          activityContainer,
          `
          <div class="text-center py-8">
            <p class="text-gray-500">Unable to load activity</p>
          </div>
        `,
        );
      }
    }

    // Global function for removing saved courses from dashboard
    (window as any).removeSavedCourse = async function (
      courseSlug: string,
    ): Promise<void> {
      try {
        const accessToken = localStorage.getItem("access_token");
        if (!accessToken) {
          throw new Error("No access token found");
        }

        const response = await fetch(
          `https://corrison.corrisonapi.com/api/v1/courses/${courseSlug}/unsave_course/`,
          {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${accessToken}`,
              "Content-Type": "application/json",
            },
          },
        );

        if (!response.ok) {
          throw new Error("Failed to remove saved course");
        }

        // Reload the courses section to reflect changes
        await loadDashboardCourses();

        // Show success notification
        showNotification("Course removed from saved list", "success");
      } catch (error) {
        console.error("Error removing saved course:", error);
        showNotification("Failed to remove course from saved list", "error");
      }
    };

    // Simple notification function
    function showNotification(
      message: string,
      type?: "info" | "success" | "error",
    ): void {
      const notificationType = type || "info";

      const notification = document.createElement("div");
      let className: string;

      switch (notificationType) {
        case "success":
          className = "bg-green-100 text-green-800 border border-green-200";
          break;
        case "error":
          className = "bg-red-100 text-red-800 border border-red-200";
          break;
        default:
          className = "bg-blue-100 text-blue-800 border border-blue-200";
      }

      notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm ${className}`;
      notification.innerHTML = `
        <div class="flex items-center">
          <span class="flex-1">${message}</span>
          <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-current opacity-50 hover:opacity-100">
            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      `;

      document.body.appendChild(notification);

      // Auto remove after 3 seconds
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 3000);
    }
  });
</script>

<style>
  /* Dashboard-specific styles */
  main {
    min-height: calc(100vh - 64px); /* Adjust based on header height */
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
