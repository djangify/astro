---
// src/pages/auth/profile.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import DashboardNav from "../../components/dashboard/DashboardNav.astro";

// This page requires authentication, so we'll handle data loading client-side
---

<BaseLayout>
  <title slot="title">Profile Settings – Corrison</title>
  <meta
    slot="head"
    name="description"
    content="Manage your profile information and account preferences."
  />

  <!-- Dashboard Navigation -->
  <DashboardNav currentPage="profile" />

  <!-- Main Content with Sidebar Layout -->
  <div class="lg:ml-64">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Page Header -->

      <section>
        <div class="container mx-auto px-4 py-12">
          <div class="max-w-4xl mx-auto">
            <h1 class="text-3xl font-semibold text-gray-900 mb-4">
              Profile Settings
            </h1>
            <p class="text-xl text-gray-600">
              Manage your profile information and account preferences.
            </p>
          </div>
        </div>
      </section>

      <!-- Main Content -->
      <main class="container mx-auto px-4 py-12">
        <!-- Loading State -->
        <div id="loading-state" class="text-center py-16">
          <div
            class="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-700 mx-auto mb-4"
          >
          </div>
          <p class="text-gray-600">Loading your profile...</p>
        </div>

        <!-- Not Authenticated State -->
        <div id="not-authenticated" class="text-center py-16 hidden">
          <svg
            class="h-16 w-16 mx-auto text-gray-300 mb-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
            ></path>
          </svg>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">Please Sign In</h2>
          <p class="text-gray-600 mb-6">
            You need to be signed in to view your profile.
          </p>
          <div class="space-y-4">
            <a
              href="/auth/login"
              class="inline-block bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors"
            >
              Sign In
            </a>
            <div class="text-sm text-gray-500">
              Don't have an account?
              <a
                href="/auth/register"
                class="text-teal-600 hover:text-teal-500 font-medium"
                >Create Account</a
              >
            </div>
          </div>
        </div>

        <!-- Profile Content (Hidden initially) -->
        <div id="profile-content" class="hidden max-w-4xl mx-auto">
          <!-- Email Verification Alert -->
          <div
            id="email-verification-alert"
            class="hidden mb-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4"
          >
            <div class="flex">
              <svg
                class="w-5 h-5 text-yellow-400 mr-3 mt-0.5 flex-shrink-0"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fill-rule="evenodd"
                  d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                  clip-rule="evenodd"></path>
              </svg>
              <div>
                <h3 class="text-sm font-medium text-yellow-800">
                  Email Verification Required
                </h3>
                <p class="mt-1 text-sm text-yellow-700">
                  Please verify your email address to access all features.
                  <button
                    id="resend-verification"
                    class="ml-2 font-medium underline hover:no-underline"
                  >
                    Resend verification email
                  </button>
                </p>
              </div>
            </div>
          </div>

          <!-- Profile Form -->
          <div class="bg-white shadow-sm rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200">
              <h2 class="text-lg font-semibold text-gray-900">
                Personal Information
              </h2>
              <p class="text-sm text-gray-600">
                Update your personal details and contact information.
              </p>
            </div>

            <form id="profile-form" class="p-6 space-y-6">
              <!-- Success/Error Messages -->
              <div id="profile-message" class="hidden"></div>

              <!-- Profile Picture -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  Profile Picture
                </label>
                <div class="flex items-center space-x-4">
                  <div
                    id="profile-avatar"
                    class="h-16 w-16 rounded-full bg-teal-100 flex items-center justify-center"
                  >
                    <svg
                      class="h-8 w-8 text-teal-600"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                        clip-rule="evenodd"></path>
                    </svg>
                  </div>
                  <div>
                    <button
                      type="button"
                      class="bg-white border border-gray-300 rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-teal-500"
                    >
                      Change Picture
                    </button>
                    <p class="text-xs text-gray-500 mt-1">
                      JPG, GIF or PNG. 1MB max.
                    </p>
                  </div>
                </div>
              </div>

              <!-- First Name -->
              <div>
                <label
                  for="first_name"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  First Name
                </label>
                <input
                  type="text"
                  id="first_name"
                  name="first_name"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Enter your first name"
                />
              </div>

              <!-- Last Name -->
              <div>
                <label
                  for="last_name"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Last Name
                </label>
                <input
                  type="text"
                  id="last_name"
                  name="last_name"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Enter your last name"
                />
              </div>

              <!-- Email -->
              <div>
                <label
                  for="email"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Email Address
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Enter your email"
                />
                <p class="text-xs text-gray-500 mt-1">
                  We'll send important updates to this email.
                </p>
              </div>

              <!-- Username -->
              <div>
                <label
                  for="username"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Username
                </label>
                <input
                  type="text"
                  id="username"
                  name="username"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Enter your username"
                />
              </div>

              <!-- Bio -->
              <div>
                <label
                  for="bio"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Bio
                </label>
                <textarea
                  id="bio"
                  name="bio"
                  rows="4"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Tell us about yourself..."></textarea>
              </div>

              <!-- Website -->
              <div>
                <label
                  for="website"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Website
                </label>
                <input
                  type="url"
                  id="website"
                  name="website"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="https://yourwebsite.com"
                />
              </div>

              <!-- Action Buttons -->
              <div
                class="flex justify-end space-x-3 pt-6 border-t border-gray-200"
              >
                <button
                  type="button"
                  id="cancel-btn"
                  class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-teal-500"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  id="save-btn"
                  class="px-4 py-2 bg-teal-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-teal-500"
                >
                  Save Changes
                </button>
              </div>
            </form>
          </div>

          <!-- Change Password Section -->
          <div class="bg-white shadow-sm rounded-lg mt-8">
            <div class="px-6 py-4 border-b border-gray-200">
              <h2 class="text-lg font-semibold text-gray-900">
                Change Password
              </h2>
              <p class="text-sm text-gray-600">
                Update your password to keep your account secure.
              </p>
            </div>

            <form id="password-form" class="p-6 space-y-6">
              <!-- Password Message -->
              <div id="password-message" class="hidden"></div>

              <!-- Current Password -->
              <div>
                <label
                  for="current_password"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Current Password
                </label>
                <input
                  type="password"
                  id="current_password"
                  name="current_password"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Enter your current password"
                />
              </div>

              <!-- New Password -->
              <div>
                <label
                  for="new_password"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  New Password
                </label>
                <input
                  type="password"
                  id="new_password"
                  name="new_password"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Enter your new password"
                />
              </div>

              <!-- Confirm Password -->
              <div>
                <label
                  for="confirm_password"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Confirm New Password
                </label>
                <input
                  type="password"
                  id="confirm_password"
                  name="confirm_password"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Confirm your new password"
                />
              </div>

              <!-- Password Requirements -->
              <div class="bg-gray-50 rounded-md p-4">
                <h4 class="text-sm font-medium text-gray-900 mb-2">
                  Password Requirements:
                </h4>
                <ul class="text-sm text-gray-600 space-y-1">
                  <li>• At least 8 characters long</li>
                  <li>• Contains at least one uppercase letter</li>
                  <li>• Contains at least one lowercase letter</li>
                  <li>• Contains at least one number</li>
                </ul>
              </div>

              <!-- Action Buttons -->
              <div class="flex justify-end pt-6 border-t border-gray-200">
                <button
                  type="submit"
                  id="change-password-btn"
                  class="px-4 py-2 bg-teal-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-teal-500"
                >
                  Change Password
                </button>
              </div>
            </form>
          </div>
        </div>
      </main>
    </div>
  </div>
</BaseLayout>

<script>
  import { authStore } from "../../stores/authStore";

  interface User {
    first_name?: string;
    last_name?: string;
    email?: string;
    username?: string;
    profile?: {
      bio?: string;
      website?: string;
      email_verified?: boolean;
    };
  }

  interface ProfileData {
    first_name: string;
    last_name: string;
    email: string;
    username: string;
    bio: string;
    website: string;
  }

  interface PasswordData {
    old_password: string;
    new_password: string;
  }

  document.addEventListener("DOMContentLoaded", function () {
    console.log("🔍 Initializing Profile page...");

    // Initialise the page
    initializePage();

    async function initializePage(): Promise<void> {
      try {
        // Check authentication using proper method
        const authState = authStore.getState();
        console.log("🔐 Auth state:", {
          isAuthenticated: authState.isAuthenticated,
          user: authState.user,
        });

        if (!authState.isAuthenticated || !authState.user) {
          console.log("❌ User not authenticated, showing login prompt");
          showNotAuthenticatedState();
          return;
        }

        console.log("✅ User authenticated, loading profile...");
        loadProfile(authState.user);
        showProfileContent();
        setupEventListeners();
      } catch (error) {
        console.error("❌ Error loading profile:", error);
        showNotAuthenticatedState();
      } finally {
        hideLoadingState();
      }
    }

    function hideLoadingState(): void {
      const loadingElement = document.getElementById("loading-state");
      loadingElement?.classList.add("hidden");
    }

    function showNotAuthenticatedState(): void {
      const notAuthElement = document.getElementById("not-authenticated");
      notAuthElement?.classList.remove("hidden");
    }

    function showProfileContent(): void {
      const profileElement = document.getElementById("profile-content");
      profileElement?.classList.remove("hidden");
    }

    function loadProfile(user: User): void {
      // Populate form fields with user data with null checks
      const firstNameInput = document.getElementById(
        "first_name",
      ) as HTMLInputElement | null;
      const lastNameInput = document.getElementById(
        "last_name",
      ) as HTMLInputElement | null;
      const emailInput = document.getElementById(
        "email",
      ) as HTMLInputElement | null;
      const usernameInput = document.getElementById(
        "username",
      ) as HTMLInputElement | null;
      const bioTextarea = document.getElementById(
        "bio",
      ) as HTMLTextAreaElement | null;
      const websiteInput = document.getElementById(
        "website",
      ) as HTMLInputElement | null;

      if (firstNameInput) firstNameInput.value = user.first_name || "";
      if (lastNameInput) lastNameInput.value = user.last_name || "";
      if (emailInput) emailInput.value = user.email || "";
      if (usernameInput) usernameInput.value = user.username || "";

      // Populate profile fields if they exist
      if (user.profile) {
        if (bioTextarea) bioTextarea.value = user.profile.bio || "";
        if (websiteInput) websiteInput.value = user.profile.website || "";
      }

      // Show email verification alert if needed
      if (!authStore.isEmailVerified()) {
        const alertElement = document.getElementById(
          "email-verification-alert",
        );
        alertElement?.classList.remove("hidden");
      }

      // Update profile avatar with initials if no image
      updateProfileAvatar(user);
    }

    function updateProfileAvatar(user: User): void {
      const avatar = document.getElementById("profile-avatar");
      if (!avatar) return;

      const fullName = authStore.getUserFullName();
      const initials = fullName
        .split(" ")
        .map((name) => name.charAt(0))
        .join("")
        .toUpperCase()
        .slice(0, 2);

      if (initials) {
        avatar.innerHTML = `<span class="text-teal-600 font-medium">${initials}</span>`;
      }
    }

    function setupEventListeners(): void {
      // Profile form submission
      const profileForm = document.getElementById(
        "profile-form",
      ) as HTMLFormElement | null;
      profileForm?.addEventListener("submit", handleProfileSubmit);

      // Password form submission
      const passwordForm = document.getElementById(
        "password-form",
      ) as HTMLFormElement | null;
      passwordForm?.addEventListener("submit", handlePasswordSubmit);

      // Cancel button
      const cancelBtn = document.getElementById(
        "cancel-btn",
      ) as HTMLButtonElement | null;
      cancelBtn?.addEventListener("click", () => {
        const authState = authStore.getState();
        if (authState.user) {
          loadProfile(authState.user);
          showMessage("profile-message", "Changes cancelled", "info");
        }
      });

      // Resend verification
      const resendBtn = document.getElementById(
        "resend-verification",
      ) as HTMLButtonElement | null;
      resendBtn?.addEventListener("click", handleResendVerification);
    }

    async function handleProfileSubmit(e: Event): Promise<void> {
      e.preventDefault();
      const saveBtn = document.getElementById(
        "save-btn",
      ) as HTMLButtonElement | null;
      if (!saveBtn) return;

      const originalText = saveBtn.textContent || "Save Changes";

      try {
        saveBtn.textContent = "Saving...";
        saveBtn.disabled = true;

        const form = e.target as HTMLFormElement;
        const formData = new FormData(form);
        const profileData: ProfileData = {
          first_name: (formData.get("first_name") as string) || "",
          last_name: (formData.get("last_name") as string) || "",
          email: (formData.get("email") as string) || "",
          username: (formData.get("username") as string) || "",
          bio: (formData.get("bio") as string) || "",
          website: (formData.get("website") as string) || "",
        };

        await updateProfile(profileData);

        // Update auth store with new user data
        await authStore.refreshUser();

        showMessage(
          "profile-message",
          "Profile updated successfully!",
          "success",
        );
      } catch (error) {
        console.error("Profile update error:", error);
        const errorMessage =
          error instanceof Error ? error.message : "Failed to update profile";
        showMessage("profile-message", errorMessage, "error");
      } finally {
        saveBtn.textContent = originalText;
        saveBtn.disabled = false;
      }
    }

    async function handlePasswordSubmit(e: Event): Promise<void> {
      e.preventDefault();
      const changeBtn = document.getElementById(
        "change-password-btn",
      ) as HTMLButtonElement | null;
      if (!changeBtn) return;

      const originalText = changeBtn.textContent || "Change Password";

      try {
        changeBtn.textContent = "Changing...";
        changeBtn.disabled = true;

        const form = e.target as HTMLFormElement;
        const formData = new FormData(form);
        const currentPassword =
          (formData.get("current_password") as string) || "";
        const newPassword = (formData.get("new_password") as string) || "";
        const confirmPassword =
          (formData.get("confirm_password") as string) || "";

        if (newPassword !== confirmPassword) {
          throw new Error("New passwords do not match");
        }

        const passwordData: PasswordData = {
          old_password: currentPassword,
          new_password: newPassword,
        };

        await changePassword(passwordData);

        // Clear form
        form.reset();

        showMessage(
          "password-message",
          "Password changed successfully!",
          "success",
        );
      } catch (error) {
        console.error("Password change error:", error);
        const errorMessage =
          error instanceof Error ? error.message : "Failed to change password";
        showMessage("password-message", errorMessage, "error");
      } finally {
        changeBtn.textContent = originalText;
        changeBtn.disabled = false;
      }
    }

    async function handleResendVerification(): Promise<void> {
      const resendBtn = document.getElementById(
        "resend-verification",
      ) as HTMLButtonElement | null;
      if (!resendBtn) return;

      const originalText = resendBtn.textContent || "Resend verification email";

      try {
        resendBtn.textContent = "Sending...";
        resendBtn.disabled = true;

        const authState = authStore.getState();
        if (!authState.user?.email) return;

        await resendVerification(authState.user.email);

        resendBtn.textContent = "Email sent!";

        setTimeout(() => {
          resendBtn.textContent = originalText;
          resendBtn.disabled = false;
        }, 3000);
      } catch (error) {
        console.error("Resend verification error:", error);
        resendBtn.textContent = "Failed to send";

        setTimeout(() => {
          resendBtn.textContent = originalText;
          resendBtn.disabled = false;
        }, 3000);
      }
    }

    function showMessage(
      elementId: string,
      message: string,
      type: "success" | "error" | "info",
    ): void {
      const messageEl = document.getElementById(elementId);
      if (!messageEl) return;

      const typeClasses = {
        success: "bg-green-50 text-green-700 border-green-200",
        error: "bg-red-50 text-red-700 border-red-200",
        info: "bg-blue-50 text-blue-700 border-blue-200",
      };

      messageEl.className = `p-4 rounded-md border ${typeClasses[type]} mb-4`;
      messageEl.textContent = message;
      messageEl.classList.remove("hidden");

      // Auto-hide success/info messages
      if (type !== "error") {
        setTimeout(() => {
          messageEl.classList.add("hidden");
        }, 5000);
      }
    }

    // API functions with proper error handling
    async function updateProfile(profileData: ProfileData): Promise<User> {
      const token = localStorage.getItem("access_token");
      if (!token) {
        throw new Error("No access token");
      }

      const response = await fetch("/api/v1/auth/profile/", {
        method: "PATCH",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(profileData),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.detail || `HTTP ${response.status}: ${response.statusText}`,
        );
      }

      return response.json();
    }

    async function changePassword(passwordData: PasswordData): Promise<void> {
      const token = localStorage.getItem("access_token");
      if (!token) {
        throw new Error("No access token");
      }

      const response = await fetch("/api/v1/auth/change-password/", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(passwordData),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.detail || `HTTP ${response.status}: ${response.statusText}`,
        );
      }
    }

    async function resendVerification(email: string): Promise<void> {
      const response = await fetch("/api/v1/auth/resend-verification/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.detail || `HTTP ${response.status}: ${response.statusText}`,
        );
      }
    }

    // Subscribe to auth changes
    authStore.subscribe(() => {
      const newAuthState = authStore.getState();
      if (!newAuthState.isAuthenticated) {
        // User logged out, redirect to login
        window.location.href =
          "/auth/login?redirect=" +
          encodeURIComponent(window.location.pathname);
      }
    });
  });
</script>
