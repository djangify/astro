---
// src/pages/wishlist.astro
import BaseLayout from "../layouts/BaseLayout.astro";
import DashboardNav from "../components/dashboard/DashboardNav.astro";
---

<BaseLayout>
  <title slot="title">My Wishlist - Corrison</title>
  <meta
    slot="head"
    name="description"
    content="View and manage your wishlist items"
  />

  <!-- Dashboard Navigation -->
  <DashboardNav currentPage="wishlist" />

  <!-- Main Content with Sidebar Layout -->
  <div class="lg:ml-64">
    <main class="min-h-screen bg-gray-50 py-12">
      <div class="container mx-auto px-4 max-w-6xl">
        <h1 class="text-3xl font-bold text-gray-900 mb-8">My Wishlist</h1>

        <!-- Loading State -->
        <div id="loading-state" class="text-center py-12">
          <div
            class="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-700 mx-auto mb-4"
          >
          </div>
          <p class="text-gray-600">Loading your wishlist...</p>
        </div>

        <!-- Empty State -->
        <div id="empty-state" class="hidden text-center py-12">
          <svg
            class="mx-auto h-24 w-24 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
            ></path>
          </svg>
          <h3 class="mt-4 text-lg font-medium text-gray-900">
            Your wishlist is empty
          </h3>
          <p class="mt-2 text-gray-600">Start adding products you love!</p>
          <a
            href="/ecommerce/products"
            class="mt-6 inline-block bg-teal-700 text-white px-6 py-3 rounded-lg hover:bg-teal-800 transition-colors"
          >
            Browse Products
          </a>
        </div>

        <!-- Error State -->
        <div id="error-state" class="hidden text-center py-12">
          <svg
            class="mx-auto h-24 w-24 text-red-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <h3 class="mt-4 text-lg font-medium text-gray-900">
            Unable to load wishlist
          </h3>
          <p class="mt-2 text-gray-600" id="error-message">
            Please try again or contact support if the problem persists.
          </p>
          <button
            onclick="location.reload()"
            class="mt-6 inline-block bg-teal-700 text-white px-6 py-3 rounded-lg hover:bg-teal-800 transition-colors"
          >
            Try Again
          </button>
        </div>

        <!-- Wishlist Grid -->
        <div
          id="wishlist-grid"
          class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
        >
          <!-- Items will be inserted here -->
        </div>
      </div>
    </main>
  </div>

  <script is:inline>
    (function () {
      "use strict";

      // API configuration
      var API_BASE = "https://corrison.corrisonapi.com";

      // Get elements
      var loadingState = document.getElementById("loading-state");
      var emptyState = document.getElementById("empty-state");
      var errorState = document.getElementById("error-state");
      var wishlistGrid = document.getElementById("wishlist-grid");

      // Get auth token
      function getAuthToken() {
        try {
          return (
            localStorage.getItem("access_token") ||
            localStorage.getItem("access") ||
            null
          );
        } catch (e) {
          return null;
        }
      }

      // Show notification
      function showNotification(message, isSuccess) {
        var notification = document.createElement("div");
        notification.className =
          "fixed bottom-4 right-4 px-6 py-3 rounded-lg text-white shadow-lg transition-all duration-300 z-50";
        notification.style.backgroundColor = isSuccess ? "#10b981" : "#ef4444";
        notification.textContent = message;
        document.body.appendChild(notification);

        setTimeout(function () {
          notification.style.opacity = "0";
          setTimeout(function () {
            notification.remove();
          }, 300);
        }, 3000);
      }

      // Hide all states
      function hideAllStates() {
        if (loadingState) loadingState.classList.add("hidden");
        if (emptyState) emptyState.classList.add("hidden");
        if (errorState) errorState.classList.add("hidden");
        if (wishlistGrid) wishlistGrid.classList.add("hidden");
      }

      // Show loading state
      function showLoading() {
        hideAllStates();
        if (loadingState) loadingState.classList.remove("hidden");
      }

      // Show empty state
      function showEmpty() {
        hideAllStates();
        if (emptyState) emptyState.classList.remove("hidden");
      }

      // Show error state
      function showError(message) {
        hideAllStates();
        if (errorState) {
          errorState.classList.remove("hidden");
          var errorMessage = document.getElementById("error-message");
          if (errorMessage && message) {
            errorMessage.textContent = message;
          }
        }
      }

      // Show wishlist grid
      function showGrid() {
        hideAllStates();
        if (wishlistGrid) wishlistGrid.classList.remove("hidden");
      }

      // Render wishlist items
      function renderWishlistItems(items) {
        if (!wishlistGrid) return;

        var html = "";

        for (var i = 0; i < items.length; i++) {
          var item = items[i];
          var product = item.product;

          if (!product) continue;

          // Get image URL
          var imageUrl =
            product.featured_image ||
            product.main_image ||
            product.image ||
            "/images/placeholder.png";

          // Format prices
          var price = parseFloat(product.price || 0).toFixed(2);
          var salePrice = product.sale_price
            ? parseFloat(product.sale_price).toFixed(2)
            : null;

          // Build HTML
          html +=
            '<div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-shadow" data-wishlist-id="' +
            item.id +
            '" data-product-id="' +
            product.id +
            '">';

          // Image
          html += '<a href="/ecommerce/' + product.slug + '" class="block">';
          html += '<div class="relative pb-[100%] bg-gray-100">';
          html +=
            '<img src="' +
            imageUrl +
            '" alt="' +
            product.name +
            '" class="absolute inset-0 w-full h-full object-cover">';
          html += "</div>";
          html += "</a>";

          // Content
          html += '<div class="p-6">';

          // Title
          html += '<h3 class="font-semibold text-lg mb-2">';
          html +=
            '<a href="/ecommerce/' +
            product.slug +
            '" class="text-gray-900 hover:text-teal-700 transition-colors">';
          html += product.name;
          html += "</a>";
          html += "</h3>";

          // Price
          if (salePrice) {
            html +=
              '<p class="text-2xl font-bold text-gray-900 mb-1">$' +
              salePrice +
              "</p>";
            html +=
              '<p class="text-sm text-gray-500 line-through">$' +
              price +
              "</p>";
          } else {
            html +=
              '<p class="text-2xl font-bold text-gray-900 mb-4">$' +
              price +
              "</p>";
          }

          // Actions
          html += '<div class="flex gap-3 mt-4">';
          html +=
            '<a href="/ecommerce/' +
            product.slug +
            '" class="flex-1 bg-teal-700 text-white text-center py-2 px-4 rounded-lg hover:bg-teal-800 transition-colors">';
          html += "View Details";
          html += "</a>";
          html +=
            "<button onclick=\"removeFromWishlist('" +
            item.id +
            '\')" class="flex-1 bg-red-50 text-red-600 py-2 px-4 rounded-lg hover:bg-red-100 transition-colors">';
          html += "Remove";
          html += "</button>";
          html += "</div>";

          html += "</div>";
          html += "</div>";
        }

        wishlistGrid.innerHTML = html;
      }

      // Load wishlist
      function loadWishlist() {
        var token = getAuthToken();

        // Just load the wishlist without auth verification
        // We trust that users are logged in since they accessed from dropdown
        showLoading();

        fetch(API_BASE + "/api/v1/wishlist/", {
          method: "GET",
          headers: {
            Authorization: "Bearer " + token,
            "Content-Type": "application/json",
          },
        })
          .then(function (response) {
            if (!response.ok) {
              throw new Error("Failed to load wishlist");
            }
            return response.json();
          })
          .then(function (data) {
            var items = data.results || data || [];
            console.log("Wishlist items loaded:", items.length);

            if (items.length === 0) {
              showEmpty();
            } else {
              showGrid();
              renderWishlistItems(items);
            }
          })
          .catch(function (error) {
            console.error("Error loading wishlist:", error);
            showError("Failed to load wishlist. Please try again.");
          });
      }

      // Remove from wishlist (global function)
      window.removeFromWishlist = function (itemId) {
        var token = getAuthToken();

        fetch(API_BASE + "/api/v1/wishlist/" + itemId + "/", {
          method: "DELETE",
          headers: {
            Authorization: "Bearer " + token,
          },
        })
          .then(function (response) {
            if (response.ok || response.status === 204) {
              // Remove from DOM
              var itemElement = document.querySelector(
                '[data-wishlist-id="' + itemId + '"]',
              );
              if (itemElement) {
                var productId = itemElement.getAttribute("data-product-id");
                itemElement.remove();

                // Dispatch event
                window.dispatchEvent(
                  new CustomEvent("wishlistUpdated", {
                    detail: {
                      action: "removed",
                      productId: parseInt(productId),
                    },
                  }),
                );
              }

              // Check if empty
              var remainingItems =
                wishlistGrid.querySelectorAll("[data-wishlist-id]");
              if (remainingItems.length === 0) {
                showEmpty();
              }

              showNotification("Item removed from wishlist", true);
            } else {
              throw new Error("Failed to remove item");
            }
          })
          .catch(function (error) {
            console.error("Error removing item:", error);
            showNotification("Failed to remove item", false);
          });
      };

      // Listen for wishlist updates
      window.addEventListener("wishlistUpdated", function (e) {
        if (e.detail && e.detail.action === "added") {
          loadWishlist();
        }
      });

      // Initialize - Just load the wishlist directly
      function init() {
        loadWishlist();
      }

      // Start when DOM is ready
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", init);
      } else {
        init();
      }
    })();
  </script>
</BaseLayout>
