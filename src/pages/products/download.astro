---
// src/pages/download.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";

// SEO meta information
const metaTitle = "Download – Corrison";
const metaDescription = "Download your digital product.";

// Get environment variables
const apiUrl =
  import.meta.env.PUBLIC_API_BASE_URL ||
  "https://corrison.corrisonapi.com/api/v1";
---

<BaseLayout>
  <Header slot="header" />
  <title slot="title">{metaTitle}</title>
  <meta slot="head" name="description" content={metaDescription} />
  <meta slot="head" property="og:title" content={metaTitle} />
  <meta slot="head" property="og:description" content={metaDescription} />
  <meta slot="head" property="og:type" content="website" />

  <div class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-16">
      <div class="max-w-2xl mx-auto">
        <!-- Loading State -->
        <div id="loading-state" class="text-center">
          <div
            class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"
          >
          </div>
          <p class="text-gray-600">Processing download request...</p>
        </div>

        <!-- Success State -->
        <div id="success-state" class="hidden">
          <div
            class="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center"
          >
            <div
              class="w-20 h-20 mx-auto bg-green-100 rounded-full flex items-center justify-center mb-6"
            >
              <svg
                class="w-10 h-10 text-green-500"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>

            <h1 class="text-3xl font-bold text-gray-900 mb-4">
              Download Ready
            </h1>
            <p class="text-lg text-gray-600 mb-8">
              Your download should start automatically. If it doesn't, click the
              button below.
            </p>

            <button
              id="manual-download-btn"
              class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
            >
              <svg
                class="w-5 h-5 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                ></path>
              </svg>
              Download Now
            </button>

            <div class="mt-8 space-y-2 text-sm text-gray-600">
              <p>
                Downloads remaining: <span
                  id="downloads-remaining"
                  class="font-medium">--</span
                >
              </p>
              <p>
                Expires: <span id="download-expires" class="font-medium"
                  >--</span
                >
              </p>
            </div>

            <div class="mt-8 pt-8 border-t border-gray-200">
              <a
                href="/downloads"
                class="text-blue-600 hover:text-blue-700 font-medium"
              >
                View All Downloads →
              </a>
            </div>
          </div>
        </div>

        <!-- Error State -->
        <div id="error-state" class="hidden">
          <div
            class="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center"
          >
            <div
              class="w-20 h-20 mx-auto bg-red-100 rounded-full flex items-center justify-center mb-6"
            >
              <svg
                class="w-10 h-10 text-red-500"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>

            <h1 class="text-2xl font-bold text-gray-900 mb-4">
              Download Error
            </h1>
            <p id="error-message" class="text-gray-600 mb-8">
              Unable to process download request.
            </p>

            <div class="space-y-4">
              <a
                href="/downloads"
                class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
              >
                View All Downloads
              </a>

              <p class="text-sm text-gray-600">
                Need help? <a
                  href="/contact"
                  class="text-blue-600 hover:text-blue-700">Contact support</a
                >
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <Footer slot="footer" />

  <!-- Pass API URL via data attribute -->
  <script type="application/json" id="download-config" data-api-url={apiUrl}
  ></script>

  <script is:inline>
    (function () {
      // Get API URL from config
      var configEl = document.getElementById("download-config");
      var API_BASE = configEl
        ? configEl.getAttribute("data-api-url")
        : "https://corrison.corrisonapi.com/api/v1";

      var downloadUrl = null;

      function showLoading() {
        document.getElementById("loading-state").classList.remove("hidden");
        document.getElementById("success-state").classList.add("hidden");
        document.getElementById("error-state").classList.add("hidden");
      }

      function showSuccess() {
        document.getElementById("loading-state").classList.add("hidden");
        document.getElementById("success-state").classList.remove("hidden");
        document.getElementById("error-state").classList.add("hidden");
      }

      function showError(message) {
        document.getElementById("loading-state").classList.add("hidden");
        document.getElementById("success-state").classList.add("hidden");
        document.getElementById("error-state").classList.remove("hidden");

        var errorMsg = document.getElementById("error-message");
        if (errorMsg && message) {
          errorMsg.textContent = message;
        }
      }

      function getDownloadToken() {
        // Get download token from URL
        var urlParams = new URLSearchParams(window.location.search);
        return urlParams.get("token");
      }

      function processDownload() {
        var token = getDownloadToken();

        if (!token) {
          showError("Invalid download link");
          return;
        }

        var authToken = localStorage.getItem("access_token");
        if (!authToken) {
          // Redirect to login with return URL
          window.location.href =
            "/login?return=" + encodeURIComponent(window.location.href);
          return;
        }

        showLoading();

        // Call the download endpoint
        fetch(API_BASE + "/downloads/" + token + "/", {
          method: "GET",
          headers: {
            Authorization: "Bearer " + authToken,
          },
        })
          .then(function (response) {
            if (response.ok) {
              // Get download info from headers
              var remainingDownloads = response.headers.get(
                "X-Downloads-Remaining",
              );
              var expiresAt = response.headers.get("X-Download-Expires");

              // Update display
              if (remainingDownloads) {
                document.getElementById("downloads-remaining").textContent =
                  remainingDownloads === "-1"
                    ? "Unlimited"
                    : remainingDownloads;
              }
              if (expiresAt) {
                document.getElementById("download-expires").textContent =
                  new Date(expiresAt).toLocaleDateString();
              }

              // Create blob and download
              return response.blob().then(function (blob) {
                // Get filename from Content-Disposition header
                var contentDisposition = response.headers.get(
                  "Content-Disposition",
                );
                var filename = "download";

                if (contentDisposition) {
                  var filenameMatch =
                    contentDisposition.match(/filename="?(.+)"?/);
                  if (filenameMatch) {
                    filename = filenameMatch[1];
                  }
                }

                // Create download link
                downloadUrl = window.URL.createObjectURL(blob);
                var a = document.createElement("a");
                a.style.display = "none";
                a.href = downloadUrl;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);

                showSuccess();
              });
            } else if (response.status === 401) {
              throw new Error("Please log in to download this file");
            } else if (response.status === 404) {
              throw new Error("Download link not found or expired");
            } else if (response.status === 429) {
              throw new Error("Download limit exceeded");
            } else {
              throw new Error("Download failed. Please try again.");
            }
          })
          .catch(function (error) {
            console.error("Download error:", error);
            showError(error.message || "Failed to process download");
          });
      }

      // Manual download button
      document
        .getElementById("manual-download-btn")
        .addEventListener("click", function () {
          if (downloadUrl) {
            var a = document.createElement("a");
            a.href = downloadUrl;
            a.download = "download";
            a.click();
          } else {
            processDownload();
          }
        });

      // Process download on page load
      document.addEventListener("DOMContentLoaded", function () {
        processDownload();
      });

      // Clean up blob URL when leaving page
      window.addEventListener("beforeunload", function () {
        if (downloadUrl) {
          window.URL.revokeObjectURL(downloadUrl);
        }
      });
    })();
  </script>
</BaseLayout>
