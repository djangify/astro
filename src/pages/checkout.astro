---
// src/pages/checkout.astro
import BaseLayout from "../layouts/BaseLayout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

// SEO meta information
const metaTitle = "Checkout – Corrison";
const metaDescription =
  "Complete your purchase securely with our streamlined checkout process for digital products.";

// Get environment variables
const apiUrl = import.meta.env.PUBLIC_API_BASE_URL || "";
const stripeKey = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY || "";
---

<BaseLayout>
  <Header slot="header" />
  <title slot="title">{metaTitle}</title>
  <meta slot="head" name="description" content={metaDescription} />
  <meta slot="head" property="og:title" content={metaTitle} />
  <meta slot="head" property="og:description" content={metaDescription} />
  <meta slot="head" property="og:type" content="website" />

  <!-- Stripe JavaScript -->
  <script is:inline src="https://js.stripe.com/v3/"></script>

  <div class="min-h-screen bg-gray-50">
    <!-- Page Header -->
    <section class="bg-white border-b border-gray-200">
      <div class="container mx-auto px-4 py-6">
        <h1 class="text-2xl lg:text-3xl font-bold text-gray-900">Checkout</h1>
        <div class="mt-2 flex items-center space-x-2 text-sm text-gray-600">
          <a href="/cart" class="hover:text-blue-600">Cart</a>
          <span>→</span>
          <span class="text-gray-900 font-medium">Checkout</span>
        </div>
      </div>
    </section>

    <div class="container mx-auto px-4 py-8">
      <div class="max-w-6xl mx-auto">
        <!-- Loading State -->
        <div id="checkout-loading" class="text-center py-16">
          <div
            class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"
          >
          </div>
          <p class="text-gray-600">Loading checkout...</p>
        </div>

        <!-- Empty Cart Redirect -->
        <div id="empty-cart-redirect" class="hidden text-center py-16">
          <div
            class="w-20 h-20 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-6"
          >
            <svg
              class="w-10 h-10 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 7m0 0l-1.5-5M7 13l-2-8m0 0h16m-7 4v8a2 2 0 01-2 2H9a2 2 0 01-2-2v-8a2 2 0 012-2h2a2 2 0 012 2z"
              ></path>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">
            Your cart is empty
          </h2>
          <p class="text-gray-600 mb-8">
            Add some items to your cart before checking out.
          </p>
          <a
            href="/ecommerce/products"
            class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
          >
            Browse Products
          </a>
        </div>

        <!-- Error State -->
        <div id="checkout-error" class="hidden text-center py-16">
          <div
            class="w-20 h-20 mx-auto bg-red-100 rounded-full flex items-center justify-center mb-6"
          >
            <svg
              class="w-10 h-10 text-red-500"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">
            Something went wrong
          </h2>
          <p id="error-message" class="text-gray-600 mb-8">
            Unable to load checkout. Please try again.
          </p>
          <button
            onclick="window.location.reload()"
            class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
          >
            Try Again
          </button>
        </div>

        <!-- Checkout Content -->
        <div id="checkout-content" class="hidden">
          <!-- Messages/Alerts -->
          <div id="checkout-messages" class="mb-6"></div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Left Column: Form -->
            <div>
              <form id="checkout-form">
                <!-- Customer Information with Account Creation -->
                <div
                  class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6"
                >
                  <h2 class="text-lg font-semibold text-gray-900 mb-4">
                    Customer Information
                  </h2>

                  <!-- Account Notice -->
                  <div
                    class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4"
                  >
                    <p class="text-sm text-blue-800">
                      <strong>Note:</strong> An account will be created for you to
                      access your digital downloads. You must verify your email after
                      purchase. Check your spam folder if you don't receive an email
                      within minutes.
                    </p>
                  </div>

                  <div class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                      <div>
                        <label
                          for="first-name"
                          class="block text-sm font-medium text-gray-700 mb-1"
                        >
                          First Name <span class="text-red-500">*</span>
                        </label>
                        <input
                          type="text"
                          id="first-name"
                          name="first_name"
                          required
                          class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                      <div>
                        <label
                          for="last-name"
                          class="block text-sm font-medium text-gray-700 mb-1"
                        >
                          Last Name
                        </label>
                        <input
                          type="text"
                          id="last-name"
                          name="last_name"
                          class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                    </div>

                    <div>
                      <label
                        for="email"
                        class="block text-sm font-medium text-gray-700 mb-1"
                      >
                        Email Address <span class="text-red-500">*</span>
                      </label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        required
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="your@email.com"
                      />
                      <p class="mt-1 text-sm text-gray-500">
                        We'll send your digital products and verification email
                        here
                      </p>
                    </div>

                    <!-- Password field - shown for new users -->
                    <div id="password-section" class="hidden">
                      <label
                        for="password"
                        class="block text-sm font-medium text-gray-700 mb-1"
                      >
                        Create Password <span class="text-red-500">*</span>
                      </label>
                      <input
                        type="password"
                        id="password"
                        name="password"
                        minlength="8"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                      <p class="mt-1 text-sm text-gray-500">
                        Minimum 8 characters
                      </p>
                    </div>

                    <!-- Login prompt - shown for existing users -->
                    <div
                      id="login-prompt"
                      class="hidden bg-yellow-50 border border-yellow-200 rounded-lg p-4"
                    >
                      <p class="text-sm text-yellow-800">
                        An account already exists with this email.
                        <a
                          href="/auth/login/?redirect=/checkout"
                          class="font-medium underline hover:text-yellow-900"
                        >
                          Please log in to complete your purchase
                        </a>
                      </p>
                    </div>
                  </div>
                </div>

                <!-- Payment Method -->
                <div
                  class="bg-white rounded-lg shadow-sm border border-gray-200 p-6"
                >
                  <h2 class="text-lg font-semibold text-gray-900 mb-4">
                    Payment Method
                  </h2>

                  <!-- Stripe Elements will be mounted here -->
                  <div
                    id="card-element"
                    class="border border-gray-300 rounded-lg p-3 bg-white"
                  >
                    <!-- Stripe Elements will create form elements here -->
                  </div>

                  <!-- Stripe errors will be displayed here -->
                  <div
                    id="card-errors"
                    role="alert"
                    class="mt-2 text-sm text-red-600"
                  >
                  </div>

                  <!-- Payment Security Notice -->
                  <div class="mt-4 flex items-center text-sm text-gray-600">
                    <svg
                      class="w-5 h-5 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                      ></path>
                    </svg>
                    Your payment information is secure and encrypted
                  </div>
                </div>

                <!-- Order Notes (Optional) -->
                <div
                  class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mt-6"
                >
                  <h2 class="text-lg font-semibold text-gray-900 mb-4">
                    Order Notes (Optional)
                  </h2>
                  <textarea
                    id="notes"
                    name="notes"
                    rows="3"
                    class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Any special instructions or notes about your order..."
                  ></textarea>
                </div>
              </form>
            </div>

            <!-- Right Column: Order Summary -->
            <div>
              <div
                class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 sticky top-24"
              >
                <h2 class="text-lg font-semibold text-gray-900 mb-4">
                  Order Summary
                </h2>

                <!-- Order Items -->
                <div id="order-items" class="space-y-3 mb-4">
                  <!-- Items will be dynamically inserted here -->
                </div>

                <!-- Order Totals -->
                <div class="border-t border-gray-200 pt-4 space-y-2 text-sm">
                  <div class="flex justify-between">
                    <span>Subtotal</span>
                    <span id="order-subtotal">$0.00</span>
                  </div>
                  <div class="flex justify-between font-semibold text-base">
                    <span>Total</span>
                    <span id="order-total">$0.00</span>
                  </div>
                </div>

                <!-- Submit Button -->
                <button
                  id="submit-payment"
                  type="submit"
                  form="checkout-form"
                  class="w-full mt-6 bg-blue-600 text-white font-medium py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center"
                >
                  <span id="button-text">Complete Order</span>
                  <span
                    id="button-spinner"
                    class="hidden ml-2 animate-spin rounded-full h-4 w-4 border-b-2 border-white"
                  ></span>
                </button>

                <!-- Digital Product Notice -->
                <div class="mt-4 text-sm text-gray-600 text-center">
                  <p>
                    Digital products will be available after email verification
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <Footer slot="footer" />

  <!-- Pass environment variables via data attributes -->
  <script
    type="application/json"
    id="checkout-config"
    data-api-url={apiUrl}
    data-stripe-key={stripeKey}>
  </script>

<script is:inline>
(function () {
  // Get environment variables from the config element
  var configEl = document.getElementById("checkout-config");
  var API_BASE = configEl
    ? configEl.getAttribute("data-api-url")
    : "";
  var STRIPE_KEY = configEl ? configEl.getAttribute("data-stripe-key") : "";
  
  // Check if API_BASE is configured
  if (!API_BASE) {
    showError("System configuration error. Please contact support.");
    return;
  }
  
  var stripe = null;
  var elements = null;
  var card = null;
  var emailChecked = false;
  var userExists = false;

  console.log("API_BASE:", API_BASE);
  console.log("STRIPE_KEY configured:", !!STRIPE_KEY);

  function makeHeaders(includeAuth = false) {
    var headers = {};
    headers["Content-Type"] = "application/json";
    
    // NEVER use JWT tokens - cart operations use session cookies
    // Only include auth for specific endpoints that require JWT (like profile)
    if (includeAuth) {
      var jwtToken = localStorage.getItem("access_token");
      if (jwtToken) {
        headers["Authorization"] = "Bearer " + jwtToken;
      }
    }
    
    // Cart operations should NEVER have Authorization header
    // They rely on session cookies via credentials: "include"
    return headers;
  }

  function showLoading() {
    document.getElementById("checkout-loading").classList.remove("hidden");
    document.getElementById("empty-cart-redirect").classList.add("hidden");
    document.getElementById("checkout-error").classList.add("hidden");
    document.getElementById("checkout-content").classList.add("hidden");
  }

  function showEmpty() {
    document.getElementById("checkout-loading").classList.add("hidden");
    document.getElementById("empty-cart-redirect").classList.remove("hidden");
    document.getElementById("checkout-error").classList.add("hidden");
    document.getElementById("checkout-content").classList.add("hidden");
  }

  function showError(message) {
    document.getElementById("checkout-loading").classList.add("hidden");
    document.getElementById("empty-cart-redirect").classList.add("hidden");
    document.getElementById("checkout-error").classList.remove("hidden");
    document.getElementById("checkout-content").classList.add("hidden");
    var errorMsg = document.getElementById("error-message");
    if (errorMsg && message) {
      errorMsg.textContent = message;
    }
  }

  function showContent() {
    document.getElementById("checkout-loading").classList.add("hidden");
    document.getElementById("empty-cart-redirect").classList.add("hidden");
    document.getElementById("checkout-error").classList.add("hidden");
    document.getElementById("checkout-content").classList.remove("hidden");
  }

  function showMsg(message, isSuccess) {
    var messagesDiv = document.getElementById("checkout-messages");
    if (!messagesDiv) return;

    var alertClass = isSuccess
      ? "bg-green-50 border-green-200 text-green-800"
      : "bg-red-50 border-red-200 text-red-800";

    var html = '<div class="rounded-lg border p-4 ' + alertClass + '">';
    html += "<p>" + message + "</p>";
    html += "</div>";
    messagesDiv.innerHTML = html;

    if (isSuccess) {
      setTimeout(function () {
        messagesDiv.innerHTML = "";
      }, 5000);
    }
  }

  function updateOrderSummary(cart) {
    var subtotal = document.getElementById("order-subtotal");
    var total = document.getElementById("order-total");

    if (subtotal) subtotal.textContent = "$" + cart.subtotal.toFixed(2);
    if (total) total.textContent = "$" + cart.total.toFixed(2);
  }

  function renderOrderItems(cart) {
    var itemsContainer = document.getElementById("order-items");
    if (!itemsContainer) return;

    console.log("Rendering order items for cart:", cart);

    if (!cart.items || !Array.isArray(cart.items)) {
      console.error("Cart items not found or not an array:", cart);
      itemsContainer.innerHTML =
        '<p class="text-gray-500">No items in cart</p>';
      return;
    }

    if (cart.items.length === 0) {
      itemsContainer.innerHTML =
        '<p class="text-gray-500">No items in cart</p>';
      return;
    }

    var html = "";
    for (var i = 0; i < cart.items.length; i++) {
      var item = cart.items[i];
      console.log("Rendering item:", item);

      var price = item.subtotal || item.total_price || 0;
      var name = item.product_name || item.course_name || item.name || "Item";
      var quantity = item.quantity || 1;

      html += '<div class="flex justify-between items-start">';
      html += '<div class="flex-1">';
      html += '<h4 class="font-medium text-gray-900">' + name + "</h4>";
      html += '<p class="text-sm text-gray-500">Qty: ' + quantity + "</p>";
      html += "</div>";
      html += '<span class="text-gray-900">$' + price.toFixed(2) + "</span>";
      html += "</div>";
    }

    itemsContainer.innerHTML = html;
  }

  function initStripe() {
    if (typeof Stripe === "undefined") {
      console.error("Stripe not loaded");
      showError("Payment system not available");
      return false;
    }

    if (!STRIPE_KEY) {
      console.error("Stripe publishable key not configured");
      showError("Payment system not configured");
      return false;
    }

    stripe = Stripe(STRIPE_KEY);
    elements = stripe.elements();

    var cardStyle = {};
    cardStyle.base = {};
    cardStyle.base.fontSize = "16px";
    cardStyle.base.color = "#424770";
    cardStyle.base["::placeholder"] = {};
    cardStyle.base["::placeholder"].color = "#aab7c4";
    cardStyle.invalid = {};
    cardStyle.invalid.color = "#9e2146";

    var cardOptions = {};
    cardOptions.style = cardStyle;

    card = elements.create("card", {
      style: cardStyle,
      hidePostalCode: false  // This enables postal code field with international support
    });

    var cardElement = document.getElementById("card-element");
    if (cardElement) {
      card.mount("#card-element");

      card.on("change", function (event) {
        var displayError = document.getElementById("card-errors");
        if (event.error) {
          displayError.textContent = event.error.message;
        } else {
          displayError.textContent = "";
        }
      });
    }

    return true;
  }

  function checkUserAuthentication() {
    // Check if user is logged in by looking for JWT token
    var jwtToken = localStorage.getItem("access_token");
    
    if (!jwtToken) {
      console.log("No JWT token found, user not authenticated");
      return;
    }
    
    // Use JWT token ONLY for the profile endpoint
    var headers = {
      "Content-Type": "application/json",
      "Authorization": "Bearer " + jwtToken
    };
    
    fetch(API_BASE + "/api/v1/auth/profile/", {
      method: "GET",
      headers: headers,
      credentials: "include"
    })
      .then(function(r) {
        if (r.ok) return r.json();
        throw new Error("Not authenticated");
      })
      .then(function(userData) {
        // User is logged in - pre-populate form
        console.log("User is authenticated:", userData);
        
        // Pre-populate form fields
        var firstNameInput = document.getElementById("first-name");
        var lastNameInput = document.getElementById("last-name");
        var emailInput = document.getElementById("email");
        
        if (firstNameInput && userData.first_name) {
          firstNameInput.value = userData.first_name;
        }
        if (lastNameInput && userData.last_name) {
          lastNameInput.value = userData.last_name;
        }
        if (emailInput && userData.email) {
          emailInput.value = userData.email;
          emailInput.readOnly = true; // Make email read-only for logged-in users
          
          // Mark email as already checked and user exists
          emailChecked = true;
          userExists = true;
          emailInput.dataset.checkedEmail = userData.email;
          
          // Hide both password section and login prompt for authenticated users
          var passwordSection = document.getElementById("password-section");
          var loginPrompt = document.getElementById("login-prompt");
          var passwordInput = document.getElementById("password");
          
          if (passwordSection) passwordSection.classList.add("hidden");
          if (loginPrompt) loginPrompt.classList.add("hidden");
          if (passwordInput) passwordInput.removeAttribute("required");
          
          // Update the account notice to show user is logged in
          var accountNotice = document.querySelector('.bg-blue-50.border-blue-200');
          if (accountNotice) {
            accountNotice.innerHTML = '<p class="text-sm text-blue-800"><strong>Welcome back!</strong> You are logged in as <strong>' + userData.email + '</strong>. Your digital downloads will be available in your account after purchase.</p>';
          }
        }
      })
      .catch(function(error) {
        // User not logged in or token expired - continue with normal flow
        console.log("User not authenticated:", error.message);
        // Remove expired token if auth fails
        if (error.message.includes("401") || error.message.includes("403")) {
          localStorage.removeItem("access_token");
          localStorage.removeItem("refresh_token");
        }
      });
  }

  function checkEmail(email) {
    // Get current auth state
    var jwtToken = localStorage.getItem("access_token");
    
    // Skip email check if user is authenticated
    if (jwtToken && emailChecked && userExists) {
      console.log("User is authenticated, skipping email check");
      return;
    }
    
    // Don't include Authorization header for check-email endpoint
    var headers = {
      "Content-Type": "application/json"
    };

    fetch(API_BASE + "/api/v1/check-email/", {
      method: "POST",
      headers: headers,
      body: JSON.stringify({ email: email }),
      credentials: "include"
    })
      .then(function (r) {
        if (r.ok) return r.json();
        throw new Error("Failed to check email");
      })
      .then(function (data) {
        emailChecked = true;
        userExists = data.exists;

        var passwordSection = document.getElementById("password-section");
        var loginPrompt = document.getElementById("login-prompt");
        var passwordInput = document.getElementById("password");

        if (userExists) {
          // Show login prompt
          passwordSection.classList.add("hidden");
          loginPrompt.classList.remove("hidden");
          passwordInput.removeAttribute("required");
        } else {
          // Show password field for new user
          passwordSection.classList.remove("hidden");
          loginPrompt.classList.add("hidden");
          passwordInput.setAttribute("required", "required");
        }
      })
      .catch(function (error) {
        console.error("Error checking email:", error);
        // Continue without email check
      });
  }

  function loadCart() {
    console.log("Loading cart for checkout...");
    showLoading();

    // NEVER use auth headers for cart operations
    // Cart uses session cookies only
    var headers = {
      "Content-Type": "application/json"
    };

    fetch(API_BASE + "/api/v1/cart/", { 
      headers: headers,
      credentials: "include" // This ensures session cookies are sent
    })
      .then(function (r) {
        console.log("Cart API response status:", r.status);
        if (r.ok) return r.json();
        throw new Error("Failed to load cart");
      })
      .then(function (cart) {
        console.log("Cart data loaded:", cart);
        console.log("Cart total items:", cart.total_items);
        console.log("Cart items array:", cart.items);

        if (!cart || cart.total_items === 0) {
          showEmpty();
        } else {
          showContent();
          updateOrderSummary(cart);
          renderOrderItems(cart);

          if (!initStripe()) {
            showError("Payment system not available");
          }
        }
      })
      .catch(function (error) {
        console.error("Error loading cart:", error);
        showError("Failed to load cart data");
      });
  }

  function setLoadingState(loading) {
    var submitButton = document.getElementById("submit-payment");
    var buttonText = document.getElementById("button-text");
    var buttonSpinner = document.getElementById("button-spinner");

    if (submitButton) {
      submitButton.disabled = loading;
    }

    if (buttonText) {
      buttonText.textContent = loading ? "Processing..." : "Complete Order";
    }

    if (buttonSpinner) {
      if (loading) {
        buttonSpinner.classList.remove("hidden");
      } else {
        buttonSpinner.classList.add("hidden");
      }
    }
  }

  function handleFormSubmit(event) {
    event.preventDefault();

    if (!stripe || !card) {
      showMsg("Payment system not ready", false);
      return;
    }

    // Check if user is authenticated
    var jwtToken = localStorage.getItem("access_token");
    var isAuthenticated = !!jwtToken;

    // Check if user exists and needs to log in (only for non-authenticated users)
    if (!isAuthenticated && userExists && emailChecked) {
      showMsg("Please log in to complete your purchase", false);
      return;
    }

    setLoadingState(true);

    var form = document.getElementById("checkout-form");
    var formData = new FormData(form);
    var customerData = {};
    customerData.email = formData.get("email").trim().toLowerCase();
    customerData.first_name = formData.get("first_name").trim();
    customerData.last_name = formData.get("last_name").trim();
    customerData.password = formData.get("password");
    customerData.notes = formData.get("notes");

    // Validate required fields
    if (!customerData.email || !customerData.first_name) {
      showMsg("Please fill in all required fields", false);
      setLoadingState(false);
      return;
    }

    // Validate password for new users (only if not logged in and not existing user)
    if (
      !isAuthenticated &&
      !userExists &&
      (!customerData.password || customerData.password.length < 8)
    ) {
      showMsg("Password must be at least 8 characters", false);
      setLoadingState(false);
      return;
    }

    console.log("Processing payment with customer data:", {
      email: customerData.email,
      first_name: customerData.first_name,
      has_password: !!customerData.password,
      is_authenticated: isAuthenticated
    });

    // For payment intent creation, use session cookies only
    var headers = {
      "Content-Type": "application/json"
    };
    fetch(API_BASE + "/api/v1/create-payment-intent/", {
      method: "POST",
      headers: headers,
      credentials: "include",
      body: JSON.stringify({
          email: customerData.email,
          first_name: customerData.first_name,
          last_name: customerData.last_name,
          password: customerData.password || null,  // Only if creating account
          notes: customerData.notes || ""
          // DO NOT include: token, is_authenticated, or any other fields
      })
  })
      .then(function (r) {
        if (r.ok) return r.json();
        return r.json().then(function (data) {
          throw new Error(data.error || "Failed to create payment intent");
        });
      })
      .then(function (data) {
        console.log("Payment intent created:", data);

        var billingDetails = {};
        billingDetails.name = (
          customerData.first_name +
          " " +
          customerData.last_name
        ).trim();
        billingDetails.email = customerData.email;

        var paymentMethodData = {};
        paymentMethodData.card = card;
        paymentMethodData.billing_details = billingDetails;

        var confirmOptions = {};
        confirmOptions.payment_method = paymentMethodData;

        return stripe.confirmCardPayment(data.client_secret, confirmOptions);
      })
      .then(function (result) {
        if (result.error) {
          console.error("Payment failed:", result.error);
          showMsg(result.error.message, false);
          setLoadingState(false);
        } else {
          console.log("Payment succeeded:", result.paymentIntent);

          // Create the order
          var orderData = {
            payment_intent_id: result.paymentIntent.id,
            notes: customerData.notes,
          };

          // For order creation, use session cookies only
          var orderHeaders = {
            "Content-Type": "application/json"
          };

          return fetch(API_BASE + "/api/v1/create-order/", {
            method: "POST",
            headers: orderHeaders,
            credentials: "include",
            body: JSON.stringify(orderData),
          })
            .then(function (r) {
              if (r.ok) return r.json();
              return r.json().then(function (data) {
                throw new Error(data.error || "Failed to create order");
              });
            })
            .then(function (orderResponse) {
              console.log("Order created:", orderResponse);

              showMsg("Payment successful! Redirecting...", true);

              // Clear cart-related items from localStorage
              localStorage.removeItem("cart_token");
              window.dispatchEvent(new CustomEvent("cartUpdated"));

              // Redirect to success page
              setTimeout(function () {
                var redirectUrl =
                  "/order-success?payment_intent=" + result.paymentIntent.id;
                if (orderResponse.verification_required) {
                  redirectUrl += "&verify=1";
                }
                window.location.href = redirectUrl;
              }, 1500);
            });
        }
      })
      .catch(function (error) {
        console.error("Checkout error:", error);
        showMsg(error.message || "Payment failed. Please try again.", false);
        setLoadingState(false);
      });
  }

  document.addEventListener("DOMContentLoaded", function () {
    // Remove any cart tokens on page load to ensure clean session-based cart
    console.log("Checkout page loaded");
    console.log("Session-based cart system active");
    
    loadCart();
    checkUserAuthentication(); // Check if user is logged in

    var form = document.getElementById("checkout-form");
    if (form) {
      form.addEventListener("submit", handleFormSubmit);
    }

    // Add email blur event to check if user exists
    var emailInput = document.getElementById("email");
    if (emailInput) {
      emailInput.addEventListener("blur", function () {
        var email = emailInput.value.trim().toLowerCase();
        if (email && email.includes("@") && !emailChecked) {
          checkEmail(email);
        }
      });

      // Reset email check if email changes
      emailInput.addEventListener("input", function () {
        var email = emailInput.value.trim().toLowerCase();
        var currentCheckedEmail = emailChecked
          ? emailInput.dataset.checkedEmail
          : null;
        if (email !== currentCheckedEmail) {
          emailChecked = false;
          userExists = false;
          emailInput.dataset.checkedEmail = email;

          // Hide both password and login prompt until checked again
          document.getElementById("password-section").classList.add("hidden");
          document.getElementById("login-prompt").classList.add("hidden");
          document.getElementById("password").removeAttribute("required");
        }
      });
    }
  });

  window.addEventListener("cartUpdated", function () {
    console.log("Cart updated event received in checkout");
    // Reload cart when cart is updated
    loadCart();
  });
})();
</script>

</BaseLayout>
