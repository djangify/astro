---
// src/pages/order-confirmation/[orderNumber].astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";

export async function getStaticPaths() {
  // For order confirmation pages, we'll handle this dynamically
  // Return empty array to enable SSR for this dynamic route
  return [];
}

const { orderNumber } = Astro.params;

// SEO meta information
const metaTitle = `Order Confirmation – Corrison`;
const metaDescription =
  "Your order has been confirmed. Download your digital products and view order details.";
---

<BaseLayout>
  <Header slot="header" />
  <title slot="title">{metaTitle}</title>
  <meta slot="head" name="description" content={metaDescription} />
  <meta slot="head" property="og:title" content={metaTitle} />
  <meta slot="head" property="og:description" content={metaDescription} />
  <meta slot="head" property="og:type" content="website" />

  <div class="min-h-screen bg-gray-50">
    <!-- Loading State -->
    <div id="confirmation-loading" class="container mx-auto px-4 py-16">
      <div class="max-w-2xl mx-auto text-center">
        <div
          class="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"
        >
        </div>
        <h1 class="text-2xl font-bold text-gray-900 mb-2">
          Loading Your Order
        </h1>
        <p class="text-gray-600">
          Please wait while we retrieve your order details...
        </p>
      </div>
    </div>

    <!-- Success State -->
    <div id="confirmation-success" class="hidden container mx-auto px-4 py-16">
      <div class="max-w-4xl mx-auto">
        <!-- Success Header -->
        <div class="text-center mb-12">
          <div
            class="w-20 h-20 mx-auto bg-green-100 rounded-full flex items-center justify-center mb-6"
          >
            <svg
              class="w-10 h-10 text-green-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
          <h1 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
            Order Confirmed!
          </h1>
          <p class="text-xl text-gray-600 mb-2">Thank you for your purchase</p>
          <p class="text-lg text-gray-500">
            Order #<span id="order-number-display" class="font-mono"
              >{orderNumber}</span
            >
          </p>
        </div>

        <!-- Order Details -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Order Items -->
          <div class="lg:col-span-2">
            <div
              class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden"
            >
              <div class="px-6 py-4 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">Order Items</h2>
              </div>

              <div id="order-items-list" class="divide-y divide-gray-200">
                <!-- Items will be populated by JavaScript -->
              </div>
            </div>

            <!-- Digital Downloads Section -->
            <div id="downloads-section" class="hidden mt-8">
              <div
                class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden"
              >
                <div class="px-6 py-4 border-b border-gray-200 bg-purple-50">
                  <div class="flex items-center">
                    <svg
                      class="w-6 h-6 text-purple-600 mr-3"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"
                      ></path>
                    </svg>
                    <h2 class="text-lg font-semibold text-purple-900">
                      Download Your Files
                    </h2>
                  </div>
                  <p class="text-sm text-purple-700 mt-1">
                    Your digital products are ready for download
                  </p>
                </div>

                <div id="download-items-list" class="p-6">
                  <!-- Download items will be populated by JavaScript -->
                </div>
              </div>
            </div>
          </div>

          <!-- Order Summary -->
          <div>
            <div
              class="bg-white rounded-lg shadow-sm border border-gray-200 p-6"
            >
              <h3 class="text-lg font-semibold text-gray-900 mb-4">
                Order Summary
              </h3>

              <div class="space-y-3 mb-6">
                <div class="flex justify-between text-gray-600">
                  <span>Subtotal</span>
                  <span id="summary-subtotal">$0.00</span>
                </div>

                <div class="flex justify-between text-gray-600">
                  <span>Shipping</span>
                  <span class="text-green-600">Free (Digital)</span>
                </div>

                <div class="flex justify-between text-gray-600">
                  <span>Tax</span>
                  <span id="summary-tax">$0.00</span>
                </div>

                <div class="border-t border-gray-200 pt-3">
                  <div
                    class="flex justify-between text-lg font-semibold text-gray-900"
                  >
                    <span>Total</span>
                    <span id="summary-total">$0.00</span>
                  </div>
                </div>
              </div>

              <!-- Order Info -->
              <div class="space-y-3 text-sm border-t border-gray-200 pt-6">
                <div>
                  <span class="text-gray-600">Order Date:</span>
                  <span id="order-date" class="text-gray-900 font-medium ml-2"
                  ></span>
                </div>
                <div>
                  <span class="text-gray-600">Payment Status:</span>
                  <span id="payment-status" class="ml-2"></span>
                </div>
                <div>
                  <span class="text-gray-600">Delivery Email:</span>
                  <span
                    id="delivery-email"
                    class="text-gray-900 font-medium ml-2"></span>
                </div>
              </div>

              <!-- Action Buttons -->
              <div class="mt-6 space-y-3">
                <a
                  href="/orders"
                  class="block w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors text-center"
                >
                  View Order History
                </a>
                <a
                  href="/ecommerce/products"
                  class="block w-full bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-3 px-4 rounded-lg transition-colors text-center"
                >
                  Continue Shopping
                </a>
              </div>
            </div>

            <!-- Support Info -->
            <div class="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 class="text-sm font-semibold text-blue-900 mb-2">
                Need Help?
              </h4>
              <p class="text-sm text-blue-700 mb-3">
                If you have any questions about your order or need assistance
                with downloads, we're here to help.
              </p>
              <a
                href="/contact"
                class="text-sm text-blue-600 hover:text-blue-700 font-medium"
              >
                Contact Support →
              </a>
            </div>
          </div>
        </div>

        <!-- Email Confirmation Notice -->
        <div class="mt-12 bg-green-50 border border-green-200 rounded-lg p-6">
          <div class="flex items-start">
            <svg
              class="w-6 h-6 text-green-600 mt-1 mr-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
              ></path>
            </svg>
            <div>
              <h3 class="text-lg font-semibold text-green-900 mb-2">
                Order Confirmation Sent
              </h3>
              <p class="text-green-700">
                We've sent a confirmation email with your order details and
                download links to
                <span id="confirmation-email" class="font-medium"></span>.
                Please check your spam folder if you don't see it within a few
                minutes.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Error State -->
    <div id="confirmation-error" class="hidden container mx-auto px-4 py-16">
      <div class="max-w-2xl mx-auto text-center">
        <div
          class="w-20 h-20 mx-auto bg-red-100 rounded-full flex items-center justify-center mb-6"
        >
          <svg
            class="w-10 h-10 text-red-600"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </div>
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Order Not Found</h1>
        <p class="text-xl text-gray-600 mb-8" id="error-message">
          We couldn't find the order you're looking for. Please check your order
          number and try again.
        </p>
        <div class="space-x-4">
          <a
            href="/orders"
            class="inline-block bg-blue-600 text-white hover:bg-blue-700 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            View Order History
          </a>
          <a
            href="/contact"
            class="inline-block border border-gray-300 text-gray-700 hover:bg-gray-50 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Contact Support
          </a>
        </div>
      </div>
    </div>
  </div>

  <Footer slot="footer" />
</BaseLayout>

<!-- Pass order number to JavaScript -->
<script is:inline define:vars={{ orderNumber }}>
  window.orderNumber = orderNumber;
</script>

<script>
  // API configuration
  const API_BASE_URL = "https://corrison.corrisonapi.com/api/v1";

  // DOM elements
  const elements = {
    confirmationLoading: document.getElementById("confirmation-loading"),
    confirmationSuccess: document.getElementById("confirmation-success"),
    confirmationError: document.getElementById("confirmation-error"),
    orderNumberDisplay: document.getElementById("order-number-display"),
    orderItemsList: document.getElementById("order-items-list"),
    downloadsSection: document.getElementById("downloads-section"),
    downloadItemsList: document.getElementById("download-items-list"),
    summarySubtotal: document.getElementById("summary-subtotal"),
    summaryTax: document.getElementById("summary-tax"),
    summaryTotal: document.getElementById("summary-total"),
    orderDate: document.getElementById("order-date"),
    paymentStatus: document.getElementById("payment-status"),
    deliveryEmail: document.getElementById("delivery-email"),
    confirmationEmail: document.getElementById("confirmation-email"),
    errorMessage: document.getElementById("error-message"),
  };

  let orderData: any = null;

  // Initialize page
  async function initializePage(): Promise<void> {
    try {
      const orderNumber = (window as any).orderNumber;

      if (!orderNumber) {
        showErrorState("Invalid order number");
        return;
      }

      await loadOrderData(orderNumber);
    } catch (error) {
      console.error("Error initializing order confirmation:", error);
      showErrorState("Failed to load order details");
    }
  }

  // Load order data
  async function loadOrderData(orderNumber: string): Promise<void> {
    try {
      // Try authenticated request first
      let response = await fetchOrderData(orderNumber, true);

      // If authenticated request fails, try as guest (using session)
      if (!response.ok && response.status === 401) {
        response = await fetchOrderData(orderNumber, false);
      }

      if (!response.ok) {
        if (response.status === 404) {
          showErrorState("Order not found. Please check your order number.");
        } else {
          showErrorState(
            "Failed to load order details. Please try again later.",
          );
        }
        return;
      }

      orderData = await response.json();
      renderOrderDetails();
      showSuccessState();
    } catch (error) {
      console.error("Error loading order data:", error);
      showErrorState("An error occurred while loading your order");
    }
  }

  // Fetch order data with or without authentication
  async function fetchOrderData(
    orderNumber: string,
    useAuth: boolean,
  ): Promise<Response> {
    const headers: Record<string, string> = {
      "Content-Type": "application/json",
    };

    if (useAuth) {
      const token = localStorage.getItem("access_token");
      if (token) {
        headers["Authorization"] = `Bearer ${token}`;
      }
    }

    return fetch(`${API_BASE_URL}/orders/?order_number=${orderNumber}`, {
      method: "GET",
      headers,
      credentials: "include",
    });
  }

  // Render order details
  function renderOrderDetails(): void {
    if (!orderData) return;

    // Handle both single order and array response
    const order = Array.isArray(orderData) ? orderData[0] : orderData;

    if (!order) {
      showErrorState("Order data is invalid");
      return;
    }

    // Update order number display
    if (elements.orderNumberDisplay) {
      elements.orderNumberDisplay.textContent = order.order_number || "N/A";
    }

    // Render order items
    renderOrderItems(order);

    // Update order summary
    updateOrderSummary(order);

    // Update order info
    updateOrderInfo(order);

    // Show download section if there are digital items
    if (order.has_digital_items) {
      renderDownloadSection(order);
    }
  }

  // Render order items
  function renderOrderItems(order: any): void {
    if (!elements.orderItemsList || !order.items) return;

    elements.orderItemsList.innerHTML = order.items
      .map((item: any) => {
        const imageUrl = item.product?.main_image || "/images/placeholder.png";
        const totalPrice =
          typeof item.total_price === "string"
            ? parseFloat(item.total_price)
            : item.total_price;
        const unitPrice =
          typeof item.price === "string" ? parseFloat(item.price) : item.price;

        return `
        <div class="p-6">
          <div class="flex items-start space-x-4">
            <img 
              src="${imageUrl}" 
              alt="${item.product_name || "Product"}"
              class="w-16 h-16 object-cover rounded-lg"
              onerror="this.src='/images/placeholder.png'"
            />
            <div class="flex-1 min-w-0">
              <h3 class="text-lg font-medium text-gray-900">${item.product_name || "Unknown Product"}</h3>
              
              ${
                item.variant_name
                  ? `
                <p class="text-sm text-gray-600 mt-1">Variant: ${item.variant_name}</p>
              `
                  : ""
              }
              
              <div class="mt-2 flex items-center space-x-4 text-sm text-gray-600">
                <span>Qty: ${item.quantity || 1}</span>
                <span>•</span>
                <span>${unitPrice.toFixed(2)} each</span>
                ${
                  item.sku
                    ? `
                  <span>•</span>
                  <span>SKU: ${item.sku}</span>
                `
                    : ""
                }
              </div>

              ${
                item.is_digital
                  ? `
                <div class="mt-2">
                  <span class="inline-flex items-center px-2 py-1 text-xs font-medium rounded-full bg-purple-100 text-purple-800">
                    <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path>
                    </svg>
                    Digital Download
                  </span>
                </div>
              `
                  : ""
              }
            </div>
            <div class="text-right">
              <div class="text-lg font-semibold text-gray-900">
                ${totalPrice.toFixed(2)}
              </div>
            </div>
          </div>
        </div>
      `;
      })
      .join("");
  }

  // Render download section
  function renderDownloadSection(order: any): void {
    if (!elements.downloadsSection || !elements.downloadItemsList) return;

    const digitalItems = order.items.filter((item: any) => item.is_digital);

    if (digitalItems.length === 0) return;

    elements.downloadsSection.classList.remove("hidden");

    elements.downloadItemsList.innerHTML = digitalItems
      .map((item: any) => {
        const canDownload = item.can_download !== false; // Default to true if not specified
        const downloadUrl = item.download_url || "#";

        return `
        <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg mb-3">
          <div class="flex-1">
            <h4 class="font-medium text-gray-900">${item.product_name}</h4>
            <div class="flex items-center mt-1 text-sm text-gray-600">
              ${
                item.download_expires_at
                  ? `
                <span>Expires: ${new Date(item.download_expires_at).toLocaleDateString()}</span>
                <span class="mx-2">•</span>
              `
                  : ""
              }
              <span>Downloads: ${item.download_count || 0}/${item.max_downloads || "Unlimited"}</span>
            </div>
          </div>
          <div>
            ${
              canDownload
                ? `
              <a
                href="${downloadUrl}"
                class="inline-flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg transition-colors"
                target="_blank"
                rel="noopener noreferrer"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Download
              </a>
            `
                : `
              <span class="inline-flex items-center px-4 py-2 bg-gray-300 text-gray-600 font-medium rounded-lg cursor-not-allowed">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"></path>
                </svg>
                Expired
              </span>
            `
            }
          </div>
        </div>
      `;
      })
      .join("");
  }

  // Update order summary
  function updateOrderSummary(order: any): void {
    const subtotal =
      typeof order.subtotal === "string"
        ? parseFloat(order.subtotal)
        : order.subtotal;
    const tax =
      typeof order.tax_amount === "string"
        ? parseFloat(order.tax_amount)
        : order.tax_amount;
    const total =
      typeof order.total === "string" ? parseFloat(order.total) : order.total;

    if (elements.summarySubtotal)
      elements.summarySubtotal.textContent = `${subtotal.toFixed(2)}`;
    if (elements.summaryTax)
      elements.summaryTax.textContent = `${tax.toFixed(2)}`;
    if (elements.summaryTotal)
      elements.summaryTotal.textContent = `${total.toFixed(2)}`;
  }

  // Update order info
  function updateOrderInfo(order: any): void {
    // Order date
    if (elements.orderDate && order.created_at) {
      const orderDate = new Date(order.created_at);
      elements.orderDate.textContent = orderDate.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
    }

    // Payment status
    if (elements.paymentStatus) {
      const status = order.payment_status || "pending";
      const statusColors = {
        paid: "text-green-600",
        pending: "text-yellow-600",
        failed: "text-red-600",
        refunded: "text-gray-600",
      };

      elements.paymentStatus.textContent =
        status.charAt(0).toUpperCase() + status.slice(1);
      elements.paymentStatus.className = `ml-2 font-medium ${statusColors[status as keyof typeof statusColors] || "text-gray-600"}`;
    }

    // Delivery email
    const deliveryEmail =
      order.delivery_email ||
      order.digital_delivery_email ||
      order.guest_email ||
      "N/A";
    if (elements.deliveryEmail)
      elements.deliveryEmail.textContent = deliveryEmail;
    if (elements.confirmationEmail)
      elements.confirmationEmail.textContent = deliveryEmail;
  }

  // State management functions
  function showSuccessState(): void {
    hideAllStates();
    elements.confirmationSuccess?.classList.remove("hidden");
  }

  function showErrorState(message: string): void {
    hideAllStates();
    if (elements.errorMessage) elements.errorMessage.textContent = message;
    elements.confirmationError?.classList.remove("hidden");
  }

  function hideAllStates(): void {
    elements.confirmationLoading?.classList.add("hidden");
    elements.confirmationSuccess?.classList.add("hidden");
    elements.confirmationError?.classList.add("hidden");
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", initializePage);
</script>
