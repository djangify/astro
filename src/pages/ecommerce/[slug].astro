---
// src/pages/ecommerce/[slug].astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";

// Complete Product interface that matches Django model exactly
interface ProductData {
  // Required fields (no null/undefined in Django model)
  id: number; // CRITICAL: Required by cart API
  name: string;
  slug: string;
  price: number;
  product_type: "physical" | "digital";
  in_stock: boolean;
  stock_qty: number; // PositiveIntegerField, defaults to 0
  is_active: boolean; // Required by cart system

  // Optional fields (null=True, blank=True in Django)
  description?: string;
  sale_price?: number;
  main_image?: string;
  featured_image?: string;
  weight?: number;
  dimensions?: string;
  digital_file?: string;
  download_limit?: number;
  download_expiry_days?: number;
  is_featured?: boolean;
  requires_shipping?: boolean;

  // Relationships - category is ForeignKey (required) but API might not include it
  category?: {
    name: string;
    slug: string;
  };
  // images is ProductImage relationship
  images?: Array<{ image: string }>;
}

export async function getStaticPaths() {
  try {
    // Fetch products from your Django API
    const response = await fetch(
      "https://corrison.corrisonapi.com/api/v1/products/",
    );

    if (!response.ok) {
      console.warn("Failed to fetch products for static paths, using fallback");
      return [];
    }

    const data = await response.json();
    const products = data.results || data;

    // Generate paths for each product with FULL product data
    return products.map((product: ProductData) => ({
      params: { slug: product.slug },
      props: { product }, // Pass complete product data as props
    }));
  } catch (error) {
    console.warn("Error fetching products for static paths:", error);
    return [];
  }
}

// Type the props properly
interface Props {
  product: ProductData;
}

const { slug } = Astro.params;
const { product }: Props = Astro.props;

// Handle case where product might be undefined
if (!product) {
  return Astro.redirect("/404");
}

// Helper functions for server-side rendering
function getProductImageUrl(product: ProductData): string {
  const imageUrl = product.featured_image || product.main_image;
  if (
    !imageUrl ||
    imageUrl === "null" ||
    imageUrl === "" ||
    imageUrl === undefined
  ) {
    return "/static/images/placeholder.png";
  }
  return imageUrl;
}

function getProductImages(product: ProductData): string[] {
  const images = [];
  if (product.main_image) images.push(product.main_image);
  if (product.images && Array.isArray(product.images)) {
    images.push(
      ...product.images.map((img: any) =>
        typeof img === "object" ? img.image : img,
      ),
    );
  }
  return images.length > 0 ? images : ["/static/images/placeholder.png"];
}

// Pre-calculate ALL values for server-side rendering - NO CONDITIONALS IN TEMPLATE
// Using your exact Django field names
const currentPrice = product.sale_price || product.price;
const originalPrice = product.sale_price ? product.price : null;
const mainImageUrl = getProductImageUrl(product);
const productImages = getProductImages(product);
const isDigital = product.product_type === "digital";
const categoryName =
  typeof product.category === "object"
    ? product.category?.name
    : product.category || "";
const categorySlug =
  typeof product.category === "object" ? product.category?.slug : "";

// SEO meta tags
const metaTitle = `${product.name} â€“ Corrison Ecommerce`;
const metaDescription = product.description
  ? `${product.description.slice(0, 150)}...`
  : `${product.name} - Premium quality product with excellent features and value.`;
---

<BaseLayout>
  <Header slot="header" />
  <title slot="title">{metaTitle}</title>
  <meta slot="head" name="description" content={metaDescription} />
  <meta slot="head" property="og:title" content={metaTitle} />
  <meta slot="head" property="og:description" content={metaDescription} />
  <meta slot="head" property="og:image" content={mainImageUrl} />
  <meta slot="head" property="og:type" content="product" />
  <meta
    slot="head"
    property="product:price:amount"
    content={currentPrice.toString()}
  />
  <meta slot="head" property="product:price:currency" content="USD" />

  <div class="min-h-screen bg-gray-50">
    <!-- Product Content - NOW VISIBLE IMMEDIATELY -->
    <div id="product-content">
      <!-- Breadcrumb -->
      <nav class="bg-white border-b border-gray-200">
        <div class="container mx-auto px-4 py-4">
          <ol class="flex items-center space-x-2 text-sm">
            <li>
              <a href="/" class="text-gray-500 hover:text-gray-700">Home</a>
            </li>
            <li><span class="text-gray-300">/</span></li>
            <li>
              <a href="/ecommerce" class="text-gray-500 hover:text-gray-700"
                >Shop</a
              >
            </li>
            <li><span class="text-gray-300">/</span></li>
            <li>
              <a
                href="/ecommerce/products"
                class="text-gray-500 hover:text-gray-700">Products</a
              >
            </li>
            <li><span class="text-gray-300">/</span></li>
            <li class="text-gray-900 font-medium">{product.name}</li>
          </ol>
        </div>
      </nav>

      <div class="container mx-auto px-4 py-12">
        <div class="max-w-6xl mx-auto">
          <div class="lg:grid lg:grid-cols-2 gap-12 space-y-8 lg:space-y-0">
            <!-- Product Images -->
            <div class="space-y-4">
              <!-- Main Image -->
              <div
                class="relative bg-white rounded-xl overflow-hidden shadow-lg"
              >
                <img
                  id="main-image"
                  src={mainImageUrl}
                  alt={product.name}
                  class="w-full h-96 object-cover"
                  style="opacity:1;"
                />

                <!-- Product Type Badge -->
                <div class="absolute top-4 left-4">
                  <span
                    class="px-3 py-1 text-sm font-semibold rounded-full bg-blue-100 text-blue-800"
                    id="product-type-badge"
                  >
                    Physical Product
                  </span>
                </div>

                <!-- Sale Badge -->
                <div class="absolute top-4 right-4 hidden" id="sale-badge">
                  <span
                    class="px-3 py-1 text-sm font-bold bg-red-500 text-white rounded-full"
                  >
                    SALE
                  </span>
                </div>

                <!-- Image Navigation -->
                <div
                  id="image-nav"
                  class="absolute inset-y-0 left-0 right-0 flex items-center justify-between p-4 opacity-0 hover:opacity-100 transition-opacity"
                >
                  <button
                    id="prev-image"
                    class="bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-75 transition-all"
                  >
                    <svg
                      class="w-6 h-6"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 19l-7-7 7-7"></path>
                    </svg>
                  </button>
                  <button
                    id="next-image"
                    class="bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-75 transition-all"
                  >
                    <svg
                      class="w-6 h-6"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 5l7 7-7 7"></path>
                    </svg>
                  </button>
                </div>
              </div>

              <!-- Thumbnail Images -->
              <div id="thumbnail-container" class="grid grid-cols-4 gap-2">
                <!-- Thumbnails will be populated by JS -->
              </div>

              <!-- Product Gallery Modal Trigger -->
              <button
                id="gallery-trigger"
                class="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 py-3 px-4 rounded-lg transition-colors font-medium"
              >
                <svg
                  class="w-5 h-5 inline mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                  ></path>
                </svg>
                View Gallery
              </button>
            </div>

            <!-- Product Info -->
            <div class="space-y-6">
              <!-- Product Title & Category -->
              <div>
                <div id="category-tag" class="mb-2 hidden">
                  <span
                    class="inline-block bg-gray-100 text-gray-600 px-3 py-1 rounded-full text-sm font-medium"
                  >
                    Category
                  </span>
                </div>
                <h1 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
                  {product.name}
                </h1>
              </div>

              <!-- Price -->
              <div class="flex items-center space-x-4">
                <div>
                  <span class="text-4xl font-bold text-gray-900">
                    ${parseFloat(currentPrice.toString()).toFixed(2)}
                  </span>
                  <span
                    id="original-price"
                    class="text-2xl text-gray-500 line-through ml-3 hidden"
                  >
                    $0.00
                  </span>
                </div>
                <div id="savings-badge" class="hidden">
                  <span
                    class="bg-red-100 text-red-800 px-3 py-1 rounded-full text-sm font-semibold"
                  >
                    Save <span id="savings-amount">$0</span>
                  </span>
                </div>
              </div>

              <!-- Product Description -->
              <div class="prose prose-gray max-w-none">
                <p class="text-lg text-gray-600 leading-relaxed">
                  {
                    product.description ||
                      "Premium quality product with excellent features and value."
                  }
                </p>
              </div>

              <!-- Digital Product Info -->
              <div
                id="digital-info"
                class="bg-purple-50 border border-purple-200 rounded-lg p-4 hidden"
              >
                <div class="flex items-start">
                  <svg
                    class="w-6 h-6 text-purple-600 mt-1 mr-3"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"
                    ></path>
                  </svg>
                  <div>
                    <h4 class="font-semibold text-purple-900 mb-1">
                      Digital Download
                    </h4>
                    <p class="text-purple-700 text-sm">
                      Instant access after purchase. Download links valid for
                      <span id="download-days">30</span> days. Maximum <span
                        id="download-limit">5</span
                      > downloads allowed.
                    </p>
                  </div>
                </div>
              </div>

              <!-- Physical Product Info -->
              <div
                id="physical-info"
                class="bg-blue-50 border border-blue-200 rounded-lg p-4"
              >
                <div class="flex items-start">
                  <svg
                    class="w-6 h-6 text-blue-600 mt-1 mr-3"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
                    ></path>
                  </svg>
                  <div>
                    <h4 class="font-semibold text-blue-900 mb-1">
                      Physical Product
                    </h4>
                    <p class="text-blue-700 text-sm">
                      Ships within 1-2 business days. Free shipping on orders
                      over $50.
                    </p>
                    <div id="product-specs" class="mt-2 text-xs text-blue-600">
                      <!-- Product specs will be populated by JS -->
                    </div>
                  </div>
                </div>
              </div>

              <!-- Stock Status -->
              <div id="stock-status" class="flex items-center space-x-2">
                <div class="w-3 h-3 rounded-full bg-green-500"></div>
                <span class="text-sm font-medium text-green-600">
                  In Stock
                </span>
              </div>

              <!-- Quantity & Add to Cart -->
              <div class="space-y-4">
                <div class="flex items-center space-x-4">
                  <label class="text-sm font-medium text-gray-700"
                    >Quantity:</label
                  >
                  <div
                    class="flex items-center border border-gray-300 rounded-lg"
                  >
                    <button
                      id="decrease-qty"
                      class="px-3 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 transition-colors"
                    >
                      <svg
                        class="w-4 h-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M20 12H4"></path>
                      </svg>
                    </button>
                    <input
                      type="number"
                      id="quantity-input"
                      value="1"
                      min="1"
                      max="10"
                      class="w-16 px-3 py-2 text-center border-0 focus:ring-0"
                    />
                    <button
                      id="increase-qty"
                      class="px-3 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 transition-colors"
                    >
                      <svg
                        class="w-4 h-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                    </button>
                  </div>
                </div>

                <!-- Action Buttons -->
                <div class="space-y-3">
                  <button
                    id="add-to-cart-btn"
                    class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg"
                  >
                    <svg
                      class="w-5 h-5 inline mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 7m0 0l-1.5-5M7 13l-2-8m0 0h16m-7 4v8a2 2 0 01-2 2H9a2 2 0 01-2-2v-8a2 2 0 012-2h2a2 2 0 012 2z"
                      ></path>
                    </svg>
                    Add to Cart
                  </button>

                  <div class="grid grid-cols-2 gap-3">
                    <button
                      id="wishlist-btn"
                      class="flex items-center justify-center px-4 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                    >
                      <svg
                        class="w-5 h-5 mr-2"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                        ></path>
                      </svg>
                      Wishlist
                    </button>

                    <button
                      id="share-btn"
                      class="flex items-center justify-center px-4 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                    >
                      <svg
                        class="w-5 h-5 mr-2"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"
                        ></path>
                      </svg>
                      Share
                    </button>
                  </div>
                </div>
              </div>

              <!-- Trust Signals -->
              <div class="border-t pt-6">
                <div
                  class="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm text-gray-600"
                >
                  <div class="flex items-center">
                    <svg
                      class="w-5 h-5 text-green-500 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
                      ></path>
                    </svg>
                    Secure Payment
                  </div>
                  <div class="flex items-center">
                    <svg
                      class="w-5 h-5 text-blue-500 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"></path>
                    </svg>
                    Easy Returns
                  </div>
                  <div class="flex items-center">
                    <svg
                      class="w-5 h-5 text-purple-500 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M12 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      ></path>
                    </svg>
                    24/7 Support
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Related Products -->
          <section id="related-products" class="mt-20">
            <h2 class="text-2xl font-bold text-gray-900 mb-8">
              Related Products
            </h2>
            <div
              id="related-products-grid"
              class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"
            >
              <!-- Related products will be loaded here -->
            </div>
          </section>
        </div>
      </div>
    </div>

    <!-- Error State -->
    <div id="error-state" class="hidden container mx-auto px-4 py-16">
      <div class="max-w-lg mx-auto text-center">
        <div class="text-6xl mb-4">ðŸ˜ž</div>
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Product Not Found</h1>
        <p class="text-gray-600 mb-8">
          The product you're looking for doesn't exist or may have been removed.
        </p>
        <div class="space-x-4">
          <a
            href="/ecommerce/products"
            class="inline-block bg-blue-600 text-white hover:bg-blue-700 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Browse Products
          </a>
          <a
            href="/ecommerce"
            class="inline-block border border-gray-300 text-gray-700 hover:bg-gray-50 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Back to Shop
          </a>
        </div>
      </div>
    </div>
  </div>

  <Footer slot="footer" />
</BaseLayout>

<!-- Load cart system via module import -->
<script>
  // Import cart types and manager using correct relative path
  import type {
    CartManager,
    Product as CartProduct,
    AddToCartResponse,
  } from "../../lib/cart.ts";

  // Extend window interface for CartManager
  declare global {
    interface Window {
      cartManager: CartManager;
      preloadedProduct: any;
      preloadedProductImages: string[];
    }
  }

  // Import and initialize cart system properly
  async function initializeCartSystem(): Promise<void> {
    try {
      // Import the cart module using correct relative path
      const cartModule = await import("../../lib/cart.ts");

      // Initialize cart manager
      window.cartManager = new cartModule.CartManager();

      // Load cart data
      await window.cartManager.loadCartData();

      console.log("Cart system initialized successfully");

      // Dispatch event for any listeners
      window.dispatchEvent(new CustomEvent("cartSystemReady"));
    } catch (error) {
      console.error("Error loading cart system:", error);

      // Create fallback cart manager that matches CartManager interface
      window.cartManager = {
        addToCart: async function (
          product: CartProduct,
          quantity: number = 1,
        ): Promise<AddToCartResponse> {
          console.warn("Cart system not available - using API fallback");
          return await fallbackAddToCart(product, quantity);
        },
        getCartData: function () {
          return null;
        },
        showCartTypeWarning: function (
          _productType: "digital" | "physical",
        ): void {
          console.warn("Cart type warning - system not loaded");
        },
        clearCart: async function (): Promise<AddToCartResponse> {
          console.warn("Clear cart not available");
          return { success: false, message: "Clear cart not available" };
        },
        // Add other required CartManager methods as stubs
        loadCartData: async function () {
          return null;
        },
        updateCartItem: async function () {
          return { success: false, message: "Not available" };
        },
        removeCartItem: async function () {
          return { success: false, message: "Not available" };
        },
        getItemCount: function () {
          return 0;
        },
        getSubtotal: function () {
          return 0;
        },
        subscribe: function () {
          return () => {};
        },
      } as unknown as CartManager;
    }
  }

  // Fallback cart function that calls API directly
  async function fallbackAddToCart(
    product: CartProduct,
    quantity: number,
  ): Promise<AddToCartResponse> {
    try {
      const API_BASE_URL = "https://corrison.corrisonapi.com/api/v1";

      // Get auth token from localStorage
      const token = localStorage.getItem("auth_token");

      const response = await fetch(`${API_BASE_URL}/cart/add/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: token ? `Bearer ${token}` : "",
        },
        body: JSON.stringify({
          product: product.id,
          quantity: quantity,
        }),
      });

      if (response.ok) {
        return { success: true, message: "Added to cart successfully" };
      } else {
        const errorData = await response.json();
        return {
          success: false,
          message: errorData.detail || "Failed to add to cart",
        };
      }
    } catch (error) {
      console.error("Fallback cart error:", error);
      return { success: false, message: "Network error - please try again" };
    }
  }

  // Initialize cart system when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeCartSystem);
  } else {
    initializeCartSystem();
  }
</script>

<!-- Pass preloaded product data to JavaScript -->
<script is:inline define:vars={{ product, productImages }}>
  window.preloadedProduct = product;
  window.preloadedProductImages = productImages;
</script>

<script>
  // Import cart types and manager using correct relative path
  import type {
    CartManager,
    Product as CartProduct,
    AddToCartResponse,
  } from "../../lib/cart.ts";
  interface Product {
    // Required fields (no null/undefined in Django model)
    id: number; // CRITICAL: Required by cart API
    name: string;
    slug: string;
    price: number;
    product_type: "physical" | "digital";
    in_stock: boolean;
    stock_qty: number;
    is_active: boolean; // Required by cart system

    // Optional fields (null=True, blank=True in Django)
    description?: string;
    sale_price?: number;
    main_image?: string;
    featured_image?: string;
    weight?: number;
    dimensions?: string;
    digital_file?: string;
    download_limit?: number;
    download_expiry_days?: number;
    is_featured?: boolean;
    requires_shipping?: boolean;

    // Relationships
    category?: {
      name: string;
      slug: string;
    };
    images?: Array<{ image: string }>;
  }

  interface Elements {
    [key: string]: HTMLElement | null;
  }

  const API_BASE_URL: string = "https://corrison.corrisonapi.com/api/v1";
  const slug: string = window.location.pathname.split("/").pop() || "";
  let currentProduct: Product | null = null;
  let currentImageIndex: number = 0;
  let productImages: string[] = [];

  // DOM elements with proper typing
  const elements: Elements = {
    loadingState: document.getElementById("loading-state"),
    productContent: document.getElementById("product-content"),
    errorState: document.getElementById("error-state"),
    mainImage: document.getElementById("main-image"),
    productTitle: document.getElementById("product-title"),
    productDescription: document.getElementById("product-description"),
    currentPrice: document.getElementById("current-price"),
    originalPrice: document.getElementById("original-price"),
    saleBadge: document.getElementById("sale-badge"),
    savingsBadge: document.getElementById("savings-badge"),
    savingsAmount: document.getElementById("savings-amount"),
    productTypeBadge: document.getElementById("product-type-badge"),
    categoryTag: document.getElementById("category-tag"),
    stockStatus: document.getElementById("stock-status"),
    digitalInfo: document.getElementById("digital-info"),
    physicalInfo: document.getElementById("physical-info"),
    downloadDays: document.getElementById("download-days"),
    downloadLimit: document.getElementById("download-limit"),
    productSpecs: document.getElementById("product-specs"),
    quantityInput: document.getElementById("quantity-input"),
    addToCartBtn: document.getElementById("add-to-cart-btn"),
    wishlistBtn: document.getElementById("wishlist-btn"),
    shareBtn: document.getElementById("share-btn"),
    thumbnailContainer: document.getElementById("thumbnail-container"),
    imageNav: document.getElementById("image-nav"),
    prevImageBtn: document.getElementById("prev-image"),
    nextImageBtn: document.getElementById("next-image"),
    galleryTrigger: document.getElementById("gallery-trigger"),
    relatedProductsGrid: document.getElementById("related-products-grid"),
  };

  // Initialize product data from server-rendered content
  function initializeProduct(): void {
    // Use preloaded product data
    const preloadedProduct = (window as any).preloadedProduct;
    const preloadedImages = (window as any).preloadedProductImages;

    if (preloadedProduct) {
      currentProduct = preloadedProduct;
      productImages = preloadedImages || [];

      // Update UI with JavaScript after page load
      renderProductData(preloadedProduct);
      setupProductImages(preloadedProduct);
      loadRelatedProducts(
        typeof preloadedProduct.category === "object"
          ? preloadedProduct.category?.slug
          : undefined,
      );
    }
  }

  // Render product data with JavaScript (for dynamic content)
  function renderProductData(product: Product): void {
    const isDigital = product.product_type === "digital";
    const currentPrice = product.sale_price || product.price;
    const originalPrice = product.sale_price ? product.price : null;

    // Update product type badge
    if (elements.productTypeBadge) {
      elements.productTypeBadge.textContent = isDigital
        ? "Digital Download"
        : "Physical Product";
      elements.productTypeBadge.className = `px-3 py-1 text-sm font-semibold rounded-full ${
        isDigital
          ? "bg-purple-100 text-purple-800"
          : "bg-blue-100 text-blue-800"
      }`;
    }

    // Show category if available
    if (product.category && elements.categoryTag) {
      const categoryName =
        typeof product.category === "object"
          ? product.category.name
          : product.category;
      const categorySpan = elements.categoryTag.querySelector("span");
      if (categorySpan) categorySpan.textContent = categoryName;
      elements.categoryTag.classList.remove("hidden");
    }

    // Show sale price if applicable
    if (
      originalPrice &&
      elements.originalPrice &&
      elements.saleBadge &&
      elements.savingsBadge &&
      elements.savingsAmount
    ) {
      elements.originalPrice.textContent = `$${parseFloat(originalPrice.toString()).toFixed(2)}`;
      elements.originalPrice.classList.remove("hidden");
      elements.saleBadge.classList.remove("hidden");

      const savings = originalPrice - currentPrice;
      elements.savingsAmount.textContent = `$${savings.toFixed(2)}`;
      elements.savingsBadge.classList.remove("hidden");
    }

    // Show appropriate product info section
    if (isDigital && elements.digitalInfo && elements.physicalInfo) {
      elements.digitalInfo.classList.remove("hidden");
      elements.physicalInfo.classList.add("hidden");

      if (product.download_expiry_days && elements.downloadDays) {
        elements.downloadDays.textContent =
          product.download_expiry_days.toString();
      }
      if (product.download_limit && elements.downloadLimit) {
        elements.downloadLimit.textContent = product.download_limit.toString();
      }
    } else if (!isDigital && elements.physicalInfo && elements.digitalInfo) {
      elements.physicalInfo.classList.remove("hidden");
      elements.digitalInfo.classList.add("hidden");

      // Add product specs
      const specs = [];
      if (product.weight) specs.push(`Weight: ${product.weight}kg`);
      if (product.dimensions) specs.push(`Dimensions: ${product.dimensions}`);

      if (specs.length > 0 && elements.productSpecs) {
        elements.productSpecs.textContent = specs.join(" â€¢ ");
      }
    }

    // Update stock status
    updateStockStatus(product);

    // Update quantity input max
    if (product.stock_qty && product.stock_qty > 0 && elements.quantityInput) {
      (elements.quantityInput as HTMLInputElement).max = Math.min(
        product.stock_qty,
        10,
      ).toString();
    }
  }

  // Update stock status
  function updateStockStatus(product: Product): void {
    const isDigital = product.product_type === "digital";
    const inStock =
      product.in_stock &&
      (product.stock_qty ? product.stock_qty > 0 : false || isDigital);

    if (elements.stockStatus) {
      const indicator = elements.stockStatus.querySelector(".w-3");
      const text = elements.stockStatus.querySelector("span");

      if (indicator && text) {
        if (inStock) {
          indicator.className = "w-3 h-3 rounded-full bg-green-500";
          text.textContent = isDigital
            ? "Available for download"
            : product.stock_qty && product.stock_qty > 10
              ? "In Stock"
              : `${product.stock_qty || 0} left in stock`;
          text.className = "text-sm font-medium text-green-600";
        } else {
          indicator.className = "w-3 h-3 rounded-full bg-red-500";
          text.textContent = "Out of Stock";
          text.className = "text-sm font-medium text-red-600";
        }
      }
    }

    // Update add to cart button
    if (elements.addToCartBtn) {
      if (!inStock) {
        (elements.addToCartBtn as HTMLButtonElement).disabled = true;
        elements.addToCartBtn.textContent = "Out of Stock";
        elements.addToCartBtn.classList.add("opacity-50", "cursor-not-allowed");
      }
    }
  }

  // Setup product images (for JavaScript interactions only)
  function setupProductImages(product: Product): void {
    if (productImages.length === 0) {
      productImages = [];

      // Add main image
      if (product.main_image) {
        productImages.push(product.main_image);
      }

      // Add additional images if available
      if (product.images && Array.isArray(product.images)) {
        productImages.push(
          ...product.images.map((img: { image: string }) => img.image),
        );
      }

      // Fallback to placeholder if no images
      if (productImages.length === 0) {
        productImages.push("/static/images/placeholder.png");
      }
    }

    // Setup thumbnails if multiple images
    if (productImages.length > 1) {
      renderThumbnails();
      elements.imageNav?.classList.remove("hidden");
      elements.thumbnailContainer?.classList.remove("hidden");
    }
  }

  // Render thumbnail images
  function renderThumbnails(): void {
    if (elements.thumbnailContainer) {
      elements.thumbnailContainer.innerHTML = productImages
        .map(
          (image: string, index: number) => `
          <button 
            class="relative overflow-hidden rounded-lg border-2 transition-all ${
              index === currentImageIndex
                ? "border-blue-500"
                : "border-gray-200 hover:border-gray-300"
            }"
            onclick="selectImage(${index})"
          >
            <img 
              src="${image}" 
              alt="Product image ${index + 1}" 
              class="w-full h-20 object-cover"
            >
          </button>
        `,
        )
        .join("");
    }
  }

  // Image navigation functions
  function selectImage(index: number): void {
    currentImageIndex = index;
    if (elements.mainImage) {
      (elements.mainImage as HTMLImageElement).src = productImages[index];
    }
    renderThumbnails();
  }

  // Make selectImage globally available
  (window as any).selectImage = selectImage;

  // Load related products
  async function loadRelatedProducts(categorySlug?: string): Promise<void> {
    if (!categorySlug || !elements.relatedProductsGrid) return;

    try {
      const response: Response = await fetch(
        `${API_BASE_URL}/products/?category=${categorySlug}&limit=4`,
      );
      if (!response.ok) return;

      const data: any = await response.json();
      const products: Product[] = (data.results || data).filter(
        (p: Product) => p.slug !== slug,
      );

      if (products.length > 0) {
        elements.relatedProductsGrid.innerHTML = products
          .map((product: Product) => {
            const imageUrl: string =
              product.main_image ||
              product.featured_image ||
              "/static/images/placeholder.png";
            const price: number = product.sale_price || product.price;

            return `
              <div class="group bg-white rounded-lg overflow-hidden shadow-sm border border-gray-200 hover:shadow-md transition-all cursor-pointer"
                   onclick="window.location.href='/ecommerce/${product.slug}'">
                <div class="relative h-48 overflow-hidden">
                  <img src="${imageUrl}" 
                       alt="${product.name}" 
                       class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                       >
                  <div class="absolute top-2 left-2">
                    <span class="px-2 py-1 text-xs font-semibold rounded ${
                      product.product_type === "digital"
                        ? "bg-purple-100 text-purple-800"
                        : "bg-blue-100 text-blue-800"
                    }">
                      ${product.product_type === "digital" ? "Digital" : "Physical"}
                    </span>
                  </div>
                </div>
                <div class="p-4">
                  <h3 class="font-semibold text-gray-900 group-hover:text-blue-600 transition-colors mb-2">
                    ${product.name}
                  </h3>
                  <div class="flex items-center justify-between">
                    <span class="text-lg font-bold text-gray-900">
                      $${parseFloat(price.toString()).toFixed(2)}
                    </span>
                    <button class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition-colors">
                      View
                    </button>
                  </div>
                </div>
              </div>
            `;
          })
          .join("");
      }
    } catch (error) {
      console.error("Error loading related products:", error);
    }
  }

  // Event listeners
  function setupEventListeners(): void {
    // Quantity controls
    const decreaseBtn: HTMLElement | null =
      document.getElementById("decrease-qty");
    const increaseBtn: HTMLElement | null =
      document.getElementById("increase-qty");

    decreaseBtn?.addEventListener("click", () => {
      const quantityInput = elements.quantityInput as HTMLInputElement;
      if (quantityInput) {
        const qty: number = parseInt(quantityInput.value);
        if (qty > 1) quantityInput.value = (qty - 1).toString();
      }
    });

    increaseBtn?.addEventListener("click", () => {
      const quantityInput = elements.quantityInput as HTMLInputElement;
      if (quantityInput) {
        const qty: number = parseInt(quantityInput.value);
        const max: number = parseInt(quantityInput.max);
        if (qty < max) quantityInput.value = (qty + 1).toString();
      }
    });

    // Image navigation
    elements.prevImageBtn?.addEventListener("click", () => {
      const prevIndex: number =
        currentImageIndex > 0
          ? currentImageIndex - 1
          : productImages.length - 1;
      selectImage(prevIndex);
    });

    elements.nextImageBtn?.addEventListener("click", () => {
      const nextIndex: number =
        currentImageIndex < productImages.length - 1
          ? currentImageIndex + 1
          : 0;
      selectImage(nextIndex);
    });

    // Add to cart - FIXED CART INTEGRATION
    elements.addToCartBtn?.addEventListener("click", () => {
      if (currentProduct && elements.quantityInput) {
        const quantity: number = parseInt(
          (elements.quantityInput as HTMLInputElement).value,
        );
        addToCart(currentProduct, quantity);
      }
    });

    // Wishlist
    elements.wishlistBtn?.addEventListener("click", () => {
      if (currentProduct) toggleWishlist(currentProduct);
    });

    // Share
    elements.shareBtn?.addEventListener("click", () => {
      if (currentProduct) shareProduct(currentProduct);
    });

    // Gallery trigger
    elements.galleryTrigger?.addEventListener("click", () => {
      window.open(productImages[currentImageIndex], "_blank");
    });
  }

  // FIXED CART INTEGRATION - Use Your Existing CartManager
  async function addToCart(product: Product, quantity: number): Promise<void> {
    const cartButton = elements.addToCartBtn as HTMLButtonElement;
    if (!cartButton) return;

    const originalText: string = cartButton.textContent || "Add to Cart";
    const originalClasses: string = cartButton.className;

    try {
      // Update button state
      cartButton.textContent = "Adding to Cart...";
      cartButton.disabled = true;
      cartButton.classList.add("opacity-75");

      // Wait for cart system to be ready
      if (typeof window.cartManager === "undefined") {
        await new Promise<void>((resolve) => {
          const checkCartSystem = () => {
            if (typeof window.cartManager !== "undefined") {
              resolve();
            } else {
              setTimeout(checkCartSystem, 100);
            }
          };
          checkCartSystem();
        });
      }

      // Check cart type compatibility
      const currentCart = window.cartManager.getCartData();
      if (currentCart && currentCart.items && currentCart.items.length > 0) {
        // Check for type conflict
        const hasConflict =
          (currentCart.is_digital_only &&
            product.product_type === "physical") ||
          (currentCart.has_physical_items &&
            product.product_type === "digital");

        if (hasConflict) {
          const currentType = currentCart.is_digital_only
            ? "digital products"
            : "physical products";
          const newType =
            product.product_type === "digital"
              ? "digital product"
              : "physical product";

          // Reset button
          cartButton.textContent = originalText;
          cartButton.disabled = false;
          cartButton.classList.remove("opacity-75");

          showCartTypeWarning(currentType, newType);
          return;
        }
      }

      // Add to cart using your existing method
      const result = await window.cartManager.addToCart(product, quantity);

      if (result.success) {
        // Success state
        cartButton.textContent = "âœ“ Added to Cart";
        cartButton.className = cartButton.className
          .replace("bg-blue-600", "bg-green-600")
          .replace("hover:bg-blue-700", "hover:bg-green-700");

        showNotification("Product added to cart successfully!", "success");

        // Reset button after 2 seconds
        setTimeout(() => {
          cartButton.textContent = originalText;
          cartButton.className = originalClasses;
          cartButton.disabled = false;
          cartButton.classList.remove("opacity-75");
        }, 2000);
      } else {
        // Error state
        cartButton.textContent = "Failed to Add";
        cartButton.className = cartButton.className
          .replace("bg-blue-600", "bg-red-600")
          .replace("hover:bg-blue-700", "hover:bg-red-700");

        showNotification(result.message || "Failed to add to cart", "error");

        // Reset button after 3 seconds
        setTimeout(() => {
          cartButton.textContent = originalText;
          cartButton.className = originalClasses;
          cartButton.disabled = false;
          cartButton.classList.remove("opacity-75");
        }, 3000);
      }
    } catch (error) {
      console.error("Add to cart error:", error);

      // Error state
      cartButton.textContent = "Failed to Add";
      cartButton.className = cartButton.className
        .replace("bg-blue-600", "bg-red-600")
        .replace("hover:bg-blue-700", "hover:bg-red-700");

      showNotification("Something went wrong. Please try again.", "error");

      // Reset button after 3 seconds
      setTimeout(() => {
        cartButton.textContent = originalText;
        cartButton.className = originalClasses;
        cartButton.disabled = false;
        cartButton.classList.remove("opacity-75");
      }, 3000);
    }
  }

  // Show cart type warning
  function showCartTypeWarning(
    currentTypeLabel: string,
    newTypeLabel: string,
  ): void {
    const message = `Cannot mix product types. Your cart currently contains ${currentTypeLabel}. Please checkout first or remove existing items to add this ${newTypeLabel}.`;

    showNotification(message, "warning");
    showInlineCartWarning(currentTypeLabel, newTypeLabel);
  }

  // Show inline cart warning on the product page
  function showInlineCartWarning(
    currentTypeLabel: string,
    newTypeLabel: string,
  ): void {
    // Remove existing warning
    const existingWarning = document.getElementById(
      "cart-compatibility-warning",
    );
    if (existingWarning) {
      existingWarning.remove();
    }

    const addToCartBtn = elements.addToCartBtn;
    if (!addToCartBtn) return;

    const warningDiv = document.createElement("div");
    warningDiv.id = "cart-compatibility-warning";
    warningDiv.className =
      "mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg";

    warningDiv.innerHTML = `
      <div class="flex items-start">
        <svg class="w-5 h-5 text-yellow-600 mt-0.5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
        </svg>
        <div>
          <h4 class="text-sm font-semibold text-yellow-800 mb-1">Cart Type Mismatch</h4>
          <p class="text-sm text-yellow-700">
            Your cart currently contains ${currentTypeLabel}. 
            This ${newTypeLabel} cannot be added to the same cart.
          </p>
          <div class="mt-3 flex space-x-2">
            <button 
              onclick="clearCartAndAdd()"
              class="text-xs bg-yellow-600 text-white hover:bg-yellow-700 px-3 py-1 rounded transition-colors"
            >
              Clear Cart & Add This Item
            </button>
            <a 
              href="/cart"
              class="text-xs bg-gray-600 text-white hover:bg-gray-700 px-3 py-1 rounded transition-colors"
            >
              View Current Cart
            </a>
          </div>
        </div>
      </div>
    `;

    // Insert warning before add to cart section
    const quantitySection = addToCartBtn.closest(".space-y-4");
    if (quantitySection) {
      quantitySection.insertBefore(warningDiv, quantitySection.firstChild);
    }
  }

  // Clear cart and add current product
  async function clearCartAndAdd(): Promise<void> {
    if (typeof window.cartManager === "undefined" || !currentProduct) return;

    const confirmation = confirm(
      "This will remove all items from your cart and add this product. Are you sure you want to continue?",
    );

    if (!confirmation) return;

    try {
      // Clear cart first
      const clearResult = await window.cartManager.clearCart();

      if (!clearResult.success) {
        showNotification("Failed to clear cart. Please try again.", "error");
        return;
      }

      // Remove compatibility warning
      const warningDiv = document.getElementById("cart-compatibility-warning");
      if (warningDiv) {
        warningDiv.remove();
      }

      // Add current product
      const quantityInput = elements.quantityInput as HTMLInputElement;
      const quantity = quantityInput ? parseInt(quantityInput.value) : 1;

      await addToCart(currentProduct, quantity);

      showNotification("Cart cleared and product added!", "success");
    } catch (error) {
      console.error("Error clearing cart and adding product:", error);
      showNotification("Something went wrong. Please try again.", "error");
    }
  }

  // Enhanced notification system
  function showNotification(
    message: string,
    type: "success" | "error" | "warning" = "success",
  ): void {
    // Remove existing notifications
    const existingNotifications =
      document.querySelectorAll(".cart-notification");
    existingNotifications.forEach((notification) => notification.remove());

    // Create notification element
    const notification = document.createElement("div");
    notification.className = `cart-notification fixed top-20 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 translate-x-full`;

    // Set colors based on type
    const colors = {
      success: "bg-green-500 text-white border-green-600",
      error: "bg-red-500 text-white border-red-600",
      warning: "bg-yellow-500 text-black border-yellow-600",
    };

    notification.className += ` ${colors[type]} border-l-4`;

    // Set content
    notification.innerHTML = `
      <div class="flex items-start">
        <div class="flex-1">
          <p class="text-sm font-medium">${message}</p>
        </div>
        <button class="ml-2 text-current opacity-70 hover:opacity-100" onclick="this.parentElement.parentElement.remove()">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;

    // Add to page
    document.body.appendChild(notification);

    // Animate in
    setTimeout(() => {
      notification.classList.remove("translate-x-full");
    }, 100);

    // Auto remove after 5 seconds
    setTimeout(() => {
      notification.classList.add("translate-x-full");
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 300);
    }, 5000);
  }

  // Make functions globally available
  (window as any).clearCartAndAdd = clearCartAndAdd;

  function toggleWishlist(product: Product): void {
    const button: HTMLElement | null = elements.wishlistBtn;
    if (!button) return;

    // Note: Wishlist functionality would need to be implemented in CartManager
    console.log("Wishlist toggle for product:", product.name);

    // Update button UI
    const isInWishlist: boolean = button.classList.contains("text-red-600");

    if (isInWishlist) {
      button.classList.remove("text-red-600", "bg-red-50");
      button.classList.add("text-gray-700");
      button.innerHTML = `
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
          </svg>
          Wishlist
        `;
    } else {
      button.classList.add("text-red-600", "bg-red-50");
      button.classList.remove("text-gray-700");
      button.innerHTML = `
          <svg class="w-5 h-5 mr-2" fill="currentColor" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
          </svg>
          In Wishlist
        `;
    }
  }

  function shareProduct(product: Product): void {
    if (navigator.share) {
      navigator.share({
        title: product.name,
        text: product.description,
        url: window.location.href,
      });
    } else {
      // Fallback to clipboard
      navigator.clipboard.writeText(window.location.href).then(() => {
        const button: HTMLElement | null = elements.shareBtn;
        if (!button) return;

        const originalText: string = button.innerHTML;
        button.innerHTML = `
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            Copied
          `;
        window.setTimeout(() => {
          button.innerHTML = originalText;
        }, 2000);
      });
    }
  }

  // Initialize everything
  document.addEventListener("DOMContentLoaded", () => {
    setupEventListeners();
    initializeProduct();
  });
</script>
