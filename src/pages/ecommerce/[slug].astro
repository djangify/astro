---
// src/pages/ecommerce/[slug].astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";

// Complete Product interface that matches Django model exactly
interface ProductData {
  // Required fields (no null/undefined in Django model)
  id: number; // CRITICAL: Required by cart API
  name: string;
  slug: string;
  price: number;
  product_type: "physical" | "digital";
  in_stock: boolean;
  stock_qty: number; // PositiveIntegerField, defaults to 0
  is_active: boolean; // Required by cart system

  // Optional fields (null=True, blank=True in Django)
  description?: string;
  sale_price?: number;
  main_image?: string;
  featured_image?: string;
  weight?: number;
  dimensions?: string;
  digital_file?: string;
  download_limit?: number;
  download_expiry_days?: number;
  is_featured?: boolean;
  requires_shipping?: boolean;

  // Relationships - category is ForeignKey (required) but API might not include it
  category?: {
    name: string;
    slug: string;
  };
  // images is ProductImage relationship
  images?: Array<{ image: string }>;
}

export async function getStaticPaths() {
  try {
    // Fetch products from your Django API
    const response = await fetch(
      "https://corrison.corrisonapi.com/api/v1/products/",
    );

    if (!response.ok) {
      console.warn("Failed to fetch products for static paths, using fallback");
      return [];
    }

    const data = await response.json();
    const products = data.results || data;

    // Generate paths for each product with FULL product data
    return products.map((product: ProductData) => ({
      params: { slug: product.slug },
      props: { product }, // Pass complete product data as props
    }));
  } catch (error) {
    console.warn("Error fetching products for static paths:", error);
    return [];
  }
}

// Type the props properly
interface Props {
  product: ProductData;
}

const { slug } = Astro.params;
const { product }: Props = Astro.props;

// Handle case where product might be undefined
if (!product) {
  return Astro.redirect("/404");
}

// Helper functions for server-side rendering
function getProductImageUrl(product: ProductData): string {
  const imageUrl = product.featured_image || product.main_image;
  if (
    !imageUrl ||
    imageUrl === "null" ||
    imageUrl === "" ||
    imageUrl === undefined
  ) {
    return "/images/placeholder.png";
  }
  return imageUrl;
}

function getProductImages(product: ProductData): string[] {
  const images = [];
  if (product.main_image) images.push(product.main_image);
  if (product.images && Array.isArray(product.images)) {
    images.push(
      ...product.images.map((img: any) =>
        typeof img === "object" ? img.image : img,
      ),
    );
  }
  return images.length > 0 ? images : ["/images/placeholder.png"];
}

// Pre-calculate ALL values for server-side rendering - NO CONDITIONALS IN TEMPLATE
// Using your exact Django field names
const currentPrice = product.sale_price || product.price;
const originalPrice = product.sale_price ? product.price : null;
const mainImageUrl = getProductImageUrl(product);
const productImages = getProductImages(product);
const isDigital = product.product_type === "digital";
const categoryName =
  typeof product.category === "object"
    ? product.category?.name
    : product.category || "";
const categorySlug =
  typeof product.category === "object" ? product.category?.slug : "";

// SEO meta tags
const metaTitle = `${product.name} â€“ Corrison Ecommerce`;
const metaDescription = product.description
  ? `${product.description.slice(0, 150)}...`
  : `${product.name} - Premium quality product with excellent features and value.`;
---

<BaseLayout>
  <Header slot="header" />
  <title slot="title">{metaTitle}</title>
  <meta slot="head" name="description" content={metaDescription} />
  <meta slot="head" property="og:title" content={metaTitle} />
  <meta slot="head" property="og:description" content={metaDescription} />
  <meta slot="head" property="og:image" content={mainImageUrl} />
  <meta slot="head" property="og:type" content="product" />
  <meta
    slot="head"
    property="product:price:amount"
    content={currentPrice.toString()}
  />
  <meta slot="head" property="product:price:currency" content="USD" />

  <div class="min-h-screen bg-gray-50">
    <!-- Product Content - NOW VISIBLE IMMEDIATELY -->
    <div id="product-content">
      <!-- Breadcrumb -->
      <nav class="bg-white border-b border-gray-200">
        <div class="container mx-auto px-4 py-4">
          <ol class="flex items-center space-x-2 text-sm">
            <li>
              <a href="/" class="text-gray-500 hover:text-gray-700">Home</a>
            </li>
            <li><span class="text-gray-300">/</span></li>
            <li>
              <a href="/ecommerce" class="text-gray-500 hover:text-gray-700"
                >Shop</a
              >
            </li>
            <li><span class="text-gray-300">/</span></li>
            <li>
              <a
                href="/ecommerce/products"
                class="text-gray-500 hover:text-gray-700">Products</a
              >
            </li>
            <li><span class="text-gray-300">/</span></li>
            <li class="text-gray-900 font-medium">{product.name}</li>
          </ol>
        </div>
      </nav>

      <div class="container mx-auto px-4 py-12">
        <div class="max-w-6xl mx-auto">
          <div class="lg:grid lg:grid-cols-2 gap-12 space-y-8 lg:space-y-0">
            <!-- Product Images -->
            <div class="space-y-4">
              <!-- Main Image -->
              <div
                class="relative bg-white rounded-xl overflow-hidden shadow-lg"
              >
                <img
                  id="main-image"
                  src={mainImageUrl}
                  alt={product.name}
                  class="w-full h-96 object-cover"
                  style="opacity:1;"
                />

                <!-- Product Type Badge -->
                <div class="absolute top-4 left-4">
                  <span
                    class="px-3 py-1 text-sm font-semibold rounded-full bg-blue-100 text-blue-800"
                    id="product-type-badge"
                  >
                    Physical Product
                  </span>
                </div>

                <!-- Sale Badge -->
                <div class="absolute top-4 right-4 hidden" id="sale-badge">
                  <span
                    class="px-3 py-1 text-sm font-bold bg-red-500 text-white rounded-full"
                  >
                    SALE
                  </span>
                </div>

                <!-- Image Navigation -->
                <div
                  id="image-nav"
                  class="absolute inset-y-0 left-0 right-0 flex items-center justify-between p-4 opacity-0 hover:opacity-100 transition-opacity"
                >
                  <button
                    id="prev-image"
                    class="bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-75 transition-all"
                  >
                    <svg
                      class="w-6 h-6"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 19l-7-7 7-7"></path>
                    </svg>
                  </button>
                  <button
                    id="next-image"
                    class="bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-75 transition-all"
                  >
                    <svg
                      class="w-6 h-6"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 5l7 7-7 7"></path>
                    </svg>
                  </button>
                </div>
              </div>

              <!-- Thumbnail Images -->
              <div id="thumbnail-container" class="grid grid-cols-4 gap-2">
                <!-- Thumbnails will be populated by JS -->
              </div>

              <!-- Product Gallery Modal Trigger -->
              <button
                id="gallery-trigger"
                class="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 py-3 px-4 rounded-lg transition-colors font-medium"
              >
                <svg
                  class="w-5 h-5 inline mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                  ></path>
                </svg>
                View Gallery
              </button>
            </div>

            <!-- Product Info -->
            <div class="space-y-6">
              <!-- Product Title & Category -->
              <div>
                <div id="category-tag" class="mb-2 hidden">
                  <span
                    class="inline-block bg-gray-100 text-gray-600 px-3 py-1 rounded-full text-sm font-medium"
                  >
                    Category
                  </span>
                </div>
                <h1 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
                  {product.name}
                </h1>
              </div>

              <!-- Price -->
              <div class="flex items-center space-x-4">
                <div>
                  <span class="text-4xl font-bold text-gray-900">
                    ${parseFloat(currentPrice.toString()).toFixed(2)}
                  </span>
                  <span
                    id="original-price"
                    class="text-2xl text-gray-500 line-through ml-3 hidden"
                  >
                    $0.00
                  </span>
                </div>
                <div id="savings-badge" class="hidden">
                  <span
                    class="bg-red-100 text-red-800 px-3 py-1 rounded-full text-sm font-semibold"
                  >
                    Save <span id="savings-amount">$0</span>
                  </span>
                </div>
              </div>

              <!-- Product Description -->
              <div class="prose prose-gray max-w-none">
                {
                  product.description ? (
                    <div
                      set:html={product.description}
                      class="text-lg text-gray-600 leading-relaxed"
                    />
                  ) : (
                    <p class="text-lg text-gray-600 leading-relaxed">
                      Premium quality product with excellent features and value.
                    </p>
                  )
                }
              </div>

              <!-- Cart Type Warning (Hidden by default) -->
              <div
                id="cart-type-warning"
                class="hidden mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg"
              >
                <div class="flex items-start">
                  <svg
                    class="w-5 h-5 text-yellow-600 mt-0.5 mr-3"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"
                    ></path>
                  </svg>
                  <div>
                    <h4 class="text-sm font-semibold text-yellow-800 mb-1">
                      Cart Type Mismatch
                    </h4>
                    <p
                      class="text-sm text-yellow-700"
                      id="cart-warning-message"
                    >
                      <!-- Warning message will be populated by JavaScript -->
                    </p>
                    <div class="mt-3 flex space-x-2">
                      <button
                        id="clear-cart-and-add"
                        class="text-xs bg-yellow-600 text-white hover:bg-yellow-700 px-3 py-1 rounded transition-colors"
                      >
                        Clear Cart & Add This Item
                      </button>
                      <a
                        href="/cart"
                        class="text-xs bg-gray-600 text-white hover:bg-gray-700 px-3 py-1 rounded transition-colors"
                      >
                        View Current Cart
                      </a>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Digital Product Info -->
              <div
                id="digital-info"
                class="bg-purple-50 border border-purple-200 rounded-lg p-4 hidden"
              >
                <div class="flex items-start">
                  <svg
                    class="w-6 h-6 text-purple-600 mt-1 mr-3"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"
                    ></path>
                  </svg>
                  <div>
                    <h4 class="font-semibold text-purple-900 mb-1">
                      Digital Download
                    </h4>
                    <p class="text-purple-700 text-sm">
                      Instant access after purchase. Download links valid for
                      <span id="download-days">30</span> days. Maximum <span
                        id="download-limit">5</span
                      > downloads allowed.
                    </p>
                  </div>
                </div>
              </div>

              <!-- Physical Product Info -->
              <div
                id="physical-info"
                class="bg-blue-50 border border-blue-200 rounded-lg p-4"
              >
                <div class="flex items-start">
                  <svg
                    class="w-6 h-6 text-blue-600 mt-1 mr-3"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
                    ></path>
                  </svg>
                  <div>
                    <h4 class="font-semibold text-blue-900 mb-1">
                      Physical Product
                    </h4>
                    <p class="text-blue-700 text-sm">
                      Ships within 1-2 business days. Free shipping on orders
                      over $50.
                    </p>
                    <div id="product-specs" class="mt-2 text-xs text-blue-600">
                      <!-- Product specs will be populated by JS -->
                    </div>
                  </div>
                </div>
              </div>

              <!-- Stock Status -->
              <div id="stock-status" class="flex items-center space-x-2">
                <div class="w-3 h-3 rounded-full bg-green-500"></div>
                <span class="text-sm font-medium text-green-600">
                  In Stock
                </span>
              </div>

              <!-- Quantity & Add to Cart -->
              <div class="space-y-4">
                <div class="flex items-center space-x-4">
                  <label class="text-sm font-medium text-gray-700"
                    >Quantity:</label
                  >
                  <div
                    class="flex items-center border border-gray-300 rounded-lg"
                  >
                    <button
                      id="decrease-qty"
                      class="px-3 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 transition-colors"
                    >
                      <svg
                        class="w-4 h-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M20 12H4"></path>
                      </svg>
                    </button>
                    <input
                      type="number"
                      id="quantity-input"
                      value="1"
                      min="1"
                      max="10"
                      class="w-16 px-3 py-2 text-center border-0 focus:ring-0"
                    />
                    <button
                      id="increase-qty"
                      class="px-3 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 transition-colors"
                    >
                      <svg
                        class="w-4 h-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                    </button>
                  </div>
                </div>

                <!-- Action Buttons -->
                <div class="space-y-3">
                  <button
                    id="add-to-cart-btn"
                    class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg"
                  >
                    <svg
                      class="w-5 h-5 inline mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 7m0 0l-1.5-5M7 13l-2-8m0 0h16m-7 4v8a2 2 0 01-2 2H9a2 2 0 01-2-2v-8a2 2 0 012-2h2a2 2 0 012 2z"
                      ></path>
                    </svg>
                    Add to Cart
                  </button>

                  <div class="grid grid-cols-2 gap-3">
                    <button
                      id="wishlist-btn"
                      class="flex items-center justify-center px-4 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                    >
                      <svg
                        class="w-5 h-5 mr-2"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                        ></path>
                      </svg>
                      Wishlist
                    </button>

                    <button
                      id="share-btn"
                      class="flex items-center justify-center px-4 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                    >
                      <svg
                        class="w-5 h-5 mr-2"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"
                        ></path>
                      </svg>
                      Share
                    </button>
                  </div>
                </div>
              </div>

              <!-- Trust Signals -->
              <div class="border-t pt-6">
                <div
                  class="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm text-gray-600"
                >
                  <div class="flex items-center">
                    <svg
                      class="w-5 h-5 text-green-500 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
                      ></path>
                    </svg>
                    Secure Payment
                  </div>
                  <div class="flex items-center">
                    <svg
                      class="w-5 h-5 text-blue-500 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"></path>
                    </svg>
                    Easy Returns
                  </div>
                  <div class="flex items-center">
                    <svg
                      class="w-5 h-5 text-purple-500 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M12 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      ></path>
                    </svg>
                    24/7 Support
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Related Products -->
          <section id="related-products" class="mt-20">
            <h2 class="text-2xl font-bold text-gray-900 mb-8">
              Related Products
            </h2>
            <div
              id="related-products-grid"
              class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"
            >
              <!-- Related products will be loaded here -->
            </div>
          </section>
        </div>
      </div>
    </div>

    <!-- Error State -->
    <div id="error-state" class="hidden container mx-auto px-4 py-16">
      <div class="max-w-lg mx-auto text-center">
        <div class="text-6xl mb-4">ðŸ˜ž</div>
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Product Not Found</h1>
        <p class="text-gray-600 mb-8">
          The product you're looking for doesn't exist or may have been removed.
        </p>
        <div class="space-x-4">
          <a
            href="/ecommerce/products"
            class="inline-block bg-blue-600 text-white hover:bg-blue-700 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Browse Products
          </a>
          <a
            href="/ecommerce"
            class="inline-block border border-gray-300 text-gray-700 hover:bg-gray-50 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Back to Shop
          </a>
        </div>
      </div>
    </div>
  </div>

  <Footer slot="footer" />
  <!-- Pass product data to JavaScript - FIXED -->
  <script is:inline define:vars={{ product }}>
    window.preloadedProduct = product;
    console.log("Product data set:", window.preloadedProduct);
  </script>

  <!-- Replace the existing script section at the bottom of [slug].astro with this: -->

  <!-- Pass product data to JavaScript -->
  <script is:inline define:vars={{ product }}>
    window.preloadedProduct = product;
    console.log("Product data set:", window.preloadedProduct);
  </script>

  <!-- Complete Product Detail JavaScript for Digital Products -->
  <script is:inline>
    (function () {
      "use strict";

      // Add modal styles
      const modalStyles = document.createElement("style");
      modalStyles.textContent = `
    #gallery-modal img {
      transition: opacity 0.15s ease-in-out;
    }
    .modal-thumb {
      transition: all 0.2s ease;
      opacity: 0.7;
    }
    .modal-thumb:hover {
      opacity: 1;
    }
    .modal-thumb.ring-2 {
      opacity: 1;
    }
    /* Hide scrollbar but keep functionality */
    #gallery-modal .overflow-x-auto {
      scrollbar-width: none;
      -ms-overflow-style: none;
    }
    #gallery-modal .overflow-x-auto::-webkit-scrollbar {
      display: none;
    }
  `;
      document.head.appendChild(modalStyles);

      // API Configuration
      const API_BASE = "https://corrison.corrisonapi.com/api/v1";

      // State
      let currentImageIndex = 0;
      let productImages = [];
      let isAuthenticated = false;

      // Auth Functions
      function getAuthToken() {
        try {
          return localStorage.getItem("access_token");
        } catch (e) {
          return null;
        }
      }

      function checkAuthentication() {
        const token = getAuthToken();
        isAuthenticated = !!token;
        return isAuthenticated;
      }

      // Cart Functions
      function getCartToken() {
        try {
          return localStorage.getItem("cart_token");
        } catch (e) {
          return null;
        }
      }

      function setCartToken(token) {
        try {
          if (token) localStorage.setItem("cart_token", token);
        } catch (e) {}
      }

      function makeHeaders(includeAuth = false) {
        const headers = { "Content-Type": "application/json" };

        if (includeAuth) {
          const authToken = getAuthToken();
          if (authToken) headers.Authorization = `Bearer ${authToken}`;
        } else {
          const cartToken = getCartToken();
          if (cartToken) headers.Authorization = `Bearer ${cartToken}`;
        }

        return headers;
      }

      function showNotification(message, isSuccess = true) {
        const notification = document.createElement("div");
        notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 16px 24px;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      z-index: 9999;
      animation: slideIn 0.3s ease-out;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    `;
        notification.style.backgroundColor = isSuccess ? "#10b981" : "#ef4444";
        notification.textContent = message;

        // Add animation
        const style = document.createElement("style");
        style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
      }
    `;
        if (!document.head.querySelector("style[data-notification]")) {
          style.setAttribute("data-notification", "");
          document.head.appendChild(style);
        }

        document.body.appendChild(notification);

        setTimeout(() => {
          notification.style.animation = "slideOut 0.3s ease-in";
          notification.style.animationFillMode = "forwards";
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification);
            }
          }, 300);
        }, 3000);
      }

      // Wishlist Functions (API-based for authenticated users)
      async function toggleWishlist(product) {
        if (!checkAuthentication()) {
          showNotification("Please login to add items to wishlist", false);
          // Redirect to auth login page (not /login)
          setTimeout(() => {
            window.location.href =
              "/auth/login?redirect=" +
              encodeURIComponent(window.location.pathname);
          }, 1500);
          return;
        }

        const wishlistBtn = document.getElementById("wishlist-btn");
        if (wishlistBtn) {
          wishlistBtn.disabled = true;
          wishlistBtn.innerHTML = `
        <svg class="animate-spin w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Processing...
      `;
        }

        try {
          // Use the correct wishlist endpoint
          const endpoint = `${API_BASE}/wishlist/`;

          // Check if item is already in wishlist
          const checkResponse = await fetch(endpoint, {
            headers: makeHeaders(true),
          });

          if (checkResponse.ok) {
            const wishlistData = await checkResponse.json();
            const wishlistItems = wishlistData.results || wishlistData || [];
            const wishlistItem = wishlistItems.find(
              (item) =>
                (item.product && item.product.id === product.id) ||
                item.product_id === product.id,
            );
            const isInWishlist = !!wishlistItem;

            if (isInWishlist) {
              // Remove from wishlist
              const removeResponse = await fetch(
                `${endpoint}${wishlistItem.id}/`,
                {
                  method: "DELETE",
                  headers: makeHeaders(true),
                },
              );

              if (removeResponse.ok) {
                showNotification("Removed from wishlist");
                updateWishlistButton(false);
              } else {
                throw new Error("Failed to remove from wishlist");
              }
            } else {
              // Add to wishlist - try different payload formats
              let addResponse = await fetch(endpoint, {
                method: "POST",
                headers: makeHeaders(true),
                body: JSON.stringify({ product: product.id }),
              });

              if (addResponse.ok) {
                showNotification("Added to wishlist!");
                updateWishlistButton(true);
              } else {
                const errorData = await addResponse.json();
                console.error("Wishlist add error:", errorData);
                throw new Error(
                  errorData.detail || "Failed to add to wishlist",
                );
              }
            }
          } else if (checkResponse.status === 401) {
            // Authentication required
            showNotification("Please login to use wishlist", false);
            setTimeout(() => {
              window.location.href =
                "/auth/login?redirect=" +
                encodeURIComponent(window.location.pathname);
            }, 1500);
          } else {
            throw new Error("Failed to access wishlist");
          }
        } catch (error) {
          console.error("Wishlist operation failed:", error);
          showNotification(error.message || "Failed to update wishlist", false);
        } finally {
          if (wishlistBtn) {
            wishlistBtn.disabled = false;
            updateWishlistButton();
          }
        }
      }

      async function checkWishlistStatus() {
        if (!checkAuthentication() || !window.preloadedProduct) return;

        try {
          const endpoint = `${API_BASE}/wishlist/`;
          const response = await fetch(endpoint, {
            headers: makeHeaders(true),
          });

          if (response.ok) {
            const data = await response.json();
            const wishlistItems = data.results || data || [];
            const isInWishlist = wishlistItems.some(
              (item) =>
                (item.product &&
                  item.product.id === window.preloadedProduct.id) ||
                item.product_id === window.preloadedProduct.id,
            );
            updateWishlistButton(isInWishlist);
          }
        } catch (error) {
          console.error("Failed to check wishlist status:", error);
        }
      }

      function updateWishlistButton(isInWishlist = false) {
        const btn = document.getElementById("wishlist-btn");
        if (!btn) return;

        if (!checkAuthentication()) {
          btn.innerHTML = `
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
        </svg>
        Login to Wishlist
      `;
          btn.classList.remove("bg-red-50", "border-red-300", "text-red-700");
          btn.classList.add("border-gray-300", "text-gray-700");
          return;
        }

        if (isInWishlist) {
          btn.innerHTML = `
        <svg class="w-5 h-5 mr-2 text-red-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
        </svg>
        In Wishlist
      `;
          btn.classList.add("bg-red-50", "border-red-300", "text-red-700");
          btn.classList.remove("border-gray-300", "text-gray-700");
        } else {
          btn.innerHTML = `
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
        </svg>
        Add to Wishlist
      `;
          btn.classList.remove("bg-red-50", "border-red-300", "text-red-700");
          btn.classList.add("border-gray-300", "text-gray-700");
        }
      }

      // Share Functions
      async function shareProduct(product) {
        const shareData = {
          title: product.name,
          text: `Check out ${product.name}`,
          url: window.location.href,
        };

        // Check if Web Share API is available
        if (navigator.share) {
          try {
            await navigator.share(shareData);
            showNotification("Shared successfully!");
          } catch (err) {
            if (err.name !== "AbortError") {
              copyToClipboard(window.location.href);
            }
          }
        } else {
          // Fallback to copy to clipboard
          copyToClipboard(window.location.href);
        }
      }

      function copyToClipboard(text) {
        const textarea = document.createElement("textarea");
        textarea.value = text;
        textarea.style.position = "fixed";
        textarea.style.opacity = "0";
        document.body.appendChild(textarea);
        textarea.select();

        try {
          document.execCommand("copy");
          showNotification("Link copied to clipboard!");
        } catch (err) {
          showNotification("Failed to copy link", false);
        }

        document.body.removeChild(textarea);
      }

      // Quantity Functions (simplified for digital products)
      function updateQuantity(change) {
        const input = document.getElementById("quantity-input");
        if (!input) return;

        let currentQty = parseInt(input.value) || 1;
        let newQty = currentQty + change;

        // Digital products typically allow any reasonable quantity
        const maxQty = 99;

        if (newQty < 1) newQty = 1;
        if (newQty > maxQty) newQty = maxQty;

        input.value = newQty;
      }

      // Image Gallery Functions
      function setupImageGallery() {
        const product = window.preloadedProduct;
        if (!product) return;

        // Collect all images
        productImages = [];

        // Add main image
        if (product.main_image && product.main_image !== "null") {
          productImages.push(product.main_image);
        }

        // Add featured image if different
        if (
          product.featured_image &&
          product.featured_image !== "null" &&
          product.featured_image !== product.main_image
        ) {
          productImages.push(product.featured_image);
        }

        // Add gallery images
        if (product.images && Array.isArray(product.images)) {
          product.images.forEach((img) => {
            const imageUrl = typeof img === "object" ? img.image : img;
            if (imageUrl && !productImages.includes(imageUrl)) {
              productImages.push(imageUrl);
            }
          });
        }

        // Use placeholder if no images
        if (productImages.length === 0) {
          productImages.push("/images/placeholder.png");
        }

        // Show/hide navigation based on image count
        const navElement = document.getElementById("image-nav");
        if (navElement) {
          navElement.style.display = productImages.length > 1 ? "flex" : "none";
        }

        // Create thumbnails
        createThumbnails();
      }

      function createThumbnails() {
        const container = document.getElementById("thumbnail-container");
        if (!container) return;

        container.innerHTML = "";

        productImages.forEach((image, index) => {
          const thumb = document.createElement("button");
          thumb.className = `relative overflow-hidden rounded-lg border-2 transition-all ${
            index === currentImageIndex
              ? "border-blue-500"
              : "border-gray-200 hover:border-gray-300"
          }`;
          thumb.innerHTML = `<img src="${image}" alt="Product thumbnail ${index + 1}" class="w-full h-20 object-cover">`;
          thumb.onclick = () => switchImage(index);
          container.appendChild(thumb);
        });
      }

      function switchImage(index) {
        if (index < 0 || index >= productImages.length) return;

        currentImageIndex = index;
        const mainImage = document.getElementById("main-image");
        if (mainImage) {
          mainImage.style.opacity = "0";
          setTimeout(() => {
            mainImage.src = productImages[index];
            mainImage.style.opacity = "1";
          }, 150);
        }

        createThumbnails();
      }

      function nextImage() {
        const nextIndex = (currentImageIndex + 1) % productImages.length;
        switchImage(nextIndex);
      }

      function prevImage() {
        const prevIndex =
          currentImageIndex === 0
            ? productImages.length - 1
            : currentImageIndex - 1;
        switchImage(prevIndex);
      }

      // Gallery Modal Functions - COMMENTED OUT FOR PDF PRODUCTS
      // Keeping this code for potential future use with other product types
      /*
  function openGalleryModal() {
    if (productImages.length === 0) return;

    // Create modal overlay
    const modal = document.createElement('div');
    modal.id = 'gallery-modal';
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90';
    modal.style.opacity = '0';
    modal.style.transition = 'opacity 0.3s ease-in-out';

    // Create modal content
    modal.innerHTML = `
      <div class="relative w-full h-full flex items-center justify-center p-4">
        <!-- Close button -->
        <button id="close-gallery" class="absolute top-4 right-4 text-white hover:text-gray-300 transition-colors z-10">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>

        <!-- Image counter -->
        <div class="absolute top-4 left-4 text-white text-sm font-medium">
          <span id="current-image-num">${currentImageIndex + 1}</span> / ${productImages.length}
        </div>

        <!-- Main image container -->
        <div class="relative max-w-5xl max-h-[90vh] w-full h-full flex items-center justify-center">
          <img id="modal-image" src="${productImages[currentImageIndex]}" 
               alt="${window.preloadedProduct?.name || 'Product image'}" 
               class="max-w-full max-h-full object-contain">
          
          <!-- Navigation arrows -->
          ${productImages.length > 1 ? `
            <button id="modal-prev" class="absolute left-4 top-1/2 -translate-y-1/2 bg-black bg-opacity-50 text-white p-3 rounded-full hover:bg-opacity-75 transition-all">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            <button id="modal-next" class="absolute right-4 top-1/2 -translate-y-1/2 bg-black bg-opacity-50 text-white p-3 rounded-full hover:bg-opacity-75 transition-all">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          ` : ''}
        </div>

        <!-- Thumbnail strip -->
        ${productImages.length > 1 ? `
          <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2 max-w-full overflow-x-auto p-2 bg-black bg-opacity-50 rounded-lg">
            ${productImages.map((img, index) => `
              <button class="modal-thumb ${index === currentImageIndex ? 'ring-2 ring-white' : ''}" data-index="${index}">
                <img src="${img}" alt="Thumbnail ${index + 1}" class="w-16 h-16 object-cover rounded">
              </button>
            `).join('')}
          </div>
        ` : ''}
      </div>
    `;

    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden'; // Prevent scrolling

    // Fade in
    setTimeout(() => {
      modal.style.opacity = '1';
    }, 10);

    // Add event listeners
    const closeBtn = document.getElementById('close-gallery');
    const modalPrev = document.getElementById('modal-prev');
    const modalNext = document.getElementById('modal-next');
    const modalImage = document.getElementById('modal-image');
    const imageNum = document.getElementById('current-image-num');

    // Close modal
    const closeModal = () => {
      modal.style.opacity = '0';
      setTimeout(() => {
        if (modal.parentNode) {
          modal.parentNode.removeChild(modal);
        }
        document.body.style.overflow = ''; // Restore scrolling
      }, 300);
    };

    closeBtn.addEventListener('click', closeModal);
    
    // Close on backdrop click
    modal.addEventListener('click', (e) => {
      if (e.target === modal) closeModal();
    });

    // Close on escape key
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        closeModal();
        document.removeEventListener('keydown', handleEscape);
      }
    };
    document.addEventListener('keydown', handleEscape);

    // Navigation in modal
    const switchModalImage = (index) => {
      currentImageIndex = index;
      modalImage.style.opacity = '0';
      setTimeout(() => {
        modalImage.src = productImages[index];
        modalImage.style.opacity = '1';
        imageNum.textContent = index + 1;
        
        // Update thumbnail selection
        document.querySelectorAll('.modal-thumb').forEach((thumb, i) => {
          if (i === index) {
            thumb.classList.add('ring-2', 'ring-white');
          } else {
            thumb.classList.remove('ring-2', 'ring-white');
          }
        });
      }, 150);
      
      // Also update main page
      switchImage(index);
    };

    if (modalPrev) {
      modalPrev.addEventListener('click', () => {
        const prevIndex = currentImageIndex === 0 ? productImages.length - 1 : currentImageIndex - 1;
        switchModalImage(prevIndex);
      });
    }

    if (modalNext) {
      modalNext.addEventListener('click', () => {
        const nextIndex = (currentImageIndex + 1) % productImages.length;
        switchModalImage(nextIndex);
      });
    }

    // Thumbnail clicks
    document.querySelectorAll('.modal-thumb').forEach(thumb => {
      thumb.addEventListener('click', () => {
        const index = parseInt(thumb.dataset.index);
        switchModalImage(index);
      });
    });

    // Keyboard navigation in modal
    const handleModalKeys = (e) => {
      if (productImages.length > 1) {
        if (e.key === 'ArrowLeft') {
          const prevIndex = currentImageIndex === 0 ? productImages.length - 1 : currentImageIndex - 1;
          switchModalImage(prevIndex);
        } else if (e.key === 'ArrowRight') {
          const nextIndex = (currentImageIndex + 1) % productImages.length;
          switchModalImage(nextIndex);
        }
      }
    };
    document.addEventListener('keydown', handleModalKeys);

    // Clean up keyboard listener on close
    const originalClose = closeModal;
    closeModal = () => {
      document.removeEventListener('keydown', handleModalKeys);
      originalClose();
    };
  }
  */

      // Related Products
      async function loadRelatedProducts() {
        const container = document.getElementById("related-products-grid");
        if (!container) return;

        try {
          const response = await fetch(
            `${API_BASE}/products/?product_type=digital&limit=4`,
          );
          if (!response.ok) throw new Error("Failed to fetch products");

          const data = await response.json();
          const products = data.results || data;

          // Filter out current product
          const relatedProducts = products.filter(
            (p) => p.slug !== window.preloadedProduct?.slug,
          );

          if (relatedProducts.length === 0) {
            container.innerHTML =
              '<p class="col-span-full text-center text-gray-500">No related products found</p>';
            return;
          }

          container.innerHTML = relatedProducts
            .slice(0, 4)
            .map(
              (product) => `
        <a href="/ecommerce/${product.slug}" class="group block">
          <div class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow overflow-hidden">
            <div class="relative aspect-square overflow-hidden">
              <img 
                src="${product.featured_image || product.main_image || "/images/placeholder.png"}" 
                alt="${product.name}"
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              >
              ${
                product.sale_price
                  ? `
                <span class="absolute top-2 right-2 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded">
                  SALE
                </span>
              `
                  : ""
              }
              <span class="absolute top-2 left-2 bg-purple-600 text-white text-xs font-bold px-2 py-1 rounded">
                Digital
              </span>
            </div>
            <div class="p-4">
              <h3 class="font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                ${product.name}
              </h3>
              <div class="flex items-center space-x-2">
                <span class="text-lg font-bold text-gray-900">
                  $${(product.sale_price || product.price).toFixed(2)}
                </span>
                ${
                  product.sale_price
                    ? `
                  <span class="text-sm text-gray-500 line-through">
                    $${product.price.toFixed(2)}
                  </span>
                `
                    : ""
                }
              </div>
            </div>
          </div>
        </a>
      `,
            )
            .join("");
        } catch (error) {
          console.error("Failed to load related products:", error);
          container.innerHTML =
            '<p class="col-span-full text-center text-gray-500">Unable to load related products</p>';
        }
      }

      // Update Product Display (Digital Products Focus)
      function updateProductDisplay() {
        const product = window.preloadedProduct;
        if (!product) return;

        // Update category
        const categoryTag = document.getElementById("category-tag");
        if (categoryTag && product.category) {
          categoryTag.classList.remove("hidden");
          categoryTag.querySelector("span").textContent =
            typeof product.category === "object"
              ? product.category.name
              : product.category;
        }

        // Update product type badge (always digital)
        const typeBadge = document.getElementById("product-type-badge");
        if (typeBadge) {
          typeBadge.textContent = "Digital Download";
          typeBadge.classList.add("bg-purple-100", "text-purple-800");
          typeBadge.classList.remove("bg-blue-100", "text-blue-800");
        }

        // Update sale badge
        const saleBadge = document.getElementById("sale-badge");
        if (saleBadge && product.sale_price) {
          saleBadge.classList.remove("hidden");
        }

        // Update price display
        if (product.sale_price) {
          const originalPriceEl = document.getElementById("original-price");
          const savingsBadge = document.getElementById("savings-badge");
          const savingsAmount = document.getElementById("savings-amount");

          if (originalPriceEl) {
            originalPriceEl.textContent = `$${product.price.toFixed(2)}`;
            originalPriceEl.classList.remove("hidden");
          }

          if (savingsBadge && savingsAmount) {
            const savings = product.price - product.sale_price;
            savingsAmount.textContent = `$${savings.toFixed(2)}`;
            savingsBadge.classList.remove("hidden");
          }
        }

        // Show digital info, hide physical info
        const digitalInfo = document.getElementById("digital-info");
        const physicalInfo = document.getElementById("physical-info");

        if (digitalInfo) digitalInfo.classList.remove("hidden");
        if (physicalInfo) physicalInfo.classList.add("hidden");

        // Update digital info
        const downloadDays = document.getElementById("download-days");
        const downloadLimit = document.getElementById("download-limit");
        if (downloadDays)
          downloadDays.textContent = product.download_expiry_days || 30;
        if (downloadLimit)
          downloadLimit.textContent = product.download_limit || 5;

        // Hide stock status completely for digital products
        const stockStatus = document.getElementById("stock-status");
        if (stockStatus) {
          stockStatus.classList.add("hidden");
        }
      }

      // Cart Functions (Simplified for Digital Products)
      async function addToCart(product, quantity) {
        const qty = parseInt(quantity) || 1;
        const productId = parseInt(product.id);

        if (!productId || isNaN(productId)) {
          showNotification("Invalid product ID", false);
          return;
        }

        const addBtn = document.getElementById("add-to-cart-btn");
        if (addBtn) {
          addBtn.disabled = true;
          addBtn.innerHTML = `
        <svg class="animate-spin w-5 h-5 inline mr-2" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Adding...
      `;
        }

        try {
          const response = await fetch(`${API_BASE}/items/`, {
            method: "POST",
            headers: makeHeaders(),
            body: JSON.stringify({ product: productId, quantity: qty }),
          });

          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.detail || "Failed to add to cart");
          }

          const data = await response.json();

          if (data.cart_token) setCartToken(data.cart_token);

          showNotification(`Added ${qty} ${product.name} to cart!`);

          // Update button
          if (addBtn) {
            addBtn.innerHTML = `
          <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 24 24">
            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
          </svg>
          Added to Cart!
        `;
            addBtn.classList.add("bg-green-600", "hover:bg-green-700");

            setTimeout(() => {
              addBtn.disabled = false;
              addBtn.innerHTML = `
            <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 7m0 0l-1.5-5M7 13l-2-8m0 0h16m-7 4v8a2 2 0 01-2 2H9a2 2 0 01-2-2v-8a2 2 0 012-2h2a2 2 0 012 2z"></path>
            </svg>
            Add to Cart
          `;
              addBtn.classList.remove("bg-green-600", "hover:bg-green-700");
            }, 2000);
          }

          // Notify cart icon to update
          window.dispatchEvent(new CustomEvent("cartUpdated"));
        } catch (error) {
          console.error("Add to cart failed:", error);
          showNotification(error.message || "Failed to add to cart", false);

          if (addBtn) {
            addBtn.disabled = false;
            addBtn.innerHTML = `
          <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 7m0 0l-1.5-5M7 13l-2-8m0 0h16m-7 4v8a2 2 0 01-2 2H9a2 2 0 01-2-2v-8a2 2 0 012-2h2a2 2 0 012 2z"></path>
          </svg>
          Add to Cart
        `;
          }
        }
      }

      // Initialize
      function init() {
        console.log("Initializing digital product detail page");

        // Check authentication status
        checkAuthentication();

        // Setup event listeners
        const wishlistBtn = document.getElementById("wishlist-btn");
        if (wishlistBtn && window.preloadedProduct) {
          wishlistBtn.addEventListener("click", () =>
            toggleWishlist(window.preloadedProduct),
          );
          // Check if product is already in wishlist
          checkWishlistStatus();
        }

        const shareBtn = document.getElementById("share-btn");
        if (shareBtn && window.preloadedProduct) {
          shareBtn.addEventListener("click", () =>
            shareProduct(window.preloadedProduct),
          );
        }

        const decreaseBtn = document.getElementById("decrease-qty");
        const increaseBtn = document.getElementById("increase-qty");
        if (decreaseBtn)
          decreaseBtn.addEventListener("click", () => updateQuantity(-1));
        if (increaseBtn)
          increaseBtn.addEventListener("click", () => updateQuantity(1));

        // Quantity input validation
        const qtyInput = document.getElementById("quantity-input");
        if (qtyInput) {
          qtyInput.addEventListener("input", (e) => {
            let value = parseInt(e.target.value);

            if (isNaN(value) || value < 1) {
              e.target.value = 1;
            } else if (value > 99) {
              e.target.value = 99;
            }
          });
        }

        // Enhanced add to cart with quantity
        const addToCartBtn = document.getElementById("add-to-cart-btn");
        if (addToCartBtn && window.preloadedProduct) {
          // Remove old listener and add new one
          const newBtn = addToCartBtn.cloneNode(true);
          addToCartBtn.parentNode.replaceChild(newBtn, addToCartBtn);

          newBtn.addEventListener("click", (e) => {
            e.preventDefault();
            const qty = qtyInput ? qtyInput.value : 1;
            addToCart(window.preloadedProduct, qty);
          });
        }

        // Image gallery
        setupImageGallery();

        const prevBtn = document.getElementById("prev-image");
        const nextBtn = document.getElementById("next-image");
        if (prevBtn) prevBtn.addEventListener("click", prevImage);
        if (nextBtn) nextBtn.addEventListener("click", nextImage);

        // Gallery modal trigger - COMMENTED OUT FOR PDF PRODUCTS
        /*
    const galleryTrigger = document.getElementById('gallery-trigger');
    if (galleryTrigger) {
      galleryTrigger.addEventListener('click', () => {
        openGalleryModal();
      });
    }
    */

        // Update product display for digital products
        updateProductDisplay();

        // Hide gallery button for digital/PDF products
        const galleryTrigger = document.getElementById("gallery-trigger");
        if (galleryTrigger) {
          galleryTrigger.style.display = "none";
        }

        // Load related products
        loadRelatedProducts();

        // Keyboard navigation for images
        document.addEventListener("keydown", (e) => {
          if (productImages.length > 1) {
            if (e.key === "ArrowLeft") prevImage();
            if (e.key === "ArrowRight") nextImage();
          }
        });
      }

      // Start when DOM is ready
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", init);
      } else {
        init();
      }
    })();
  </script>
</BaseLayout>
