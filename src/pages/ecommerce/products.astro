---
// src/pages/ecommerce/products.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";

// SERVER-SIDE DATA FETCHING FOR SEO
let products = [];
let categories = [];
let initialProductsCount = 0;

try {
  // Fetch products and categories server-side for SEO
  const [productsResponse, categoriesResponse] = await Promise.all([
    fetch("https://corrison.corrisonapi.com/api/v1/products/"),
    fetch("https://corrison.corrisonapi.com/api/v1/categories/"),
  ]);

  if (productsResponse.ok) {
    const productsData = await productsResponse.json();
    products = productsData.results || productsData;
    initialProductsCount = productsData.count || products.length;
  }

  if (categoriesResponse.ok) {
    const categoriesData = await categoriesResponse.json();
    categories = categoriesData.results || categoriesData;
  }
} catch (error) {
  console.warn("Failed to fetch data server-side:", error);
  // Will fall back to client-side loading
}

// Helper function for server-side rendering
function getProductImageUrl(product: any): string {
  const imageUrl = product.featured_image || product.main_image;
  if (
    !imageUrl ||
    imageUrl === "null" ||
    imageUrl === "" ||
    imageUrl === undefined
  ) {
    return "/static/images/placeholder.png";
  }
  return imageUrl;
}

// SEO meta information
const metaTitle = "Products – Corrison Ecommerce";
const metaDescription =
  "Browse our complete product catalog with advanced filtering, search, and sorting options. Discover both physical and digital products.";
---

<BaseLayout>
  <Header slot="header" />
  <title slot="title">{metaTitle}</title>
  <meta slot="head" name="description" content={metaDescription} />
  <meta slot="head" property="og:title" content={metaTitle} />
  <meta slot="head" property="og:description" content={metaDescription} />
  <meta slot="head" property="og:type" content="website" />

  <div class="min-h-screen bg-gray-50">
    <!-- Header Section -->
    <section class="bg-white border-b border-gray-200">
      <div class="container mx-auto px-4 py-8">
        <div
          class="flex flex-col lg:flex-row lg:items-center lg:justify-between"
        >
          <div>
            <h1 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-2">
              Product Catalog
            </h1>
            <p class="text-gray-600">
              Discover our complete collection of products
            </p>
          </div>

          <!-- Search Bar -->
          <div class="mt-4 lg:mt-0 lg:max-w-md lg:flex-1 lg:ml-8">
            <div class="relative">
              <input
                type="text"
                id="search-input"
                placeholder="Search products..."
                class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <div
                class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
              >
                <svg
                  class="h-5 w-5 text-gray-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
              <button
                id="clear-search"
                class="absolute inset-y-0 right-0 pr-3 flex items-center"
              >
                <svg
                  class="h-5 w-5 text-gray-400 hover:text-gray-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>

    <div class="container mx-auto px-4 py-8">
      <div class="flex flex-col lg:flex-row gap-8">
        <!-- Sidebar Filters -->
        <aside class="lg:w-64 flex-shrink-0">
          <div
            class="bg-white rounded-lg shadow-sm border border-gray-200 sticky top-4"
          >
            <div class="p-6">
              <div class="flex items-center justify-between mb-6">
                <h3 class="text-lg font-semibold text-gray-900">Filters</h3>
                <button
                  id="clear-filters"
                  class="text-sm text-blue-600 hover:text-blue-700 font-medium hidden"
                >
                  Clear All
                </button>
              </div>

              <!-- Category Filter - SERVER-SIDE RENDERED -->
              <div class="mb-6">
                <h4 class="font-medium text-gray-900 mb-3">Category</h4>
                <div id="category-filters" class="space-y-2">
                  {
                    categories.length > 0 ? (
                      <>
                        <label class="flex items-center group cursor-pointer">
                          <input
                            type="radio"
                            name="category"
                            value=""
                            class="text-blue-600 focus:ring-blue-500"
                            checked
                          />
                          <span class="ml-2 text-gray-700 group-hover:text-blue-600 transition-colors font-medium">
                            All Categories
                          </span>
                        </label>
                        {categories.map((category: any) => (
                          <label class="flex items-center group cursor-pointer">
                            <input
                              type="radio"
                              name="category"
                              value={category.slug}
                              class="text-blue-600 focus:ring-blue-500"
                            />
                            <span class="ml-2 text-gray-700 group-hover:text-blue-600 transition-colors">
                              {category.name}
                            </span>
                          </label>
                        ))}
                      </>
                    ) : (
                      <div class="animate-pulse">
                        <div class="h-4 bg-gray-200 rounded w-3/4 mb-2" />
                        <div class="h-4 bg-gray-200 rounded w-1/2 mb-2" />
                        <div class="h-4 bg-gray-200 rounded w-2/3" />
                      </div>
                    )
                  }
                </div>
              </div>

              <!-- Sort By Filter -->
              <div class="mb-6">
                <h4 class="font-medium text-gray-900 mb-3">Sort By</h4>
                <select
                  id="sort-select"
                  class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="-created_at">Newest First</option>
                  <option value="created_at">Oldest First</option>
                  <option value="name">Name A-Z</option>
                  <option value="-name">Name Z-A</option>
                  <option value="price">Price Low to High</option>
                  <option value="-price">Price High to Low</option>
                </select>
              </div>

              <!-- Price Range Filter -->
              <div class="mb-6">
                <h4 class="font-medium text-gray-900 mb-3">Price Range</h4>
                <div class="space-y-3">
                  <div class="flex space-x-2">
                    <input
                      type="number"
                      id="min-price"
                      placeholder="Min"
                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                    <input
                      type="number"
                      id="max-price"
                      placeholder="Max"
                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                  <button
                    id="apply-price-filter"
                    class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
                  >
                    Apply
                  </button>
                </div>
              </div>

              <!-- Sale Items Filter -->
              <div class="mb-6">
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    id="on-sale"
                    class="text-blue-600 focus:ring-blue-500"
                  />
                  <span class="ml-2 text-gray-700">On Sale</span>
                </label>
              </div>

              <!-- In Stock Filter -->
              <div class="mb-6">
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    id="in-stock"
                    class="text-blue-600 focus:ring-blue-500"
                  />
                  <span class="ml-2 text-gray-700">In Stock</span>
                </label>
              </div>
            </div>
          </div>
        </aside>

        <!-- Main Content -->
        <main class="flex-1">
          <!-- Results Count - SERVER-SIDE RENDERED -->
          <div class="mb-6">
            <div class="flex items-center space-x-4">
              <span id="results-count" class="text-gray-600">
                {
                  initialProductsCount === 1
                    ? "1 product found"
                    : `${initialProductsCount} products found`
                }
              </span>
              <div id="active-filters" class="flex flex-wrap gap-2">
                <!-- Active filter tags will appear here -->
              </div>
            </div>
          </div>

          <!-- Loading State (Only shows during client-side filtering) -->
          <div id="products-loading" class="hidden text-center py-16">
            <div
              class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"
            >
            </div>
            <p class="text-gray-600">Loading products...</p>
          </div>

          <!-- Products Grid - SERVER-SIDE RENDERED INITIAL CONTENT -->
          <div id="products-container">
            <div
              id="products-grid"
              class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6"
            >
              {
                products.length > 0 ? (
                  products.slice(0, 12).map((product: any) => {
                    const imageUrl = getProductImageUrl(product);
                    const price = product.sale_price || product.price;
                    const originalPrice = product.sale_price
                      ? product.price
                      : null;

                    return (
                      <div
                        class="group bg-white rounded-2xl overflow-hidden shadow-sm border border-gray-200 hover:shadow-xl cursor-pointer"
                        onclick={`window.location.href='/ecommerce/${product.slug}'`}
                      >
                        <div class="relative h-48">
                          <img
                            src={imageUrl}
                            alt={product.name}
                            class="w-full h-full object-cover"
                            onerror="this.src='/static/images/placeholder.png'"
                            loading="lazy"
                          />

                          <div class="absolute top-4 left-4">
                            <span
                              class={`px-3 py-1 text-xs font-semibold rounded-full ${
                                product.product_type === "digital"
                                  ? "bg-purple-100 text-purple-800"
                                  : "bg-blue-100 text-blue-800"
                              }`}
                            >
                              {product.product_type === "digital"
                                ? "Digital"
                                : "Physical"}
                            </span>
                          </div>

                          {originalPrice && (
                            <div class="absolute top-4 right-4">
                              <span class="px-3 py-1 text-xs font-bold bg-red-500 text-white rounded-full">
                                SALE
                              </span>
                            </div>
                          )}

                          <div class="absolute inset-0 bg-transparent group-hover:bg-black group-hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center pointer-events-none group-hover:pointer-events-auto">
                            <div class="opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-auto">
                              <button class="bg-white text-gray-900 px-4 py-2 rounded-full font-semibold hover:bg-gray-100 transition-colors mr-2">
                                View Details
                              </button>
                              <button class="bg-blue-600 text-white px-4 py-2 rounded-full font-semibold hover:bg-blue-700 transition-colors">
                                Add to Cart
                              </button>
                            </div>
                          </div>
                        </div>

                        <div class="p-6">
                          <h3 class="font-bold text-lg text-gray-900 group-hover:text-blue-600 transition-colors mb-2">
                            {product.name}
                          </h3>
                          <p class="text-gray-600 text-sm mb-4 line-clamp-2">
                            {product.description ||
                              "Premium quality product with excellent features and value."}
                          </p>
                          <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                              <span class="text-xl font-bold text-gray-900">
                                ${parseFloat(price.toString()).toFixed(2)}
                              </span>
                              {originalPrice && (
                                <span class="text-sm text-gray-500 line-through">
                                  $
                                  {parseFloat(originalPrice.toString()).toFixed(
                                    2,
                                  )}
                                </span>
                              )}
                            </div>
                            {product.category && (
                              <span class="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
                                {typeof product.category === "object"
                                  ? product.category.name
                                  : product.category}
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })
                ) : (
                  <div class="col-span-full text-center py-16">
                    <div class="text-6xl mb-4">🛒</div>
                    <h3 class="text-2xl font-bold text-gray-900 mb-4">
                      No Products Available
                    </h3>
                    <p class="text-gray-600 mb-6">
                      Products will appear here when the backend is connected.
                    </p>
                  </div>
                )
              }
            </div>

            <!-- Pagination - Will be managed by JavaScript -->
            <div id="pagination-container" class="mt-12">
              {
                products.length > 12 && (
                  <div class="flex items-center justify-between">
                    <div class="text-sm text-gray-700">
                      Showing <span class="font-medium">1</span> to{" "}
                      <span class="font-medium">
                        {Math.min(12, products.length)}
                      </span>{" "}
                      of <span class="font-medium">{initialProductsCount}</span>{" "}
                      results
                    </div>
                    <div class="flex items-center space-x-1">
                      <button
                        class="px-3 py-2 text-sm font-medium rounded-md text-gray-400 cursor-not-allowed"
                        disabled
                      >
                        ← Previous
                      </button>
                      <button class="px-3 py-2 text-sm font-medium rounded-md bg-blue-600 text-white">
                        1
                      </button>
                      {Math.ceil(initialProductsCount / 12) > 1 && (
                        <button
                          class="px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-blue-600 hover:bg-blue-50"
                          onclick="goToPage(2)"
                        >
                          Next →
                        </button>
                      )}
                    </div>
                  </div>
                )
              }
            </div>
          </div>

          <!-- Empty State -->
          <div id="empty-state" class="hidden text-center py-16">
            <div class="text-6xl mb-4">🛒</div>
            <h3 class="text-2xl font-bold text-gray-900 mb-4">
              No Products Found
            </h3>
            <p class="text-gray-600 mb-6">
              Try adjusting your filters or search terms to find what you're
              looking for.
            </p>
            <button
              id="reset-filters"
              class="bg-blue-600 text-white hover:bg-blue-700 font-medium px-6 py-3 rounded-lg transition-colors"
            >
              Reset Filters
            </button>
          </div>

          <!-- Error State -->
          <div id="error-state" class="hidden text-center py-16">
            <div class="text-6xl mb-4">⚠️</div>
            <h3 class="text-2xl font-bold text-gray-900 mb-4">
              Unable to Load Products
            </h3>
            <p class="text-gray-600 mb-6">
              We're having trouble connecting to our product catalog. Please try
              again later.
            </p>
            <button
              id="retry-loading"
              class="bg-blue-600 text-white hover:bg-blue-700 font-medium px-6 py-3 rounded-lg transition-colors"
            >
              Try Again
            </button>
          </div>
        </main>
      </div>
    </div>
  </div>

  <Footer slot="footer" />
</BaseLayout>

<!-- Pass preloaded data to JavaScript -->
<script is:inline define:vars={{ products, categories, initialProductsCount }}>
  window.preloadedProducts = products;
  window.preloadedCategories = categories;
  window.initialProductsCount = initialProductsCount;
</script>

<script>
  // ALL EXISTING JAVASCRIPT FUNCTIONALITY REMAINS EXACTLY THE SAME
  // Define types
  interface Product {
    slug: string;
    name: string;
    description?: string;
    price: number;
    sale_price?: number;
    main_image?: string;
    featured_image?: string;
    product_type: "digital" | "physical";
    category?: {
      name: string;
      slug: string;
    };
  }

  interface Category {
    slug: string;
    name: string;
    description?: string;
  }

  interface ApiResponse<T> {
    results?: T[];
    count?: number;
  }

  interface Filters {
    search: string;
    category: string;
    min_price: string;
    max_price: string;
    on_sale: boolean;
    in_stock: boolean;
    ordering: string;
  }

  interface Elements {
    [key: string]: HTMLElement | null;
  }

  interface FilterRemoveFunction {
    (): void;
  }

  interface FilterObject {
    label: string;
    remove: FilterRemoveFunction;
  }

  // Global state
  let currentPage: number = 1;
  let totalPages: number = 1;
  let currentFilters: Filters = {
    search: "",
    category: "",
    min_price: "",
    max_price: "",
    on_sale: false,
    in_stock: false,
    ordering: "-created_at",
  };

  const API_BASE_URL: string = "https://corrison.corrisonapi.com/api/v1";

  // DOM elements
  const elements: Elements = {
    searchInput: document.getElementById("search-input"),
    clearSearch: document.getElementById("clear-search"),
    categoryFilters: document.getElementById("category-filters"),
    minPrice: document.getElementById("min-price"),
    maxPrice: document.getElementById("max-price"),
    applyPriceFilter: document.getElementById("apply-price-filter"),
    onSale: document.getElementById("on-sale"),
    inStock: document.getElementById("in-stock"),
    clearFilters: document.getElementById("clear-filters"),
    resultsCount: document.getElementById("results-count"),
    activeFilters: document.getElementById("active-filters"),
    sortSelect: document.getElementById("sort-select"),
    productsLoading: document.getElementById("products-loading"),
    productsContainer: document.getElementById("products-container"),
    productsGrid: document.getElementById("products-grid"),
    paginationContainer: document.getElementById("pagination-container"),
    emptyState: document.getElementById("empty-state"),
    errorState: document.getElementById("error-state"),
    resetFilters: document.getElementById("reset-filters"),
    retryLoading: document.getElementById("retry-loading"),
  };

  // Store the last loaded products
  let lastLoadedProducts: Product[] = [];

  // Initialize with server-rendered data
  function initializeWithServerData(): void {
    const preloadedProducts = (window as any).preloadedProducts || [];
    const preloadedCategories = (window as any).preloadedCategories || [];

    lastLoadedProducts = preloadedProducts;

    // Setup category filters if not already rendered
    if (preloadedCategories.length > 0) {
      setupCategoryEventListeners();
    }

    // Calculate pagination
    const totalCount =
      (window as any).initialProductsCount || preloadedProducts.length;
    totalPages = Math.ceil(totalCount / 12);
  }

  // Utility functions
  function debounce(func: Function, wait: number): Function {
    let timeout: number | undefined;
    return function executedFunction(...args: any[]) {
      const later = () => {
        if (timeout) clearTimeout(timeout);
        func(...args);
      };
      if (timeout) clearTimeout(timeout);
      timeout = window.setTimeout(later, wait);
    };
  }

  function updateURL(): void {
    const params: URLSearchParams = new URLSearchParams();
    Object.entries(currentFilters).forEach(([key, value]) => {
      if (value) params.set(key, value.toString());
    });
    if (currentPage > 1) params.set("page", currentPage.toString());

    const newURL: string = `${window.location.pathname}?${params.toString()}`;
    window.history.replaceState({}, "", newURL);
  }

  function parseURLParams(): void {
    const params: URLSearchParams = new URLSearchParams(window.location.search);

    currentFilters.search = params.get("search") || "";
    currentFilters.category = params.get("category") || "";
    currentFilters.min_price = params.get("min_price") || "";
    currentFilters.max_price = params.get("max_price") || "";
    currentFilters.on_sale = params.get("on_sale") === "true";
    currentFilters.in_stock = params.get("in_stock") === "true";
    currentFilters.ordering = params.get("ordering") || "-created_at";
    currentPage = parseInt(params.get("page") || "1");

    // Update form elements
    if (elements.searchInput)
      (elements.searchInput as HTMLInputElement).value = currentFilters.search;
    if (elements.minPrice)
      (elements.minPrice as HTMLInputElement).value = currentFilters.min_price;
    if (elements.maxPrice)
      (elements.maxPrice as HTMLInputElement).value = currentFilters.max_price;
    if (elements.onSale)
      (elements.onSale as HTMLInputElement).checked = currentFilters.on_sale;
    if (elements.inStock)
      (elements.inStock as HTMLInputElement).checked = currentFilters.in_stock;
    if (elements.sortSelect)
      (elements.sortSelect as HTMLSelectElement).value =
        currentFilters.ordering;
  }

  // API functions
  async function fetchProducts(): Promise<ApiResponse<Product>> {
    try {
      const params: URLSearchParams = new URLSearchParams();

      if (currentFilters.search) params.append("search", currentFilters.search);
      if (currentFilters.category)
        params.append("category", currentFilters.category);
      if (currentFilters.min_price)
        params.append("min_price", currentFilters.min_price);
      if (currentFilters.max_price)
        params.append("max_price", currentFilters.max_price);
      if (currentFilters.on_sale) params.append("on_sale", "true");
      if (currentFilters.in_stock) params.append("in_stock", "true");
      if (currentFilters.ordering)
        params.append("ordering", currentFilters.ordering);

      params.append("page", currentPage.toString());
      params.append("limit", "12");

      const response: Response = await fetch(
        `${API_BASE_URL}/products/?${params.toString()}`,
      );

      if (!response.ok) throw new Error("Failed to fetch products");

      return await response.json();
    } catch (error) {
      console.error("Error fetching products:", error);
      throw error;
    }
  }

  async function fetchCategories(): Promise<ApiResponse<Category>> {
    try {
      const response: Response = await fetch(`${API_BASE_URL}/categories/`);
      if (!response.ok) throw new Error("Failed to fetch categories");
      return await response.json();
    } catch (error) {
      console.error("Error fetching categories:", error);
      return { results: [] };
    }
  }

  // Render functions
  function renderProducts(products: Product[]): void {
    if (!products || products.length === 0) {
      elements.productsContainer?.classList.add("hidden");
      elements.emptyState?.classList.remove("hidden");
      return;
    }

    // Helper function to get safe image URL using your local placeholder
    function getProductImageUrl(product: Product): string {
      const imageUrl: string | undefined =
        product.featured_image || product.main_image;
      if (
        !imageUrl ||
        imageUrl === "null" ||
        imageUrl === "" ||
        imageUrl === undefined
      ) {
        return "/static/images/placeholder.png";
      }
      return imageUrl;
    }

    elements.emptyState?.classList.add("hidden");
    elements.productsContainer?.classList.remove("hidden");

    if (elements.productsGrid) {
      elements.productsGrid.innerHTML = products
        .map((product: Product) => {
          const imageUrl: string = getProductImageUrl(product);
          const price: number = product.sale_price || product.price;
          const originalPrice: number | null = product.sale_price
            ? product.price
            : null;

          return `
            <div class="group bg-white rounded-2xl overflow-hidden shadow-sm border border-gray-200 hover:shadow-xl cursor-pointer"
                 onclick="window.location.href='/ecommerce/${product.slug}'">
              <div class="relative h-48">
                <img 
                  src="${imageUrl}" 
                  alt="${product.name}" 
                  class="w-full h-full object-cover"
                  onerror="this.src='/static/images/placeholder.png'"
                  loading="lazy"
                >
                
                <div class="absolute top-4 left-4">
                  <span class="px-3 py-1 text-xs font-semibold rounded-full ${
                    product.product_type === "digital"
                      ? "bg-purple-100 text-purple-800"
                      : "bg-blue-100 text-blue-800"
                  }">
                    ${product.product_type === "digital" ? "Digital" : "Physical"}
                  </span>
                </div>

                ${
                  originalPrice
                    ? `
                <div class="absolute top-4 right-4">
                  <span class="px-3 py-1 text-xs font-bold bg-red-500 text-white rounded-full">SALE</span>
                </div>
                `
                    : ""
                }

                <div class="absolute inset-0 bg-transparent group-hover:bg-black group-hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center pointer-events-none group-hover:pointer-events-auto">
                  <div class="opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-auto">
                    <button class="bg-white text-gray-900 px-4 py-2 rounded-full font-semibold hover:bg-gray-100 transition-colors mr-2">
                      View Details
                    </button>
                    <button class="bg-blue-600 text-white px-4 py-2 rounded-full font-semibold hover:bg-blue-700 transition-colors">
                      Add to Cart
                    </button>
                  </div>
                </div>
              </div>
              
              <div class="p-6">
                <h3 class="font-bold text-lg text-gray-900 group-hover:text-blue-600 transition-colors mb-2">
                  ${product.name}
                </h3>
                <p class="text-gray-600 text-sm mb-4 line-clamp-2">
                  ${product.description || "Premium quality product with excellent features and value."}
                </p>
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-2">
                    <span class="text-xl font-bold text-gray-900">$${parseFloat(price.toString()).toFixed(2)}</span>
                    ${originalPrice ? `<span class="text-sm text-gray-500 line-through">$${parseFloat(originalPrice.toString()).toFixed(2)}</span>` : ""}
                  </div>
                  ${
                    product.category
                      ? `
                  <span class="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
                    ${product.category.name}
                  </span>
                  `
                      : ""
                  }
                </div>
              </div>
            </div>
          `;
        })
        .join("");
    }

    // Store loaded products
    lastLoadedProducts = products;
  }

  function renderPagination(
    currentPage: number,
    totalPages: number,
    totalCount: number,
  ): void {
    if (totalPages <= 1) {
      if (elements.paginationContainer) {
        elements.paginationContainer.innerHTML = "";
      }
      return;
    }

    const getPageButton = (
      page: number,
      text: string | number = page,
      isActive: boolean = false,
      isDisabled: boolean = false,
    ): string => {
      const baseClasses =
        "px-3 py-2 text-sm font-medium rounded-md transition-colors";
      const activeClasses = "bg-blue-600 text-white";
      const inactiveClasses =
        "text-gray-700 hover:text-blue-600 hover:bg-blue-50";
      const disabledClasses = "text-gray-400 cursor-not-allowed";

      const classes = isDisabled
        ? `${baseClasses} ${disabledClasses}`
        : isActive
          ? `${baseClasses} ${activeClasses}`
          : `${baseClasses} ${inactiveClasses}`;

      return `
          <button 
            class="${classes}" 
            ${isDisabled ? "disabled" : `onclick="goToPage(${page})"`}
          >
            ${text}
          </button>
        `;
    };

    let paginationHTML: string =
      '<div class="flex items-center justify-between">';

    // Results info
    const startItem: number = (currentPage - 1) * 12 + 1;
    const endItem: number = Math.min(currentPage * 12, totalCount);
    paginationHTML += `
        <div class="text-sm text-gray-700">
          Showing <span class="font-medium">${startItem}</span> to <span class="font-medium">${endItem}</span> of <span class="font-medium">${totalCount}</span> results
        </div>
      `;

    // Pagination buttons
    paginationHTML += '<div class="flex items-center space-x-1">';

    // Previous button
    paginationHTML += getPageButton(
      currentPage - 1,
      "← Previous",
      false,
      currentPage === 1,
    );

    // Page numbers
    const startPage: number = Math.max(1, currentPage - 2);
    const endPage: number = Math.min(totalPages, currentPage + 2);

    if (startPage > 1) {
      paginationHTML += getPageButton(1);
      if (startPage > 2) {
        paginationHTML += '<span class="px-2 text-gray-500">...</span>';
      }
    }

    for (let i = startPage; i <= endPage; i++) {
      paginationHTML += getPageButton(i, i, i === currentPage);
    }

    if (endPage < totalPages) {
      if (endPage < totalPages - 1) {
        paginationHTML += '<span class="px-2 text-gray-500">...</span>';
      }
      paginationHTML += getPageButton(totalPages);
    }

    // Next button
    paginationHTML += getPageButton(
      currentPage + 1,
      "Next →",
      false,
      currentPage === totalPages,
    );

    paginationHTML += "</div></div>";

    if (elements.paginationContainer) {
      elements.paginationContainer.innerHTML = paginationHTML;
    }
  }

  function renderCategories(categories: Category[]): void {
    const categoryList: Category[] = categories;

    let html: string = "";
    categoryList.forEach((category: Category) => {
      html += `
          <label class="flex items-center group cursor-pointer">
            <input 
              type="radio" 
              name="category" 
              value="${category.slug}" 
              class="text-blue-600 focus:ring-blue-500"
              ${currentFilters.category === category.slug ? "checked" : ""}
            >
            <span class="ml-2 text-gray-700 group-hover:text-blue-600 transition-colors">
              ${category.name}
            </span>
          </label>
        `;
    });

    // Add "All Categories" option
    html =
      `
        <label class="flex items-center group cursor-pointer">
          <input 
            type="radio" 
            name="category" 
            value="" 
            class="text-blue-600 focus:ring-blue-500"
            ${!currentFilters.category ? "checked" : ""}
          >
          <span class="ml-2 text-gray-700 group-hover:text-blue-600 transition-colors font-medium">
            All Categories
          </span>
        </label>
      ` + html;

    if (elements.categoryFilters) {
      elements.categoryFilters.innerHTML = html;
    }

    // Add event listeners
    setupCategoryEventListeners();
  }

  function setupCategoryEventListeners(): void {
    document
      .querySelectorAll('input[name="category"]')
      .forEach((radio: Element) => {
        radio.addEventListener("change", (e: Event) => {
          currentFilters.category = (e.target as HTMLInputElement).value;
          currentPage = 1;
          updateActiveFilters();
          loadProducts();
        });
      });
  }

  function updateActiveFilters(): void {
    const activeFiltersArray: FilterObject[] = [];

    if (currentFilters.search) {
      activeFiltersArray.push({
        label: `Search: "${currentFilters.search}"`,
        remove: () => {
          currentFilters.search = "";
          if (elements.searchInput) {
            (elements.searchInput as HTMLInputElement).value = "";
          }
          updateSearchClearButton();
        },
      });
    }

    if (currentFilters.category) {
      const categoryElement = document.querySelector(
        `input[value="${currentFilters.category}"]`,
      );
      const categoryName: string =
        categoryElement?.nextElementSibling?.textContent ||
        currentFilters.category;
      activeFiltersArray.push({
        label: `Category: ${categoryName}`,
        remove: () => {
          currentFilters.category = "";
          const allCategoriesRadio = document.querySelector(
            'input[name="category"][value=""]',
          ) as HTMLInputElement;
          if (allCategoriesRadio) {
            allCategoriesRadio.checked = true;
          }
        },
      });
    }

    if (currentFilters.min_price || currentFilters.max_price) {
      const priceLabel: string = `Price: ${currentFilters.min_price || "0"} - ${currentFilters.max_price || "∞"}`;
      activeFiltersArray.push({
        label: priceLabel,
        remove: () => {
          currentFilters.min_price = "";
          currentFilters.max_price = "";
          if (elements.minPrice)
            (elements.minPrice as HTMLInputElement).value = "";
          if (elements.maxPrice)
            (elements.maxPrice as HTMLInputElement).value = "";
        },
      });
    }

    if (currentFilters.on_sale) {
      activeFiltersArray.push({
        label: "On Sale",
        remove: () => {
          currentFilters.on_sale = false;
          if (elements.onSale)
            (elements.onSale as HTMLInputElement).checked = false;
        },
      });
    }

    if (currentFilters.in_stock) {
      activeFiltersArray.push({
        label: "In Stock",
        remove: () => {
          currentFilters.in_stock = false;
          if (elements.inStock)
            (elements.inStock as HTMLInputElement).checked = false;
        },
      });
    }

    // Render active filters
    if (elements.activeFilters) {
      if (activeFiltersArray.length > 0) {
        elements.activeFilters.innerHTML = activeFiltersArray
          .map(
            (filter: FilterObject) => `
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800">
              ${filter.label}
              <button 
                class="ml-2 hover:text-blue-600" 
                onclick="removeFilter('${filter.label}')"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </span>
          `,
          )
          .join("");

        elements.clearFilters?.classList.remove("hidden");

        // Store filter remove functions
        (window as any).filterRemoveFunctions = {};
        activeFiltersArray.forEach((filter: FilterObject) => {
          (window as any).filterRemoveFunctions[filter.label] = filter.remove;
        });
      } else {
        elements.activeFilters.innerHTML = "";
        elements.clearFilters?.classList.add("hidden");
      }
    }

    updateURL();
  }

  function updateSearchClearButton(): void {
    if (elements.searchInput && elements.clearSearch) {
      if ((elements.searchInput as HTMLInputElement).value.trim()) {
        elements.clearSearch.classList.remove("hidden");
      } else {
        elements.clearSearch.classList.add("hidden");
      }
    }
  }

  function showState(state: string): void {
    // Hide all states
    elements.productsLoading?.classList.add("hidden");
    elements.productsContainer?.classList.add("hidden");
    elements.emptyState?.classList.add("hidden");
    elements.errorState?.classList.add("hidden");

    // Show requested state
    const targetElement: HTMLElement | null = document.getElementById(state);
    targetElement?.classList.remove("hidden");
  }

  // Main load function
  async function loadProducts(): Promise<void> {
    showState("products-loading");

    try {
      const data: ApiResponse<Product> = await fetchProducts();
      const products: Product[] = data.results || (data as Product[]);

      if (Array.isArray(products)) {
        // Update results count
        const totalCount: number = data.count || products.length;
        totalPages = Math.ceil(totalCount / 12);

        if (elements.resultsCount) {
          elements.resultsCount.textContent =
            totalCount === 1
              ? "1 product found"
              : `${totalCount} products found`;
        }

        renderProducts(products);
        renderPagination(currentPage, totalPages, totalCount);

        if (products.length > 0) {
          showState("products-container");
        } else {
          showState("empty-state");
        }
      } else {
        throw new Error("Invalid response format");
      }
    } catch (error) {
      console.error("Error loading products:", error);
      showState("error-state");
      if (elements.resultsCount) {
        elements.resultsCount.textContent = "Error loading products";
      }
    }
  }

  // Global functions for event handlers
  (window as any).goToPage = (page: number) => {
    currentPage = page;
    loadProducts();
  };

  (window as any).removeFilter = (filterLabel: string) => {
    if (
      (window as any).filterRemoveFunctions &&
      (window as any).filterRemoveFunctions[filterLabel]
    ) {
      (window as any).filterRemoveFunctions[filterLabel]();
      currentPage = 1;
      updateActiveFilters();
      loadProducts();
    }
  };

  // Event listeners
  function setupEventListeners(): void {
    // Search input
    const debouncedSearch = debounce((value: string) => {
      currentFilters.search = value;
      currentPage = 1;
      updateActiveFilters();
      loadProducts();
    }, 300);

    elements.searchInput?.addEventListener("input", (e: Event) => {
      updateSearchClearButton();
      debouncedSearch((e.target as HTMLInputElement).value);
    });

    elements.clearSearch?.addEventListener("click", () => {
      if (elements.searchInput) {
        (elements.searchInput as HTMLInputElement).value = "";
      }
      currentFilters.search = "";
      updateSearchClearButton();
      currentPage = 1;
      updateActiveFilters();
      loadProducts();
    });

    // Price filter
    elements.applyPriceFilter?.addEventListener("click", () => {
      if (elements.minPrice)
        currentFilters.min_price = (
          elements.minPrice as HTMLInputElement
        ).value;
      if (elements.maxPrice)
        currentFilters.max_price = (
          elements.maxPrice as HTMLInputElement
        ).value;
      currentPage = 1;
      updateActiveFilters();
      loadProducts();
    });

    // Checkbox filters
    elements.onSale?.addEventListener("change", (e: Event) => {
      currentFilters.on_sale = (e.target as HTMLInputElement).checked;
      currentPage = 1;
      updateActiveFilters();
      loadProducts();
    });

    elements.inStock?.addEventListener("change", (e: Event) => {
      currentFilters.in_stock = (e.target as HTMLInputElement).checked;
      currentPage = 1;
      updateActiveFilters();
      loadProducts();
    });

    // Sort
    elements.sortSelect?.addEventListener("change", (e: Event) => {
      currentFilters.ordering = (e.target as HTMLSelectElement).value;
      currentPage = 1;
      loadProducts();
    });

    // Clear filters
    elements.clearFilters?.addEventListener("click", () => {
      // Reset all filters
      currentFilters = {
        search: "",
        category: "",
        min_price: "",
        max_price: "",
        on_sale: false,
        in_stock: false,
        ordering: "-created_at",
      };
      currentPage = 1;

      // Reset form elements
      if (elements.searchInput)
        (elements.searchInput as HTMLInputElement).value = "";
      if (elements.minPrice) (elements.minPrice as HTMLInputElement).value = "";
      if (elements.maxPrice) (elements.maxPrice as HTMLInputElement).value = "";
      if (elements.onSale)
        (elements.onSale as HTMLInputElement).checked = false;
      if (elements.inStock)
        (elements.inStock as HTMLInputElement).checked = false;
      if (elements.sortSelect)
        (elements.sortSelect as HTMLSelectElement).value = "-created_at";

      // Reset radio buttons
      const allCategoriesRadio = document.querySelector(
        'input[name="category"][value=""]',
      ) as HTMLInputElement;
      if (allCategoriesRadio) allCategoriesRadio.checked = true;

      updateSearchClearButton();
      updateActiveFilters();
      loadProducts();
    });

    // Reset filters button
    elements.resetFilters?.addEventListener("click", () => {
      elements.clearFilters?.click();
    });

    // Retry loading button
    elements.retryLoading?.addEventListener("click", () => {
      loadProducts();
    });
  }

  // Initialize
  async function init(): Promise<void> {
    parseURLParams();
    setupEventListeners();

    // Initialize with server-rendered data
    initializeWithServerData();

    // Load categories if not already rendered
    const preloadedCategories = (window as any).preloadedCategories || [];
    if (preloadedCategories.length === 0) {
      try {
        const categories: ApiResponse<Category> = await fetchCategories();
        const categoryList: Category[] = categories.results || [];
        renderCategories(categoryList);
      } catch (error) {
        console.error("Failed to load categories:", error);
      }
    }

    // Update active filters and only load products if filters are applied
    updateActiveFilters();

    // Only trigger product loading if there are active filters or URL params
    const hasActiveFilters =
      Object.values(currentFilters).some((value) =>
        typeof value === "boolean" ? value : value !== "",
      ) || currentPage > 1;

    if (hasActiveFilters) {
      loadProducts();
    }
  }

  // Start the app
  document.addEventListener("DOMContentLoaded", init);
</script>
