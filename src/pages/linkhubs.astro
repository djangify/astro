---
import BaseLayout from "../layouts/BaseLayout.astro";
import { fetchLinkHubs } from "../lib/api";
import type { LinkHub, Link } from "../types";
import { getHeroicon } from "../lib/heroicons";

const allHubs: LinkHub[] = await fetchLinkHubs();
const hubs: LinkHub[] = allHubs.filter((hub) => hub.slug === "linkhubs");

// Helper function to render custom icon or fallback to media type icon
const renderIcon = (link: Link, className = "h-12 w-12"): string => {
  // If custom icon is provided, use it
  if (link.icon) {
    return getHeroicon(link.icon, className);
  }

  // Fallback to media type icons
  switch (link.media_type) {
    case "donation":
      return getHeroicon("dollar", `${className} text-green-500`);
    case "video":
      return `<svg xmlns="http://www.w3.org/2000/svg" class="${className} text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>`;
    case "pdf":
      return `<svg xmlns="http://www.w3.org/2000/svg" class="${className} text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>`;
    case "audio":
      return getHeroicon("music", `${className} text-purple-500`);
    case "image":
      return getHeroicon("camera", `${className} text-green-500`);
    default: // Standard link
      return getHeroicon("globe", `${className} text-gray-500`);
  }
};

// Helper function to render the appropriate media preview
const renderMediaPreview = (link: Link): string => {
  const bgColor =
    link.media_type === "donation"
      ? "bg-gradient-to-r from-green-400 to-emerald-500"
      : link.media_type === "video"
        ? "bg-gradient-to-r from-blue-400 to-indigo-500"
        : link.media_type === "pdf"
          ? "bg-gradient-to-r from-red-400 to-pink-500"
          : link.media_type === "audio"
            ? "bg-gradient-to-r from-purple-400 to-violet-500"
            : link.media_type === "image"
              ? "bg-gradient-to-r from-green-400 to-teal-500"
              : "bg-gradient-to-r from-slate-400 to-gray-500";

  return `
    <div class="aspect-w-16 aspect-h-9 rounded-t-lg overflow-hidden">
      <div class="w-full h-full ${bgColor} flex items-center justify-center">
        ${renderIcon(link, "h-16 w-16 text-white")}
      </div>
    </div>
  `;
};

// Helper function to get the appropriate icon for a media type (small version)
const getMediaTypeIcon = (link: Link): string => {
  return renderIcon(link, "h-5 w-5");
};

// Helper function to get the appropriate action text for a media type
const getActionText = (mediaType: string): string => {
  switch (mediaType) {
    case "donation":
      return "Support Me";
    case "video":
      return "Watch Video";
    case "pdf":
      return "View Document";
    case "audio":
      return "Listen Now";
    case "image":
      return "View Image";
    default:
      return "Visit Link";
  }
};

// Helper function to get button styling based on media type
const getButtonStyle = (mediaType: string): string => {
  switch (mediaType) {
    case "donation":
      return "text-green-700 group-hover:text-green-800";
    case "video":
      return "text-blue-700 group-hover:text-blue-800";
    case "pdf":
      return "text-red-700 group-hover:text-red-800";
    case "audio":
      return "text-purple-700 group-hover:text-purple-800";
    case "image":
      return "text-green-700 group-hover:text-green-800";
    default:
      return "text-teal-700 group-hover:text-teal-800";
  }
};
---

<BaseLayout>
  <title slot="title">Media Portfolio â€“ Corrison</title>

  <div class="container mx-auto px-4 py-12">
    {
      hubs.map((hub) => (
        <section class="mb-16 mx-auto max-w-6xl">
          {/* Background image support */}
          <div
            class={
              hub.background_image ? "relative rounded-lg overflow-hidden" : ""
            }
          >
            {hub.background_image && (
              <div class="absolute inset-0 z-0">
                <img
                  src={hub.background_image}
                  alt={`${hub.title} background`}
                  class="w-full h-full object-cover"
                />
                <div class="absolute inset-0 bg-black bg-opacity-40" />
              </div>
            )}

            <div class={hub.background_image ? "relative z-10 p-8" : ""}>
              <h1
                class={`text-2xl text-center font-bold mb-6 pb-2 border-b border-gray-200 ${hub.background_image ? "text-white border-white border-opacity-30" : ""}`}
              >
                {hub.title}
              </h1>

              {hub.description && (
                <p
                  class={`prose text-lg mb-8 max-w-4xl mx-auto text-center ${hub.background_image ? "text-white" : "text-gray-700"}`}
                >
                  {hub.description}
                </p>
              )}

              <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                {hub.links.map((link) => (
                  <a
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="bg-white rounded-lg shadow-sm hover:shadow-xl transition-shadow overflow-hidden flex flex-col h-full border border-gray-100 group"
                  >
                    {/* Media Preview */}
                    <Fragment set:html={renderMediaPreview(link)} />

                    <div class="p-6 flex-grow flex flex-col">
                      <div class="flex items-center mb-3">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-purple-800">
                          <Fragment set:html={getMediaTypeIcon(link)} />
                          <span class="ml-1">{link.media_type_display}</span>
                        </span>

                        {link.author && (
                          <span class="text-xs text-gray-500 ml-2">
                            By {link.author}
                          </span>
                        )}
                      </div>

                      <h3 class="text-xl font-semibold mb-2 group-hover:text-teal-700 transition-colors">
                        {link.title}
                      </h3>

                      {link.description && (
                        <p class="text-gray-600 mb-4 text-sm">
                          {link.description}
                        </p>
                      )}

                      <div class="mt-auto pt-4 border-t border-gray-100 flex justify-between items-center">
                        <span
                          class={`font-medium group-hover:translate-x-1 transition-transform duration-300 flex items-center ${getButtonStyle(link.media_type)}`}
                        >
                          {getActionText(link.media_type)}

                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5 ml-1"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M14 5l7 7m0 0l-7 7m7-7H3"
                            />
                          </svg>
                        </span>
                      </div>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          </div>

          {hub.links.length === 0 && (
            <div class="bg-gray-50 rounded-lg p-12 text-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-12 w-12 mx-auto mb-4 text-gray-300"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
                />
              </svg>
              <h3 class="text-xl font-medium mb-2">
                No items in this section yet
              </h3>
              <p class="text-gray-500">Check back later for updates</p>
            </div>
          )}
        </section>
      ))
    }

    {
      hubs.length === 0 && (
        <div class="bg-gray-50 rounded-lg p-16 text-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-20 w-20 mx-auto mb-6 text-gray-300"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
            />
          </svg>
          <h2 class="text-2xl font-semibold mb-3">No Media Content Found</h2>
          <p class="text-gray-600 max-w-md mx-auto">
            There's currently no media content to display. Check back soon for
            updates or contact the administrator.
          </p>
        </div>
      )
    }
  </div>
</BaseLayout>
