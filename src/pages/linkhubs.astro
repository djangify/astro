---
import BaseLayout from "../layouts/BaseLayout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { fetchLinkHubs } from "../lib/api";
import type { LinkHub, Link } from "../types";

const allHubs: LinkHub[] = await fetchLinkHubs();
const hubs: LinkHub[] = allHubs.filter((hub) => hub.slug === "linkhubs");

// Helper function to render the appropriate media preview
const renderMediaPreview = (link: Link) => {
  switch (link.media_type) {
    case "video":
      return `
        <div class="aspect-w-16 aspect-h-9 rounded-t-lg overflow-hidden">
          ${
            link.icon_url
              ? `<img src="${link.icon_url}" alt="${link.title}" class="w-full h-full object-cover">
             <div class="absolute inset-0 flex items-center justify-center">
               <div class="bg-blue-600 bg-opacity-80 rounded-full p-3 text-white">
                 <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                 </svg>
               </div>
             </div>`
              : `<div class="w-full h-full bg-gradient-to-r from-blue-400 to-indigo-500 flex items-center justify-center">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
               </svg>
             </div>`
          }
        </div>
      `;

    case "pdf":
      return `
        <div class="aspect-w-3 aspect-h-4 rounded-t-lg overflow-hidden">
          ${
            link.icon_url
              ? `<img src="${link.icon_url}" alt="${link.title}" class="w-full h-full object-cover">`
              : `<div class="w-full h-full bg-slate-400 flex items-center justify-center">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
               </svg>
             </div>`
          }
        </div>
      `;

    case "audio":
      return `
        <div class="aspect-w-16 aspect-h-9 rounded-t-lg overflow-hidden">
          ${
            link.icon_url
              ? `<img src="${link.icon_url}" alt="${link.title}" class="w-full h-full object-cover">`
              : `<div class="w-full h-full bg-slate-100 flex items-center justify-center">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
               </svg>
             </div>`
          }
        </div>
      `;

    case "image":
      return `
        <div class="aspect-w-4 aspect-h-3 rounded-t-lg overflow-hidden">
          ${
            link.icon_url || link.url
              ? `<img src="${link.icon_url || link.url}" alt="${link.title}" class="w-full h-full object-cover">`
              : `<div class="w-full h-full bg-green-100 flex items-center justify-center">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
               </svg>
             </div>`
          }
        </div>
      `;

    default: // Standard link
      return `
        <div class="aspect-w-4 aspect-h-3 rounded-t-lg overflow-hidden">
          ${
            link.icon_url
              ? `<img src="${link.icon_url}" alt="${link.title}" class="w-full h-full object-cover">`
              : `<div class="w-full h-full bg-slate-400 flex items-center justify-center">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
               </svg>
             </div>`
          }
        </div>
      `;
  }
};

// Helper function to get the appropriate icon for a media type
const getMediaTypeIcon = (mediaType: string) => {
  switch (mediaType) {
    case "video":
      return `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>`;
    case "pdf":
      return `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>`;
    case "audio":
      return `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
              </svg>`;
    case "image":
      return `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>`;
    default: // Standard link
      return `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
              </svg>`;
  }
};

// Helper function to get the appropriate action text for a media type
const getActionText = (mediaType: string) => {
  switch (mediaType) {
    case "video":
      return "Watch Video";
    case "pdf":
      return "View Document";
    case "audio":
      return "Listen Now";
    case "image":
      return "View Image";
    default:
      return "Visit Link";
  }
};
---

<BaseLayout>
  <Header slot="header" />
  <title slot="title">Media Portfolio â€“ Corrison</title>

  <div class="container mx-auto px-4 py-12">
    {
      hubs.map((hub) => (
        <section class="mb-16 mx-auto max-w-6xl">
          <h1 class="text-2xl text-center font-bold mb-6 pb-2 border-b border-gray-200">
            {hub.title}
          </h1>

          {hub.description && (
            <p class="prose text-lg text-gray-700 mb-8 max-w-4xl mx-auto text-center">
              {hub.description}
            </p>
          )}

          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {hub.links.map((link) => (
              <a
                href={link.url}
                target="_blank"
                rel="noopener noreferrer"
                class="bg-white rounded-lg shadow-sm hover:shadow-xl transition-shadow overflow-hidden flex flex-col h-full border border-gray-100 group"
              >
                {/* Media Preview - Different for each media type */}
                <Fragment set:html={renderMediaPreview(link)} />

                <div class="p-6 flex-grow flex flex-col">
                  <div class="flex items-center mb-3">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-purple-800">
                      <Fragment set:html={getMediaTypeIcon(link.media_type)} />
                      <span class="ml-1">{link.media_type_display}</span>
                    </span>

                    {link.author && (
                      <span class="text-xs text-gray-500 ml-2">
                        By {link.author}
                      </span>
                    )}
                  </div>

                  <h3 class="text-xl font-semibold mb-2 group-hover:text-teal-700 transition-colors">
                    {link.title}
                  </h3>

                  {link.description && (
                    <p class="text-gray-600 mb-4 text-sm">{link.description}</p>
                  )}

                  <div class="mt-auto pt-4 border-t border-gray-100 flex justify-between items-center">
                    <span class="text-teal-700 font-medium group-hover:translate-x-1 transition-transform duration-300 flex items-center">
                      {getActionText(link.media_type)}

                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5 ml-1"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M14 5l7 7m0 0l-7 7m7-7H3"
                        />
                      </svg>
                    </span>
                  </div>
                </div>
              </a>
            ))}
          </div>

          {hub.links.length === 0 && (
            <div class="bg-gray-50 rounded-lg p-12 text-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-12 w-12 mx-auto mb-4 text-gray-300"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
                />
              </svg>
              <h3 class="text-xl font-medium mb-2">
                No items in this section yet
              </h3>
              <p class="text-gray-500">Check back later for updates</p>
            </div>
          )}
        </section>
      ))
    }

    {
      hubs.length === 0 && (
        <div class="bg-gray-50 rounded-lg p-16 text-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-20 w-20 mx-auto mb-6 text-gray-300"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
            />
          </svg>
          <h2 class="text-2xl font-semibold mb-3">No Media Content Found</h2>
          <p class="text-gray-600 max-w-md mx-auto">
            There's currently no media content to display. Check back soon for
            updates or contact the administrator.
          </p>
        </div>
      )
    }
  </div>

  <Footer slot="footer" />
</BaseLayout>
