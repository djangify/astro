---
// src/pages/orders.astro
import BaseLayout from "../layouts/BaseLayout.astro";
import DashboardNav from "../components/dashboard/DashboardNav.astro";
---

<BaseLayout>
  <title slot="title">Order History â€“ Corrison</title>
  <meta
    slot="head"
    name="description"
    content="View your digital purchases, download products, and access your courses."
  />

  <!-- Dashboard Navigation -->
  <DashboardNav currentPage="orders" />

  <!-- Main Content -->
  <div class="lg:ml-64">
    <main class="py-6">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <section>
          <div class="container mx-auto px-4 py-12">
            <div class="max-w-4xl mx-auto">
              <h1 class="text-3xl font-semibold text-gray-900 mb-4">
                My Purchases
              </h1>
              <p class="text-xl text-gray-600">
                Access your digital products and course enrollments
              </p>
            </div>
          </div>
        </section>

        <!-- Loading State -->
        <div id="loading-state" class="text-center py-16">
          <div
            class="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-700 mx-auto mb-4"
          >
          </div>
          <p class="text-gray-600">Loading your purchases...</p>
        </div>

        <!-- Not Authenticated State -->
        <div id="not-authenticated" class="text-center py-16 hidden">
          <svg
            class="h-16 w-16 mx-auto text-gray-300 mb-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
            ></path>
          </svg>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">Please Sign In</h2>
          <p class="text-gray-600 mb-6">
            You need to be signed in to view your purchases.
          </p>
          <a
            href="/auth/login"
            class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Sign In
          </a>
        </div>

        <!-- Orders Content -->
        <div id="orders-content" class="hidden">
          <!-- Purchase Statistics -->
          <div id="order-stats" class="mb-8">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div class="bg-white rounded-lg shadow-sm p-6 text-center">
                <div
                  class="text-3xl font-bold text-gray-900"
                  id="total-purchases"
                >
                  0
                </div>
                <div class="text-sm text-gray-600">Total Purchases</div>
              </div>
              <div class="bg-white rounded-lg shadow-sm p-6 text-center">
                <div
                  class="text-3xl font-bold text-blue-600"
                  id="total-products"
                >
                  0
                </div>
                <div class="text-sm text-gray-600">Digital Products</div>
              </div>
              <div class="bg-white rounded-lg shadow-sm p-6 text-center">
                <div
                  class="text-3xl font-bold text-purple-600"
                  id="total-courses"
                >
                  0
                </div>
                <div class="text-sm text-gray-600">Course Enrollments</div>
              </div>
              <div class="bg-white rounded-lg shadow-sm p-6 text-center">
                <div class="text-3xl font-bold text-teal-700" id="total-spent">
                  $0
                </div>
                <div class="text-sm text-gray-600">Total Spent</div>
              </div>
            </div>
          </div>

          <!-- Filter Tabs -->
          <div class="mb-6">
            <div class="border-b border-gray-200">
              <nav class="-mb-px flex space-x-8">
                <button
                  id="tab-all"
                  onclick="switchTab('all')"
                  class="tab-button border-b-2 border-teal-700 text-teal-700 py-2 px-1 text-sm font-medium"
                >
                  All Purchases
                </button>
                <button
                  id="tab-products"
                  onclick="switchTab('products')"
                  class="tab-button border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 py-2 px-1 text-sm font-medium"
                >
                  Digital Products
                </button>
                <button
                  id="tab-courses"
                  onclick="switchTab('courses')"
                  class="tab-button border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 py-2 px-1 text-sm font-medium"
                >
                  Courses
                </button>
              </nav>
            </div>
          </div>

          <!-- Orders List -->
          <div id="orders-list" class="space-y-6">
            <!-- Orders will be populated by JavaScript -->
          </div>
        </div>

        <!-- Empty State -->
        <div id="empty-state" class="text-center py-16 hidden">
          <svg
            class="h-16 w-16 mx-auto text-gray-300 mb-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
            ></path>
          </svg>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">
            No Purchases Yet
          </h2>
          <p class="text-gray-600 mb-6">
            Start exploring our digital products and courses.
          </p>
          <div class="flex justify-center space-x-4">
            <a
              href="/products"
              class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors"
            >
              Browse Products
            </a>
            <a
              href="/courses"
              class="bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium px-6 py-3 rounded-lg transition-colors"
            >
              View Courses
            </a>
          </div>
        </div>
      </div>
    </main>
  </div>
</BaseLayout>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    let allOrders = [];
    let currentTab = "all";
    const API_BASE = window.location.origin.includes("localhost")
      ? "http://localhost:8000"
      : "https://corrison.corrisonapi.com";

    // Initialize page
    initializePage();

    async function initializePage() {
      try {
        // Check authentication
        const isAuthenticated = checkAuthentication();

        if (!isAuthenticated) {
          showNotAuthenticatedState();
          return;
        }

        // Load orders data
        await loadOrdersData();

        if (allOrders.length === 0) {
          showEmptyState();
        } else {
          showOrdersContent();
          updateStatistics();
          renderOrders();
        }
      } catch (error) {
        console.error("Error loading orders:", error);
        showNotAuthenticatedState();
      } finally {
        hideLoadingState();
      }
    }

    function checkAuthentication() {
      const token = localStorage.getItem("access_token");
      return !!token;
    }

    async function loadOrdersData() {
      try {
        const token = localStorage.getItem("access_token");

        const response = await fetch(`${API_BASE}/api/v1/orders/`, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error("Failed to fetch orders");
        }

        allOrders = await response.json();
        // Filter only completed/paid orders
        allOrders = allOrders.filter(
          (order) =>
            order.payment_status === "paid" ||
            order.order_status === "completed",
        );
      } catch (error) {
        console.error("Error loading orders:", error);
        allOrders = [];
      }
    }

    function updateStatistics() {
      const totalPurchases = allOrders.length;
      let totalProducts = 0;
      let totalCourses = 0;
      const totalSpent = allOrders.reduce(
        (sum, order) => sum + parseFloat(order.total || 0),
        0,
      );

      // Count products and courses
      allOrders.forEach((order) => {
        if (order.items) {
          order.items.forEach((item) => {
            if (item.product) totalProducts++;
            if (item.course) totalCourses++;
          });
        }
      });

      document.getElementById("total-purchases").textContent = totalPurchases;
      document.getElementById("total-products").textContent = totalProducts;
      document.getElementById("total-courses").textContent = totalCourses;
      document.getElementById("total-spent").textContent =
        `$${totalSpent.toFixed(2)}`;
    }

    function renderOrders() {
      const ordersList = document.getElementById("orders-list");

      // Filter orders based on current tab
      let filteredOrders = allOrders;

      if (currentTab === "products") {
        filteredOrders = allOrders.filter(
          (order) => order.items && order.items.some((item) => item.product),
        );
      } else if (currentTab === "courses") {
        filteredOrders = allOrders.filter(
          (order) => order.items && order.items.some((item) => item.course),
        );
      }

      if (filteredOrders.length === 0) {
        ordersList.innerHTML = `
          <div class="text-center py-12">
            <p class="text-gray-500">No ${currentTab === "all" ? "purchases" : currentTab} found</p>
          </div>
        `;
        return;
      }

      // Sort by most recent
      filteredOrders.sort(
        (a, b) =>
          new Date(b.created_at).getTime() - new Date(a.created_at).getTime(),
      );

      // Render orders
      ordersList.innerHTML = filteredOrders
        .map((order) => createOrderCard(order))
        .join("");
    }

    function createOrderCard(order) {
      const orderDate = new Date(order.created_at).toLocaleDateString();
      const hasProducts =
        order.items && order.items.some((item) => item.product);
      const hasCourses = order.items && order.items.some((item) => item.course);

      return `
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          <div class="p-6">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
              <div>
                <h3 class="text-lg font-medium text-gray-900 mb-1">
                  Order #${order.id || "N/A"}
                </h3>
                <p class="text-sm text-gray-600">
                  Purchased on ${orderDate}
                </p>
              </div>
              <div class="mt-3 md:mt-0 flex items-center space-x-4">
                <span class="px-3 py-1 text-sm font-medium rounded-full bg-green-100 text-green-800">
                  Completed
                </span>
                <span class="text-lg font-bold text-gray-900">
                  $${parseFloat(order.total || 0).toFixed(2)}
                </span>
              </div>
            </div>

            ${
              order.items && order.items.length > 0
                ? `
              <div class="border-t border-gray-200 pt-4">
                <div class="space-y-3">
                  ${order.items
                    .map((item) => {
                      if (item.product) {
                        return `
                          <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div class="flex items-center space-x-3">
                              ${
                                item.product.image
                                  ? `<img src="${item.product.image}" alt="${item.product.name}" class="w-12 h-12 object-cover rounded">`
                                  : `<div class="w-12 h-12 bg-gray-200 rounded flex items-center justify-center">
                                  <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h10v10H7z"></path>
                                  </svg>
                                </div>`
                              }
                              <div>
                                <p class="font-medium text-gray-900">${item.product.name || "Digital Product"}</p>
                                <p class="text-sm text-gray-500">Digital Download</p>
                              </div>
                            </div>
                            <a href="/products/${item.product.id}/download" 
                               class="text-blue-600 hover:text-blue-700 font-medium text-sm">
                              Download
                            </a>
                          </div>
                        `;
                      } else if (item.course) {
                        return `
                          <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div class="flex items-center space-x-3">
                              ${
                                item.course.thumbnail
                                  ? `<img src="${item.course.thumbnail}" alt="${item.course.title}" class="w-12 h-12 object-cover rounded">`
                                  : `<div class="w-12 h-12 bg-purple-100 rounded flex items-center justify-center">
                                  <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                                  </svg>
                                </div>`
                              }
                              <div>
                                <p class="font-medium text-gray-900">${item.course.title || "Course"}</p>
                                <p class="text-sm text-gray-500">Course Enrollment</p>
                              </div>
                            </div>
                            <a href="/courses/${item.course.slug || item.course.id}" 
                               class="text-purple-600 hover:text-purple-700 font-medium text-sm">
                              View Course
                            </a>
                          </div>
                        `;
                      }
                      return "";
                    })
                    .join("")}
                </div>
              </div>
            `
                : ""
            }

            <div class="flex flex-col sm:flex-row gap-3 mt-4">
              <button
                onclick="viewReceipt('${order.id}')"
                class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors text-sm text-center"
              >
                View Receipt
              </button>
              
              ${
                hasProducts
                  ? `
                <button
                  onclick="viewAllDownloads('${order.id}')"
                  class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors text-sm text-center"
                >
                  Download All
                </button>
              `
                  : ""
              }
              
              ${
                order.stripe_payment_intent_id
                  ? `
                <button
                  onclick="contactSupport('${order.id}')"
                  class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors text-sm text-center"
                >
                  Get Help
                </button>
              `
                  : ""
              }
            </div>
          </div>
        </div>
      `;
    }

    // Tab switching
    window.switchTab = function (tab) {
      currentTab = tab;

      // Update tab styles
      document.querySelectorAll(".tab-button").forEach((btn) => {
        btn.classList.remove("border-teal-700", "text-teal-700", "border-b-2");
        btn.classList.add("border-transparent", "text-gray-500");
      });

      const activeTab = document.getElementById(`tab-${tab}`);
      activeTab.classList.remove("border-transparent", "text-gray-500");
      activeTab.classList.add("border-teal-700", "text-teal-700", "border-b-2");

      renderOrders();
    };

    // Global functions for order actions
    window.viewReceipt = function (orderId) {
      // Could open a modal or navigate to a receipt page
      console.log("View receipt for order:", orderId);
      alert("Receipt view coming soon!");
    };

    window.viewAllDownloads = function (orderId) {
      const order = allOrders.find((o) => o.id == orderId);
      if (order && order.items) {
        // In a real implementation, this might zip all files or show a download modal
        order.items.forEach((item) => {
          if (item.product) {
            window.open(`/products/${item.product.id}/download`, "_blank");
          }
        });
      }
    };

    window.contactSupport = function (orderId) {
      window.location.href = `/support?order=${orderId}`;
    };

    function hideLoadingState() {
      document.getElementById("loading-state").classList.add("hidden");
    }

    function showNotAuthenticatedState() {
      hideLoadingState();
      document.getElementById("not-authenticated").classList.remove("hidden");
    }

    function showOrdersContent() {
      document.getElementById("orders-content").classList.remove("hidden");
    }

    function showEmptyState() {
      hideLoadingState();
      document.getElementById("empty-state").classList.remove("hidden");
    }
  });
</script>

<style>
  .tab-button {
    border-bottom-width: 2px;
    transition: all 0.2s ease;
  }
</style>
