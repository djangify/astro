---
// src/pages/orders.astro
import BaseLayout from "../layouts/BaseLayout.astro";
import DashboardNav from "../components/dashboard/DashboardNav.astro";
---

<BaseLayout>
  <title slot="title">Order History â€“ Corrison</title>
  <meta
    slot="head"
    name="description"
    content="View your order history, track shipments, and manage your purchases."
  />

  <!-- Dashboard Navigation -->
  <DashboardNav currentPage="orders" />

  <!-- Main Content -->
  <div class="lg:ml-64">
    <main class="py-6">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <section>
          <div class="container mx-auto px-4 py-12">
            <div class="max-w-4xl mx-auto">
              <!-- Loading state for header content -->
              <div id="header-loading" class="animate-pulse">
                <div class="h-8 bg-gray-200 rounded mb-4 max-w-md"></div>
                <div class="h-6 bg-gray-200 rounded max-w-lg"></div>
              </div>

              <!-- Actual header content (hidden initially) -->
              <div id="header-content" class="hidden">
                <h1
                  id="page-title"
                  class="text-3xl font-semibold text-gray-900 mb-4"
                >
                  Order History
                </h1>
                <p id="page-description" class="text-xl text-gray-600">
                  Track your orders, view details, and manage your purchases.
                </p>
              </div>
            </div>
          </div>
        </section>

        <!-- Loading State -->
        <div id="loading-state" class="text-center py-16">
          <div
            class="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-700 mx-auto mb-4"
          >
          </div>
          <p class="text-gray-600">Loading your orders...</p>
        </div>

        <!-- Not Authenticated State -->
        <div id="not-authenticated" class="text-center py-16 hidden">
          <svg
            class="h-16 w-16 mx-auto text-gray-300 mb-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
            ></path>
          </svg>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">Please Sign In</h2>
          <p class="text-gray-600 mb-6">
            You need to be signed in to view your orders.
          </p>
          <a
            href="/auth/login"
            class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Sign In
          </a>
        </div>

        <!-- Orders Content -->
        <div id="orders-content" class="hidden">
          <!-- Order Statistics -->
          <div id="order-stats" class="mb-8">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div class="bg-white rounded-lg shadow-sm p-6 text-center">
                <div class="text-3xl font-bold text-gray-900" id="total-orders">
                  0
                </div>
                <div class="text-sm text-gray-600">Total Orders</div>
              </div>
              <div class="bg-white rounded-lg shadow-sm p-6 text-center">
                <div
                  class="text-3xl font-bold text-green-600"
                  id="completed-orders"
                >
                  0
                </div>
                <div class="text-sm text-gray-600">Completed</div>
              </div>
              <div class="bg-white rounded-lg shadow-sm p-6 text-center">
                <div
                  class="text-3xl font-bold text-blue-600"
                  id="pending-orders"
                >
                  0
                </div>
                <div class="text-sm text-gray-600">Processing</div>
              </div>
              <div class="bg-white rounded-lg shadow-sm p-6 text-center">
                <div class="text-3xl font-bold text-teal-700" id="total-spent">
                  $0
                </div>
                <div class="text-sm text-gray-600">Total Spent</div>
              </div>
            </div>
          </div>

          <!-- Filter Controls -->
          <div class="mb-6">
            <div
              class="flex flex-col md:flex-row gap-4 items-center justify-between"
            >
              <div class="flex flex-wrap gap-4">
                <select
                  id="status-filter"
                  class="border border-gray-300 rounded-lg px-3 py-2 text-sm"
                >
                  <option value="all">All Orders</option>
                  <option value="pending">Pending</option>
                  <option value="processing">Processing</option>
                  <option value="shipped">Shipped</option>
                  <option value="delivered">Delivered</option>
                  <option value="cancelled">Cancelled</option>
                </select>

                <select
                  id="sort-filter"
                  class="border border-gray-300 rounded-lg px-3 py-2 text-sm"
                >
                  <option value="recent">Most Recent</option>
                  <option value="oldest">Oldest First</option>
                  <option value="amount-high">Highest Amount</option>
                  <option value="amount-low">Lowest Amount</option>
                </select>
              </div>

              <div class="text-sm text-gray-600">
                <span id="orders-count">0</span> orders found
              </div>
            </div>
          </div>

          <!-- Orders List -->
          <div id="orders-list" class="space-y-6">
            <!-- Orders will be populated by JavaScript -->
          </div>

          <!-- Pagination -->
          <div id="pagination" class="hidden mt-8 justify-center">
            <nav class="flex space-x-2">
              <button
                id="prev-page"
                class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled
              >
                Previous
              </button>
              <span id="page-info" class="px-3 py-2 text-sm text-gray-700">
                Page 1 of 1
              </span>
              <button
                id="next-page"
                class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled
              >
                Next
              </button>
            </nav>
          </div>
        </div>

        <!-- Empty State -->
        <div id="empty-state" class="text-center py-16 hidden">
          <svg
            class="h-16 w-16 mx-auto text-gray-300 mb-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M16 11V7a4 4 0 00-8 0v4M5 9h14l-1 12H6L5 9z"></path>
          </svg>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">No Orders Yet</h2>
          <p class="text-gray-600 mb-6">
            You haven't placed any orders yet. Start shopping to see your order
            history here.
          </p>
          <a
            href="/courses"
            class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Browse Courses
          </a>
        </div>
      </div>
    </main>
  </div>
</BaseLayout>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    let allOrders = [];
    let filteredOrders = [];
    let currentPage = 1;
    const ordersPerPage = 10;

    // Initialize page
    initializePage();

    async function initializePage() {
      // Initialize page settings first
      await initializePageSettings();

      try {
        // Check authentication
        const isAuthenticated = checkAuthentication();

        if (!isAuthenticated) {
          showNotAuthenticatedState();
          return;
        }

        // Load orders data
        await loadOrdersData();

        if (allOrders.length === 0) {
          showEmptyState();
        } else {
          showOrdersContent();
          updateStatistics();
          renderOrders();
        }
      } catch (error) {
        console.error("Error loading orders:", error);
        showNotAuthenticatedState();
      } finally {
        hideLoadingState();
      }
    }

    async function initializePageSettings() {
      await loadOrderSettings();
    }

    async function loadOrderSettings() {
      try {
        const API_BASE = window.location.origin.includes("localhost")
          ? "http://localhost:8000"
          : "https://corrison.corrisonapi.com";

        const response = await fetch(`${API_BASE}/api/v1/order-settings/`, {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const data = await response.json();
          console.log("Order Settings Response:", data);

          // Handle both single object and array responses
          const settings = Array.isArray(data) ? data[0] : data;
          updateHeaderContent(settings);
        } else {
          console.error("Failed to load order settings:", response.status);
          showDefaultHeaderContent();
        }
      } catch (error) {
        console.error("Error loading order settings:", error);
        showDefaultHeaderContent();
      }
    }

    function updateHeaderContent(settings) {
      const headerLoading = document.getElementById("header-loading");
      const headerContent = document.getElementById("header-content");
      const pageTitle = document.getElementById("page-title");
      const pageDescription = document.getElementById("page-description");

      if (settings) {
        // Update title
        if (pageTitle && settings.page_title) {
          pageTitle.textContent = settings.page_title;
        }

        // Update description - use innerHTML for HTML content
        if (pageDescription && settings.page_description) {
          pageDescription.innerHTML = settings.page_description;
        }
      }

      // Show actual content and hide loading
      if (headerLoading) headerLoading.classList.add("hidden");
      if (headerContent) headerContent.classList.remove("hidden");
    }

    function showDefaultHeaderContent() {
      const headerLoading = document.getElementById("header-loading");
      const headerContent = document.getElementById("header-content");

      // Keep default content - no changes needed since fallback text is already in HTML

      // Show actual content and hide loading
      if (headerLoading) headerLoading.classList.add("hidden");
      if (headerContent) headerContent.classList.remove("hidden");
    }

    function checkAuthentication() {
      const token = localStorage.getItem("access_token");
      return !!token;
    }

    async function loadOrdersData() {
      try {
        const API_BASE = window.location.origin.includes("localhost")
          ? "http://localhost:8000"
          : "https://corrison.corrisonapi.com";
        const token = localStorage.getItem("access_token");

        const response = await fetch(`${API_BASE}/api/v1/orders/`, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error("Failed to fetch orders");
        }

        allOrders = await response.json();
        filteredOrders = [...allOrders];
      } catch (error) {
        console.error("Error loading orders:", error);
        allOrders = [];
        filteredOrders = [];
      }
    }

    function updateStatistics() {
      const totalOrders = allOrders.length;
      const completedOrders = allOrders.filter(
        (order) => order.status === "delivered",
      ).length;
      const pendingOrders = allOrders.filter((order) =>
        ["pending", "processing", "shipped"].includes(order.status),
      ).length;
      const totalSpent = allOrders.reduce(
        (sum, order) => sum + parseFloat(order.total || 0),
        0,
      );

      const totalOrdersEl = document.getElementById("total-orders");
      const completedOrdersEl = document.getElementById("completed-orders");
      const pendingOrdersEl = document.getElementById("pending-orders");
      const totalSpentEl = document.getElementById("total-spent");

      if (totalOrdersEl) totalOrdersEl.textContent = totalOrders.toString();
      if (completedOrdersEl)
        completedOrdersEl.textContent = completedOrders.toString();
      if (pendingOrdersEl)
        pendingOrdersEl.textContent = pendingOrders.toString();
      if (totalSpentEl) totalSpentEl.textContent = `$${totalSpent.toFixed(2)}`;
    }

    function renderOrders() {
      applyFilters();

      const ordersList = document.getElementById("orders-list");
      const ordersCount = document.getElementById("orders-count");

      // Update count
      if (ordersCount)
        ordersCount.textContent = filteredOrders.length.toString();

      // Paginate orders
      const startIndex = (currentPage - 1) * ordersPerPage;
      const endIndex = startIndex + ordersPerPage;
      const paginatedOrders = filteredOrders.slice(startIndex, endIndex);

      // Render orders
      if (ordersList) {
        ordersList.innerHTML = paginatedOrders
          .map((order) => createOrderCard(order))
          .join("");
      }

      // Update pagination
      updatePagination();
    }

    function createOrderCard(order) {
      const orderDate = new Date(order.created_at).toLocaleDateString();
      const statusColors = {
        pending: "bg-yellow-100 text-yellow-800",
        processing: "bg-blue-100 text-blue-800",
        shipped: "bg-purple-100 text-purple-800",
        delivered: "bg-green-100 text-green-800",
        cancelled: "bg-red-100 text-red-800",
        refunded: "bg-gray-100 text-gray-800",
      };

      return `
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
            <div>
              <h3 class="text-lg font-medium text-gray-900 mb-1">
                Order #${order.order_number || "N/A"}
              </h3>
              <p class="text-sm text-gray-600">
                Placed on ${orderDate}
              </p>
            </div>
            <div class="mt-3 md:mt-0 flex items-center space-x-4">
              <span class="px-3 py-1 text-sm font-medium rounded-full ${statusColors[order.status] || "bg-gray-100 text-gray-800"}">
                ${order.status ? order.status.charAt(0).toUpperCase() + order.status.slice(1) : "Unknown"}
              </span>
              <span class="text-lg font-bold text-gray-900">
                $${parseFloat(order.total || 0).toFixed(2)}
              </span>
            </div>
          </div>

          <div class="border-t border-gray-200 pt-4">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div>
                <p class="text-sm text-gray-600">Payment Status</p>
                <p class="font-medium ${order.payment_status === "paid" ? "text-green-600" : "text-yellow-600"}">
                  ${order.payment_status === "paid" ? "Paid" : "Pending"}
                </p>
              </div>
              
              ${
                order.shipping_method
                  ? `
                <div>
                  <p class="text-sm text-gray-600">Shipping Method</p>
                  <p class="font-medium text-gray-900">${order.shipping_method}</p>
                </div>
              `
                  : ""
              }

              ${
                order.tracking_number
                  ? `
                <div>
                  <p class="text-sm text-gray-600">Tracking Number</p>
                  <p class="font-medium text-gray-900">${order.tracking_number}</p>
                </div>
              `
                  : ""
              }
            </div>

            ${
              order.items && order.items.length > 0
                ? `
              <div class="mb-4">
                <p class="text-sm text-gray-600 mb-2">Items (${order.items.length})</p>
                <div class="space-y-2">
                  ${order.items
                    .slice(0, 3)
                    .map(
                      (item) => `
                    <div class="flex justify-between items-center text-sm">
                      <span class="text-gray-900">${item.product_name || "Unknown Product"}</span>
                      <span class="text-gray-600">Qty: ${item.quantity || 0}</span>
                    </div>
                  `,
                    )
                    .join("")}
                  ${
                    order.items.length > 3
                      ? `
                    <p class="text-sm text-gray-500">+ ${order.items.length - 3} more items</p>
                  `
                      : ""
                  }
                </div>
              </div>
            `
                : ""
            }

            <div class="flex flex-col sm:flex-row gap-3">
              <button
                onclick="viewOrderDetails('${order.order_number || ""}')"
                class="flex-1 bg-teal-700 hover:bg-teal-800 text-white font-medium py-2 px-4 rounded-lg transition-colors text-sm text-center"
              >
                View Details
              </button>
              
              ${
                order.status === "delivered"
                  ? `
                <button
                  onclick="reorderItems('${order.id || ""}')"
                  class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors text-sm text-center"
                >
                  Order Again
                </button>
              `
                  : ""
              }

              ${
                ["pending", "processing"].includes(order.status)
                  ? `
                <button
                  onclick="cancelOrder('${order.id || ""}')"
                  class="flex-1 bg-red-100 hover:bg-red-200 text-red-800 font-medium py-2 px-4 rounded-lg transition-colors text-sm text-center"
                >
                  Cancel Order
                </button>
              `
                  : ""
              }
            </div>
          </div>
        </div>
      `;
    }

    function applyFilters() {
      const statusFilterEl = document.getElementById("status-filter");
      const sortFilterEl = document.getElementById("sort-filter");

      const statusFilter = statusFilterEl ? statusFilterEl.value : "all";
      const sortFilter = sortFilterEl ? sortFilterEl.value : "recent";

      // Filter by status
      filteredOrders = allOrders.filter((order) => {
        return statusFilter === "all" || order.status === statusFilter;
      });

      // Sort orders
      filteredOrders.sort((a, b) => {
        switch (sortFilter) {
          case "oldest":
            return (
              new Date(a.created_at).getTime() -
              new Date(b.created_at).getTime()
            );
          case "amount-high":
            return parseFloat(b.total || 0) - parseFloat(a.total || 0);
          case "amount-low":
            return parseFloat(a.total || 0) - parseFloat(b.total || 0);
          case "recent":
          default:
            return (
              new Date(b.created_at).getTime() -
              new Date(a.created_at).getTime()
            );
        }
      });

      // Reset to first page when filtering
      currentPage = 1;
    }

    function updatePagination() {
      const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);
      const pagination = document.getElementById("pagination");
      const prevButton = document.getElementById("prev-page");
      const nextButton = document.getElementById("next-page");
      const pageInfo = document.getElementById("page-info");

      if (totalPages > 1) {
        if (pagination) pagination.classList.remove("hidden");
        if (pageInfo)
          pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;

        if (prevButton) prevButton.disabled = currentPage === 1;
        if (nextButton) nextButton.disabled = currentPage === totalPages;
      } else {
        if (pagination) pagination.classList.add("hidden");
      }
    }

    // Event listeners
    const statusFilter = document.getElementById("status-filter");
    const sortFilter = document.getElementById("sort-filter");
    const prevPage = document.getElementById("prev-page");
    const nextPage = document.getElementById("next-page");

    if (statusFilter) statusFilter.addEventListener("change", renderOrders);
    if (sortFilter) sortFilter.addEventListener("change", renderOrders);

    if (prevPage) {
      prevPage.addEventListener("click", () => {
        if (currentPage > 1) {
          currentPage--;
          renderOrders();
        }
      });
    }

    if (nextPage) {
      nextPage.addEventListener("click", () => {
        const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          renderOrders();
        }
      });
    }

    // Global functions for order actions
    window.viewOrderDetails = function (orderNumber) {
      window.location.href = `/orders/${orderNumber}`;
    };

    window.reorderItems = function (orderId) {
      // Implementation for reordering
      console.log("Reorder items for order:", orderId);
      alert("Reorder functionality coming soon!");
    };

    window.cancelOrder = function (orderId) {
      if (confirm("Are you sure you want to cancel this order?")) {
        // Implementation for canceling order
        console.log("Cancel order:", orderId);
        alert("Order cancellation functionality coming soon!");
      }
    };

    function hideLoadingState() {
      const loadingState = document.getElementById("loading-state");
      if (loadingState) loadingState.classList.add("hidden");
    }

    function showNotAuthenticatedState() {
      hideLoadingState();
      const notAuthenticatedState =
        document.getElementById("not-authenticated");
      if (notAuthenticatedState)
        notAuthenticatedState.classList.remove("hidden");
    }

    function showOrdersContent() {
      const ordersContent = document.getElementById("orders-content");
      if (ordersContent) ordersContent.classList.remove("hidden");
    }

    function showEmptyState() {
      hideLoadingState();
      const emptyState = document.getElementById("empty-state");
      if (emptyState) emptyState.classList.remove("hidden");
    }
  });
</script>
