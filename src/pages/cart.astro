---
// src/pages/cart.astro
import BaseLayout from "../layouts/BaseLayout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

// SEO meta information
const metaTitle = "Shopping Cart – Corrison";
const metaDescription = "Review and manage items in your cart before checkout.";
---

<BaseLayout>
  <Header slot="header" />
  <title slot="title">{metaTitle}</title>
  <meta slot="head" name="description" content={metaDescription} />
  <meta slot="head" property="og:title" content={metaTitle} />
  <meta slot="head" property="og:description" content={metaDescription} />
  <meta slot="head" property="og:type" content="website" />

  <div class="min-h-screen bg-gray-50">
    <!-- Page Header -->
    <section class="bg-white border-b border-gray-200">
      <div class="container mx-auto px-4 py-6">
        <h1 class="text-2xl lg:text-3xl font-bold text-gray-900">
          Shopping Cart
        </h1>
        <div class="mt-2 flex items-center space-x-2 text-sm text-gray-600">
          <a href="/ecommerce/products" class="hover:text-blue-600">Products</a>
          <span>→</span>
          <span class="text-gray-900 font-medium">Cart</span>
        </div>
      </div>
    </section>

    <div class="container mx-auto px-4 py-8">
      <div class="max-w-6xl mx-auto">
        <!-- Empty Cart State -->
        <div id="empty-cart" class="hidden text-center py-16">
          <div
            class="w-20 h-20 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-6"
          >
            <svg
              class="w-10 h-10 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 7m0 0l-1.5-5M7 13l-2-8m0 0h16m-7 4v8a2 2 0 01-2 2H9a2 2 0 01-2-2v-8a2 2 0 012-2h2a2 2 0 012 2z"
              >
              </path>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">
            Your cart is empty
          </h2>
          <p class="text-gray-600 mb-8">
            Add some amazing products to get started!
          </p>
          <a
            href="/ecommerce/products"
            class="bg-blue-600 text-white hover:bg-blue-700 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Browse Products
          </a>
        </div>

        <!-- Cart Content -->
        <div id="cart-content" class="hidden">
          <div class="lg:grid lg:grid-cols-3 lg:gap-8">
            <!-- Cart Items -->
            <div class="lg:col-span-2">
              <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <div class="p-6 border-b border-gray-200">
                  <div class="flex items-center justify-between">
                    <h2 class="text-lg font-semibold text-gray-900">
                      Cart Items (<span id="cart-item-count">0</span>)
                    </h2>
                    <button
                      id="clear-cart-btn"
                      class="text-sm text-red-600 hover:text-red-700 font-medium"
                    >
                      Clear Cart
                    </button>
                  </div>
                </div>
                <div id="main-cart-items-list" class="divide-y divide-gray-200">
                  <!-- Items will be populated by JavaScript -->
                </div>
              </div>
            </div>

            <!-- Order Summary -->
            <div class="mt-8 lg:mt-0">
              <div
                class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 sticky top-4"
              >
                <h2 class="text-lg font-semibold text-gray-900 mb-4">
                  Order Summary
                </h2>

                <div class="space-y-3">
                  <div class="flex justify-between text-gray-600">
                    <span>Items (<span id="summary-item-count">0</span>)</span>
                    <span id="cart-subtotal">$0.00</span>
                  </div>
                  <div class="flex justify-between text-gray-600">
                    <span>Shipping</span>
                    <span id="cart-shipping">Free</span>
                  </div>
                  <div class="flex justify-between text-gray-600">
                    <span>Tax</span>
                    <span id="cart-tax">$0.00</span>
                  </div>
                  <div class="border-t pt-3">
                    <div class="flex justify-between font-semibold text-lg">
                      <span>Total</span>
                      <span id="cart-total">$0.00</span>
                    </div>
                  </div>
                </div>

                <button
                  id="checkout-btn"
                  class="w-full mt-6 bg-blue-600 text-white hover:bg-blue-700 font-medium py-3 px-4 rounded-lg transition-colors"
                >
                  Proceed to Checkout
                </button>

                <button
                  id="continue-shopping-btn"
                  class="w-full mt-3 border border-gray-300 text-gray-700 hover:bg-gray-50 font-medium py-3 px-4 rounded-lg transition-colors"
                >
                  Continue Shopping
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Error State -->
        <div id="cart-error" class="hidden text-center py-16">
          <div
            class="w-20 h-20 mx-auto bg-red-100 rounded-full flex items-center justify-center mb-6"
          >
            <svg
              class="w-10 h-10 text-red-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">
            Something went wrong
          </h2>
          <p class="text-gray-600 mb-8">
            We couldn't load your cart. Please try again.
          </p>
          <button
            id="retry-cart-btn"
            class="bg-blue-600 text-white hover:bg-blue-700 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    </div>
  </div>

  <Footer slot="footer" />

  <script is:inline>
    (function () {
      var API_BASE = "https://corrison.corrisonapi.com/api/v1";
      var cartData = null; // Store cart data globally

      function getToken() {
        try {
          return localStorage.getItem("cart_token");
        } catch (e) {
          return null;
        }
      }

      function setToken(token) {
        try {
          if (token) localStorage.setItem("cart_token", token);
        } catch (e) {}
      }

      function makeHeaders() {
        var h = { "Content-Type": "application/json" };
        var t = getToken();
        if (t) h.Authorization = "Bearer " + t;
        return h;
      }

      function showMsg(text, good) {
        var d = document.createElement("div");
        d.style.position = "fixed";
        d.style.top = "16px";
        d.style.right = "16px";
        d.style.padding = "16px";
        d.style.borderRadius = "8px";
        d.style.color = "white";
        d.style.zIndex = "9999";
        d.style.backgroundColor = good ? "#10b981" : "#ef4444";
        d.textContent = text;
        document.body.appendChild(d);
        setTimeout(function () {
          if (d.parentNode) d.parentNode.removeChild(d);
        }, 3000);
      }

      function showEmpty() {
        var empty = document.getElementById("empty-cart");
        var content = document.getElementById("cart-content");
        var error = document.getElementById("cart-error");

        if (empty) empty.classList.remove("hidden");
        if (content) content.classList.add("hidden");
        if (error) error.classList.add("hidden");
      }

      function showContent() {
        var empty = document.getElementById("empty-cart");
        var content = document.getElementById("cart-content");
        var error = document.getElementById("cart-error");

        if (empty) empty.classList.add("hidden");
        if (content) content.classList.remove("hidden");
        if (error) error.classList.add("hidden");
      }

      function showError() {
        var empty = document.getElementById("empty-cart");
        var content = document.getElementById("cart-content");
        var error = document.getElementById("cart-error");

        if (empty) empty.classList.add("hidden");
        if (content) content.classList.add("hidden");
        if (error) error.classList.remove("hidden");
      }

      function updateCartSummary(cart) {
        var itemCount = document.getElementById("cart-item-count");
        var summaryItemCount = document.getElementById("summary-item-count");
        var subtotal = document.getElementById("cart-subtotal");
        var tax = document.getElementById("cart-tax");
        var total = document.getElementById("cart-total");

        if (itemCount) itemCount.textContent = cart.total_items || 0;
        if (summaryItemCount)
          summaryItemCount.textContent = cart.total_items || 0;
        if (subtotal)
          subtotal.textContent =
            "$" + parseFloat(cart.subtotal || 0).toFixed(2);
        if (tax) tax.textContent = "$" + parseFloat(cart.tax || 0).toFixed(2);
        if (total)
          total.textContent =
            "$" + parseFloat(cart.total || cart.subtotal || 0).toFixed(2);
      }

      function renderCartItems(cart) {
        var itemsList = document.getElementById("main-cart-items-list");
        if (!itemsList || !cart.items) return;

        itemsList.innerHTML = cart.items
          .map(function (item) {
            var product = item.product || {};
            var imageUrl =
              product.main_image ||
              product.featured_image ||
              "/static/images/placeholder.png";
            var unitPrice = parseFloat(item.unit_price || product.price || 0);
            var totalPrice = parseFloat(item.total_price || 0);

            return (
              '<div class="p-6 flex items-center space-x-4" data-item-id="' +
              item.id +
              '">' +
              '<div class="w-20 h-20 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0">' +
              '<img src="' +
              imageUrl +
              '" alt="' +
              product.name +
              '" class="w-full h-full object-cover">' +
              "</div>" +
              '<div class="flex-1 min-w-0">' +
              '<h3 class="text-lg font-medium text-gray-900 truncate">' +
              product.name +
              "</h3>" +
              '<p class="text-sm text-gray-500 mt-1">' +
              (product.product_type === "digital"
                ? "Digital Product"
                : "Physical Product") +
              "</p>" +
              '<div class="flex items-center justify-between mt-3">' +
              '<div class="flex items-center space-x-2">' +
              '<button data-action="decrease" data-item-id="' +
              item.id +
              '" data-current-quantity="' +
              item.quantity +
              '" class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-50">' +
              "<span>−</span>" +
              "</button>" +
              '<span class="px-3 font-medium">' +
              item.quantity +
              "</span>" +
              '<button data-action="increase" data-item-id="' +
              item.id +
              '" data-current-quantity="' +
              item.quantity +
              '" class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-50">' +
              "<span>+</span>" +
              "</button>" +
              "</div>" +
              '<div class="text-right">' +
              '<p class="text-lg font-medium text-gray-900">$' +
              totalPrice.toFixed(2) +
              "</p>" +
              '<p class="text-sm text-gray-500">$' +
              unitPrice.toFixed(2) +
              " each</p>" +
              "</div>" +
              "</div>" +
              "</div>" +
              '<button data-action="remove" data-item-id="' +
              item.id +
              '" class="p-1 text-gray-400 hover:text-red-600">' +
              '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">' +
              '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>' +
              "</svg>" +
              "</button>" +
              "</div>"
            );
          })
          .join("");
      }

      function loadCart() {
        console.log("Loading cart data...");

        fetch(API_BASE + "/cart/", {
          headers: makeHeaders(),
        })
          .then(function (r) {
            console.log("Cart API response status:", r.status);
            if (r.ok) return r.json();
            throw new Error("Failed to load cart");
          })
          .then(function (cart) {
            console.log("Cart data loaded:", cart);
            cartData = cart; // Store cart data

            if (!cart || cart.total_items === 0) {
              showEmpty();
            } else {
              showContent();
              updateCartSummary(cart);
              renderCartItems(cart);
            }
          })
          .catch(function (error) {
            console.error("Error loading cart:", error);
            showError();
          });
      }

      function updateItemQuantity(itemId, action) {
        // Find the current quantity from button's data attribute
        var btn = document.querySelector(
          '[data-item-id="' + itemId + '"][data-action="' + action + '"]',
        );
        var currentQuantity = parseInt(
          btn.getAttribute("data-current-quantity") || "1",
        );

        // Calculate new quantity
        var newQuantity =
          action === "increase" ? currentQuantity + 1 : currentQuantity - 1;

        // Don't allow quantity less than 1
        if (newQuantity < 1) {
          if (confirm("Remove this item from your cart?")) {
            removeItem(itemId);
          }
          return;
        }

        // Use PATCH to update the quantity
        fetch(API_BASE + "/items/" + itemId + "/", {
          method: "PATCH",
          headers: makeHeaders(),
          body: JSON.stringify({ quantity: newQuantity }),
        })
          .then(function (r) {
            if (r.ok) return r.json();
            throw new Error("Failed to update quantity");
          })
          .then(function () {
            showMsg("Quantity updated", true);
            loadCart();
            window.dispatchEvent(new CustomEvent("cartUpdated"));
          })
          .catch(function (err) {
            console.error("Error updating quantity:", err);
            showMsg("Failed to update quantity", false);
          });
      }

      function removeItem(itemId) {
        fetch(API_BASE + "/items/" + itemId + "/", {
          method: "DELETE",
          headers: makeHeaders(),
        })
          .then(function (r) {
            if (r.ok) {
              showMsg("Item removed from cart", true);
              loadCart();
              window.dispatchEvent(new CustomEvent("cartUpdated"));
            } else {
              throw new Error("Failed to remove item");
            }
          })
          .catch(function (err) {
            console.error("Error removing item:", err);
            showMsg("Failed to remove item", false);
          });
      }

      function clearCart() {
        if (!confirm("Are you sure you want to clear your cart?")) return;

        fetch(API_BASE + "/cart/clear/", {
          method: "POST",
          headers: makeHeaders(),
        })
          .then(function (r) {
            if (r.ok) {
              showMsg("Cart cleared", true);
              loadCart();
              window.dispatchEvent(new CustomEvent("cartUpdated"));
            } else {
              throw new Error("Failed to clear cart");
            }
          })
          .catch(function (err) {
            console.error("Error clearing cart:", err);
            showMsg("Failed to clear cart", false);
          });
      }

      function init() {
        // Load cart on page load
        loadCart();

        // Set up event delegation for cart actions
        document.addEventListener("click", function (e) {
          var btn = e.target.closest("[data-action]");
          if (!btn) return;

          var action = btn.dataset.action;
          var itemId = btn.dataset.itemId;

          if (action === "increase") {
            updateItemQuantity(itemId, "increase");
          } else if (action === "decrease") {
            updateItemQuantity(itemId, "decrease");
          } else if (action === "remove") {
            removeItem(itemId);
          }
        });

        // Clear cart button
        var clearBtn = document.getElementById("clear-cart-btn");
        if (clearBtn) {
          clearBtn.addEventListener("click", clearCart);
        }

        // Checkout button
        var checkoutBtn = document.getElementById("checkout-btn");
        if (checkoutBtn) {
          checkoutBtn.addEventListener("click", function () {
            window.location.href = "/checkout";
          });
        }

        // Continue shopping button
        var continueBtn = document.getElementById("continue-shopping-btn");
        if (continueBtn) {
          continueBtn.addEventListener("click", function () {
            window.location.href = "/ecommerce/products";
          });
        }

        // Retry button for error state
        var retryBtn = document.getElementById("retry-cart-btn");
        if (retryBtn) {
          retryBtn.addEventListener("click", function () {
            loadCart();
          });
        }
      }

      // Initialize
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", init);
      } else {
        init();
      }
    })();
  </script>
</BaseLayout>
