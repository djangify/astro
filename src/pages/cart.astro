---
// src/pages/cart.astro
import BaseLayout from "../layouts/BaseLayout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

// SEO meta information
const metaTitle = "Shopping Cart – Corrison";
const metaDescription = "Review and manage items in your cart before checkout.";
---

<BaseLayout>
  <Header slot="header" />
  <title slot="title">{metaTitle}</title>
  <meta slot="head" name="description" content={metaDescription} />
  <meta slot="head" property="og:title" content={metaTitle} />
  <meta slot="head" property="og:description" content={metaDescription} />
  <meta slot="head" property="og:type" content="website" />

  <div class="min-h-screen bg-gray-50">
    <!-- Page Header -->
    <section class="bg-white border-b border-gray-200">
      <div class="container mx-auto px-4 py-6">
        <h1 class="text-2xl lg:text-3xl font-bold text-gray-900">
          Shopping Cart
        </h1>
        <div class="mt-2 flex items-center space-x-2 text-sm text-gray-600">
          <a href="/ecommerce/products" class="hover:text-blue-600">Products</a>
          <span>→</span>
          <span class="text-gray-900 font-medium">Cart</span>
        </div>
      </div>
    </section>

    <div class="container mx-auto px-4 py-8">
      <div class="max-w-6xl mx-auto">
        <!-- Loading State -->
        <div id="cart-loading" class="text-center py-16">
          <div
            class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"
          >
          </div>
          <p class="text-gray-600">Loading cart...</p>
        </div>

        <!-- Empty Cart State -->
        <div id="empty-cart" class="hidden text-center py-16">
          <div
            class="w-20 h-20 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-6"
          >
            <svg
              class="w-10 h-10 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 7m0 0l-1.5-5M7 13l-2-8m0 0h16m-7 4v8a2 2 0 01-2 2H9a2 2 0 01-2-2v-8a2 2 0 012-2h2a2 2 0 012 2z"
              >
              </path>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">
            Your cart is empty
          </h2>
          <p class="text-gray-600 mb-8">
            Add some amazing products to get started!
          </p>
          <a
            href="/ecommerce/products"
            class="bg-blue-600 text-white hover:bg-blue-700 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Browse Products
          </a>
        </div>

        <!-- Cart Content -->
        <div id="cart-content" class="hidden">
          <div class="lg:grid lg:grid-cols-3 lg:gap-8">
            <!-- Cart Items -->
            <div class="lg:col-span-2">
              <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <div class="p-6 border-b border-gray-200">
                  <div class="flex items-center justify-between">
                    <h2 class="text-lg font-semibold text-gray-900">
                      Cart Items (<span id="cart-item-count">0</span>)
                    </h2>
                    <button
                      id="clear-cart-btn"
                      class="text-sm text-red-600 hover:text-red-700 font-medium"
                    >
                      Clear Cart
                    </button>
                  </div>
                </div>
                <div id="cart-items-list" class="divide-y divide-gray-200">
                  <!-- Items will be populated by JavaScript -->
                </div>
              </div>
            </div>

            <!-- Order Summary -->
            <div class="mt-8 lg:mt-0">
              <div
                class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 sticky top-4"
              >
                <h3 class="text-lg font-semibold text-gray-900 mb-4">
                  Order Summary
                </h3>

                <div class="space-y-3 mb-6">
                  <div class="flex justify-between text-gray-600">
                    <span>Items (<span id="summary-item-count">0</span>)</span>
                    <span id="cart-subtotal">$0.00</span>
                  </div>
                  <div class="flex justify-between text-gray-600">
                    <span>Shipping</span>
                    <span class="text-green-600">Free</span>
                  </div>
                  <div class="flex justify-between text-gray-600">
                    <span>Tax</span>
                    <span id="cart-tax">$0.00</span>
                  </div>
                </div>

                <div class="border-t border-gray-200 pt-4 mb-6">
                  <div
                    class="flex justify-between text-xl font-bold text-gray-900"
                  >
                    <span>Total</span>
                    <span id="cart-total">$0.00</span>
                  </div>
                </div>

                <a
                  href="/checkout"
                  id="checkout-btn"
                  class="block w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-6 rounded-lg text-center transition-all duration-300 transform hover:scale-105 shadow-lg mb-4"
                >
                  Proceed to Checkout
                </a>

                <a
                  href="/ecommerce/products"
                  class="block w-full text-center text-blue-600 hover:text-blue-700 font-medium py-3 transition-colors"
                >
                  Continue Shopping
                </a>

                <!-- Digital Product Notice -->
                <div class="mt-6 pt-6 border-t border-gray-200">
                  <div
                    class="bg-purple-50 border border-purple-200 rounded-lg p-4"
                  >
                    <div class="flex items-start">
                      <svg
                        class="w-5 h-5 text-purple-600 mt-0.5 mr-3"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"
                        >
                        </path>
                      </svg>
                      <div>
                        <h4 class="text-sm font-semibold text-purple-900">
                          Digital Products
                        </h4>
                        <p class="text-sm text-purple-700 mt-1">
                          Get instant access after payment - no shipping
                          required!
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Error State -->
        <div id="cart-error" class="hidden text-center py-16">
          <div
            class="w-20 h-20 mx-auto bg-red-100 rounded-full flex items-center justify-center mb-6"
          >
            <svg
              class="w-10 h-10 text-red-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"
              >
              </path>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">Cart Error</h2>
          <p class="text-gray-600 mb-8">
            We're having trouble loading your cart. Please try again.
          </p>
          <button
            id="retry-cart-btn"
            class="bg-blue-600 text-white hover:bg-blue-700 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    </div>
  </div>

  <Footer slot="footer" />
</BaseLayout>

<script type="module">
  let cartManager;

  async function initializeCartManager() {
    try {
      // FIXED: Use relative path instead of absolute path
      const module = await import("../lib/cart.js");
      cartManager = module.cartManager;
      console.log("Cart manager imported successfully:", cartManager);
      return cartManager;
    } catch (error) {
      console.error("Failed to import cart manager:", error);
      throw error;
    }
  }

  const elements = {
    cartLoading: document.getElementById("cart-loading"),
    cartContent: document.getElementById("cart-content"),
    emptyCart: document.getElementById("empty-cart"),
    cartError: document.getElementById("cart-error"),
    cartItemsList: document.getElementById("cart-items-list"),
    cartItemCount: document.getElementById("cart-item-count"),
    summaryItemCount: document.getElementById("summary-item-count"),
    cartSubtotal: document.getElementById("cart-subtotal"),
    cartTax: document.getElementById("cart-tax"),
    cartTotal: document.getElementById("cart-total"),
    clearCartBtn: document.getElementById("clear-cart-btn"),
    checkoutBtn: document.getElementById("checkout-btn"),
    retryCartBtn: document.getElementById("retry-cart-btn"),
  };

  let currentCartData = null;

  async function initializeCartPage() {
    try {
      showLoadingState();
      await initializeCartManager();
      await loadCartData();
    } catch (error) {
      console.error("Error initializing cart page:", error);
      showErrorState();
    }
  }

  async function loadCartData() {
    try {
      const cartData = await cartManager.loadCartData();
      if (!cartData || cartData.total_items === 0) {
        showEmptyCartState();
        return;
      }
      currentCartData = cartData;
      renderCartItems();
      updateCartSummary();
      showCartContent();
    } catch (error) {
      console.error("Error loading cart data:", error);
      showErrorState();
    }
  }

  function renderCartItems() {
    if (!currentCartData || !elements.cartItemsList) return;
    const items = currentCartData.items || [];
    elements.cartItemsList.innerHTML = items
      .map((item) => createCartItemHTML(item))
      .join("");
    if (elements.cartItemCount)
      elements.cartItemCount.textContent = items.length.toString();
    if (elements.summaryItemCount)
      elements.summaryItemCount.textContent = items.length.toString();
  }

  function createCartItemHTML(item) {
    const product = item.product;
    const imageUrl = product.main_image || "/static/images/placeholder.png";
    const unitPrice =
      typeof item.unit_price === "string"
        ? parseFloat(item.unit_price)
        : item.unit_price;
    const totalPrice =
      typeof item.total_price === "string"
        ? parseFloat(item.total_price)
        : item.total_price;

    return `
      <div class="p-6 cart-item" data-item-id="${item.id}">
        <div class="flex items-start space-x-4">
          <img 
            src="${imageUrl}" 
            alt="${product.name}"
            class="w-20 h-20 object-cover rounded-lg"
            onerror="this.src='/static/images/placeholder.png'"
          />
          <div class="flex-1 min-w-0">
            <h3 class="text-lg font-medium text-gray-900">${product.name}</h3>
            <p class="text-sm text-gray-600 mt-1">${product.short_description || ""}</p>
            <div class="mt-2 flex items-center space-x-4">
              <span class="text-lg font-bold text-gray-900">$${unitPrice.toFixed(2)}</span>
              ${product.category ? `<span class="text-sm text-gray-500">${product.category.name}</span>` : ""}
            </div>
          </div>
          <div class="flex items-center space-x-3">
            <div class="flex items-center border border-gray-300 rounded-lg">
              <button 
                class="quantity-decrease p-2 hover:bg-gray-50" 
                data-item-id="${item.id}"
                ${item.quantity <= 1 ? "disabled" : ""}
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                </svg>
              </button>
              <span class="px-4 py-2 text-sm font-medium item-quantity">${item.quantity}</span>
              <button class="quantity-increase p-2 hover:bg-gray-50" data-item-id="${item.id}">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
              </button>
            </div>
            <div class="text-right min-w-0">
              <div class="text-lg font-bold text-gray-900">$${totalPrice.toFixed(2)}</div>
            </div>
            <button class="remove-item text-red-600 hover:text-red-700 p-2" data-item-id="${item.id}">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    `;
  }

  function updateCartSummary() {
    if (!currentCartData) return;

    const subtotal =
      typeof currentCartData.subtotal === "string"
        ? parseFloat(currentCartData.subtotal)
        : currentCartData.subtotal;
    const tax = 0; // Digital products typically don't have tax
    const total = subtotal + tax;

    if (elements.cartSubtotal)
      elements.cartSubtotal.textContent = `$${subtotal.toFixed(2)}`;
    if (elements.cartTax) elements.cartTax.textContent = `$${tax.toFixed(2)}`;
    if (elements.cartTotal)
      elements.cartTotal.textContent = `$${total.toFixed(2)}`;
  }

  async function handleQuantityChange(itemId, newQuantity) {
    try {
      showItemLoading(itemId);
      const result = await cartManager.updateCartItem(itemId, newQuantity);

      if (result.success) {
        await loadCartData(); // Reload cart data
        showNotification("Cart updated successfully", "success");
      } else {
        showNotification(result.message || "Failed to update cart", "error");
      }
    } catch (error) {
      console.error("Error updating cart item:", error);
      showNotification("Failed to update cart", "error");
    }
  }

  async function handleRemoveItem(itemId) {
    try {
      const result = await cartManager.removeFromCart(itemId);

      if (result.success) {
        await loadCartData(); // Reload cart data
        showNotification("Item removed from cart", "success");
      } else {
        showNotification(result.message || "Failed to remove item", "error");
      }
    } catch (error) {
      console.error("Error removing cart item:", error);
      showNotification("Failed to remove item", "error");
    }
  }

  async function handleClearCart() {
    if (!confirm("Are you sure you want to clear your cart?")) return;

    try {
      const result = await cartManager.clearCart();

      if (result.success) {
        showEmptyCartState();
        showNotification("Cart cleared successfully", "success");
      } else {
        showNotification(result.message || "Failed to clear cart", "error");
      }
    } catch (error) {
      console.error("Error clearing cart:", error);
      showNotification("Failed to clear cart", "error");
    }
  }

  function showItemLoading(itemId) {
    const itemElement = document.querySelector(`[data-item-id="${itemId}"]`);
    if (itemElement) {
      itemElement.style.opacity = "0.5";
      itemElement.style.pointerEvents = "none";
    }
  }

  function showNotification(message, type = "info") {
    const notification = document.createElement("div");
    notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 max-w-sm ${
      type === "success"
        ? "bg-green-500 text-white"
        : type === "error"
          ? "bg-red-500 text-white"
          : "bg-blue-500 text-white"
    }`;
    notification.textContent = message;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  function showLoadingState() {
    hideAllStates();
    elements.cartLoading?.classList.remove("hidden");
  }

  function showCartContent() {
    hideAllStates();
    elements.cartContent?.classList.remove("hidden");
  }

  function showEmptyCartState() {
    hideAllStates();
    elements.emptyCart?.classList.remove("hidden");
  }

  function showErrorState() {
    hideAllStates();
    elements.cartError?.classList.remove("hidden");
  }

  function hideAllStates() {
    elements.cartLoading?.classList.add("hidden");
    elements.cartContent?.classList.add("hidden");
    elements.emptyCart?.classList.add("hidden");
    elements.cartError?.classList.add("hidden");
  }

  function setupEventListeners() {
    // Quantity change buttons
    document.addEventListener("click", async (e) => {
      if (e.target.closest(".quantity-increase")) {
        const itemId = e.target.closest(".quantity-increase").dataset.itemId;
        const currentQty = parseInt(
          e.target.closest(".flex").querySelector(".item-quantity").textContent,
        );
        await handleQuantityChange(itemId, currentQty + 1);
      }

      if (e.target.closest(".quantity-decrease")) {
        const itemId = e.target.closest(".quantity-decrease").dataset.itemId;
        const currentQty = parseInt(
          e.target.closest(".flex").querySelector(".item-quantity").textContent,
        );
        if (currentQty > 1) {
          await handleQuantityChange(itemId, currentQty - 1);
        }
      }

      if (e.target.closest(".remove-item")) {
        const itemId = e.target.closest(".remove-item").dataset.itemId;
        await handleRemoveItem(itemId);
      }
    });

    // Clear cart button
    elements.clearCartBtn?.addEventListener("click", handleClearCart);

    // Retry button
    elements.retryCartBtn?.addEventListener("click", initializeCartPage);
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    setupEventListeners();
    initializeCartPage();
  });
</script>
