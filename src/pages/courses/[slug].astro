---
// src/pages/courses/[slug].astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { fetchCourses, fetchCourse } from "../../lib/api";
import type { Course } from "../../types";

// Generate all course routes at build time with error handling
export async function getStaticPaths() {
  try {
    const courses = await fetchCourses();

    if (!courses || courses.length === 0) {
      console.warn("No courses found, returning empty paths array");
      return [];
    }

    return courses.map((course) => ({
      params: { slug: course.slug },
      props: { course },
    }));
  } catch (error) {
    console.error("Error fetching courses for static paths:", error);

    // Return empty array to allow build to continue
    // In production, you might want to return some default courses
    return [];
  }
}

// Get the course from props, with fallback handling
const { course } = Astro.props;

// If no course data (build fallback), create a minimal course object
const courseData: Course = course || {
  id: 0,
  title: "Course Not Found",
  slug: "not-found",
  description: "This course could not be loaded.",
  content: "",
  price: 0,
  featured_image: "",
  video_preview: "",
  duration_weeks: 0,
  difficulty_level: "beginner" as const,
  is_published: false,
  is_featured: false,
  category: null,
  instructor: {
    id: 0,
    name: "Unknown Instructor",
    bio: "",
    avatar: "",
    expertise_areas: [],
  },
  lessons: [],
  enrollments_count: 0,
  average_rating: 0,
  created_at: "",
  updated_at: "",
};

// Helper functions
const getDurationDisplay = (weeks: number): string => {
  if (weeks === 1) return "1 week";
  if (weeks === 0) return "Self-paced";
  return `${weeks} weeks`;
};

const getLevelColor = (level: string): string => {
  switch (level.toLowerCase()) {
    case "beginner":
      return "bg-green-100 text-green-800 border-green-200";
    case "intermediate":
      return "bg-yellow-100 text-yellow-800 border-yellow-200";
    case "advanced":
      return "bg-red-100 text-red-800 border-red-200";
    default:
      return "bg-gray-100 text-gray-800 border-gray-200";
  }
};

// If course not found, return 404-like response
if (!course) {
  return Astro.redirect("/404");
}
---

<BaseLayout>
  <Header slot="header" />
  <title slot="title">{courseData.title} â€“ Corrison Courses</title>
  <meta
    slot="head"
    name="description"
    content={courseData.description ||
      `Learn ${courseData.title} with our comprehensive course. ${courseData.difficulty_level} level course by ${courseData.instructor?.name || "expert instructors"}.`}
  />

  <div class="min-h-screen bg-gray-50">
    <!-- Course Hero Section -->
    <section class="bg-white border-b border-gray-200">
      <div class="container mx-auto px-4 py-12">
        <div class="grid lg:grid-cols-2 gap-12 items-start">
          <!-- Left Column - Course Info -->
          <div>
            <!-- Breadcrumb -->
            <nav class="mb-6">
              <ol class="flex items-center space-x-2 text-sm text-gray-500">
                <li>
                  <a href="/courses" class="hover:text-teal-700">Courses</a>
                </li>
                <li><span class="mx-2">/</span></li>
                {
                  courseData.category && (
                    <>
                      <li>
                        <span class="text-gray-400">
                          {courseData.category.name}
                        </span>
                      </li>
                      <li>
                        <span class="mx-2">/</span>
                      </li>
                    </>
                  )
                }
                <li>
                  <span class="text-gray-900 font-medium"
                    >{courseData.title}</span
                  >
                </li>
              </ol>
            </nav>

            <!-- Course Title -->
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              {courseData.title}
            </h1>

            <!-- Course Description -->
            {
              courseData.description && (
                <p class="text-xl text-gray-600 mb-6 leading-relaxed">
                  {courseData.description}
                </p>
              )
            }

            <!-- Course Meta -->
            <div class="flex flex-wrap items-center gap-4 mb-8">
              <!-- Level Badge -->
              <span
                class={`px-3 py-1 text-sm font-medium rounded-full border ${getLevelColor(courseData.difficulty_level)}`}
              >
                {courseData.difficulty_level}
              </span>

              <!-- Duration -->
              <div class="flex items-center text-gray-600">
                <svg
                  class="h-5 w-5 mr-2"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                {getDurationDisplay(courseData.duration_weeks)}
              </div>

              <!-- Enrollment Count -->
              {
                courseData.enrollments_count !== undefined &&
                  courseData.enrollments_count > 0 && (
                    <div class="flex items-center text-gray-600">
                      <svg
                        class="h-5 w-5 mr-2"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                        />
                      </svg>
                      {courseData.enrollments_count} enrolled
                    </div>
                  )
              }

              <!-- Rating -->
              {
                courseData.average_rating !== undefined &&
                  courseData.average_rating > 0 && (
                    <div class="flex items-center text-gray-600">
                      <svg
                        class="h-5 w-5 mr-2 text-yellow-400"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                      {courseData.average_rating.toFixed(1)}
                    </div>
                  )
              }
            </div>

            <!-- Instructor Info -->
            {
              courseData.instructor && (
                <div class="bg-gray-50 rounded-lg p-6 mb-8">
                  <h3 class="text-lg font-semibold text-gray-900 mb-4">
                    Your Instructor
                  </h3>
                  <div class="flex items-start space-x-4">
                    {courseData.instructor.avatar ? (
                      <img
                        src={courseData.instructor.avatar}
                        alt={courseData.instructor.name}
                        class="w-16 h-16 rounded-full object-cover flex-shrink-0"
                        loading="lazy"
                      />
                    ) : (
                      <div class="w-16 h-16 rounded-full bg-teal-100 flex items-center justify-center flex-shrink-0">
                        <svg
                          class="h-8 w-8 text-teal-600"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                          />
                        </svg>
                      </div>
                    )}
                    <div class="flex-1">
                      <h4 class="font-semibold text-gray-900">
                        {courseData.instructor.name}
                      </h4>
                      {courseData.instructor.bio && (
                        <p class="text-gray-600 text-sm mt-2">
                          {courseData.instructor.bio}
                        </p>
                      )}
                      {courseData.instructor.expertise_areas &&
                        courseData.instructor.expertise_areas.length > 0 && (
                          <div class="flex flex-wrap gap-1 mt-2">
                            {courseData.instructor.expertise_areas.map(
                              (area) => (
                                <span class="bg-teal-100 text-teal-800 text-xs px-2 py-1 rounded-full">
                                  {area}
                                </span>
                              ),
                            )}
                          </div>
                        )}
                    </div>
                  </div>
                </div>
              )
            }
          </div>

          <!-- Right Column - Course Media & Enrollment -->
          <div class="lg:sticky lg:top-24">
            <!-- Course Image/Video -->
            <div class="relative mb-6">
              {
                courseData.featured_image ? (
                  <img
                    src={courseData.featured_image}
                    alt={courseData.title}
                    class="w-full h-64 lg:h-80 object-cover rounded-lg shadow-lg"
                    loading="lazy"
                  />
                ) : (
                  <div class="w-full h-64 lg:h-80 bg-gradient-to-br from-teal-400 to-teal-600 rounded-lg shadow-lg flex items-center justify-center">
                    <svg
                      class="h-20 w-20 text-white opacity-50"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                      />
                    </svg>
                  </div>
                )
              }

              <!-- Preview/Play Button Overlay -->
              {
                courseData.video_preview && (
                  <button
                    class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 hover:bg-opacity-40 transition-all rounded-lg"
                    onclick="playPreview()"
                  >
                    <div class="bg-white rounded-full p-4 shadow-lg">
                      <svg
                        class="h-8 w-8 text-teal-700"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z"
                          clip-rule="evenodd"
                        />
                      </svg>
                    </div>
                  </button>
                )
              }
            </div>

            <!-- Enrollment Card -->
            <div
              class="bg-white border border-gray-200 rounded-lg shadow-lg p-6"
            >
              <!-- Price -->
              <div class="text-center mb-6">
                {
                  courseData.price > 0 ? (
                    <div>
                      <span class="text-4xl font-bold text-gray-900">
                        ${courseData.price}
                      </span>
                    </div>
                  ) : (
                    <span class="text-4xl font-bold text-green-600">FREE</span>
                  )
                }
              </div>

              <!-- Enrollment Status/Button -->
              <div id="enrollment-section" class="space-y-4">
                <!-- This will be populated by JavaScript based on auth status -->
                <div id="enrollment-loading" class="text-center">
                  <div class="animate-pulse bg-gray-200 h-12 rounded-lg"></div>
                </div>
              </div>

              <!-- Course Features -->
              <div class="mt-6 pt-6 border-t border-gray-200">
                <h4 class="font-semibold text-gray-900 mb-3">
                  This course includes:
                </h4>
                <ul class="space-y-2 text-sm">
                  <li class="flex items-center">
                    <svg
                      class="h-4 w-4 text-green-500 mr-3"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    {getDurationDisplay(courseData.duration_weeks)} of content
                  </li>

                  <li class="flex items-center">
                    <svg
                      class="h-4 w-4 text-green-500 mr-3"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Lifetime access
                  </li>

                  <li class="flex items-center">
                    <svg
                      class="h-4 w-4 text-green-500 mr-3"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                      ></path>
                    </svg>
                    Certificate of completion
                  </li>

                  <li class="flex items-center">
                    <svg
                      class="h-4 w-4 text-green-500 mr-3"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      ></path>
                    </svg>
                    Access on mobile and desktop
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Course Content/Description -->
    {
      courseData.content && (
        <section class="py-12 bg-white">
          <div class="container mx-auto px-4">
            <div class="max-w-4xl mx-auto">
              <h2 class="text-3xl font-bold text-gray-900 mb-8">
                About This Course
              </h2>
              <div
                class="prose prose-lg max-w-none"
                set:html={courseData.content}
              />
            </div>
          </div>
        </section>
      )
    }
  </div>

  <Footer slot="footer" />
</BaseLayout>

<!-- JavaScript for enrollment and preview functionality -->
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    // Get course data from the page
    const courseElement = document.querySelector("[data-course-id]");
    const courseId = courseElement?.getAttribute("data-course-id");

    if (!courseId) {
      console.error("Course ID not found");
      return;
    }

    const course = {
      id: parseInt(courseId),
      slug: window.location.pathname.split("/").pop(),
      title: document.querySelector("h1")?.textContent || "Course",
      price: parseFloat(
        document
          .querySelector("[data-course-price]")
          ?.getAttribute("data-course-price") || "0",
      ),
      video_preview: document
        .querySelector("[data-video-preview]")
        ?.getAttribute("data-video-preview"),
    };

    let userEnrollment = null;

    // Initialize enrollment section
    initializeEnrollmentSection();

    async function initializeEnrollmentSection() {
      const enrollmentSection = document.getElementById("enrollment-section");
      const loadingDiv = document.getElementById("enrollment-loading");

      try {
        // Check if user is authenticated
        const authToken = localStorage.getItem("access_token");

        if (!authToken) {
          // User not logged in
          showLoginPrompt();
        } else {
          // Check if user is already enrolled
          try {
            const api = await import("/src/lib/api.ts");
            const userCourses = await api.fetchUserCourses();
            userEnrollment = userCourses.find(
              (enrollment) => enrollment.course.id === course.id,
            );

            if (userEnrollment) {
              showEnrolledState();
            } else {
              showEnrollmentButton();
            }
          } catch (apiError) {
            console.error("Error fetching user courses:", apiError);
            showEnrollmentButton();
          }
        }
      } catch (error) {
        console.error("Error checking enrollment status:", error);
        showEnrollmentButton();
      } finally {
        if (loadingDiv) {
          loadingDiv.style.display = "none";
        }
      }
    }

    function showLoginPrompt() {
      const enrollmentSection = document.getElementById("enrollment-section");
      if (enrollmentSection) {
        enrollmentSection.innerHTML = `
          <div class="text-center space-y-4">
            <p class="text-gray-600">Sign in to enroll in this course</p>
            <a 
              href="/auth/login?redirect=${encodeURIComponent(window.location.pathname)}"
              class="block w-full bg-teal-700 hover:bg-teal-800 text-white font-medium py-3 px-6 rounded-lg transition-colors"
            >
              Sign In to Enroll
            </a>
            <p class="text-sm text-gray-500">
              Don't have an account? 
              <a href="/auth/register" class="text-teal-700 hover:text-teal-800">Sign up here</a>
            </p>
          </div>
        `;
      }
    }

    function showEnrollmentButton() {
      const enrollmentSection = document.getElementById("enrollment-section");
      if (enrollmentSection) {
        enrollmentSection.innerHTML = `
          <button
            id="enroll-btn"
            class="w-full bg-teal-700 hover:bg-teal-800 text-white font-medium py-3 px-6 rounded-lg transition-colors"
          >
            ${course.price > 0 ? `Enroll Now - $${course.price}` : "Enroll for Free"}
          </button>
          <div class="text-center">
            <p class="text-sm text-gray-500">30-day money-back guarantee</p>
          </div>
        `;

        // Add enrollment click handler
        const enrollBtn = document.getElementById("enroll-btn");
        if (enrollBtn) {
          enrollBtn.addEventListener("click", handleEnrollment);
        }
      }
    }

    function showEnrolledState() {
      const enrollmentSection = document.getElementById("enrollment-section");
      if (enrollmentSection && userEnrollment) {
        const progressPercentage = userEnrollment.progress_percentage || 0;

        enrollmentSection.innerHTML = `
          <div class="space-y-4">
            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
              <div class="flex items-center">
                <svg class="h-5 w-5 text-green-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                <span class="text-green-800 font-medium">You're enrolled in this course</span>
              </div>
            </div>
            
            <div class="space-y-2">
              <div class="flex justify-between text-sm">
                <span class="text-gray-600">Course Progress</span>
                <span class="text-gray-900 font-medium">${progressPercentage}%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-teal-700 h-2 rounded-full transition-all duration-300" style="width: ${progressPercentage}%"></div>
              </div>
            </div>

            <a
              href="/courses/${course.slug}/dashboard"
              class="block w-full bg-teal-700 hover:bg-teal-800 text-white font-medium py-3 px-6 rounded-lg transition-colors text-center"
            >
              ${progressPercentage > 0 ? "Continue Learning" : "Start Course"}
            </a>
          </div>
        `;
      }
    }

    async function handleEnrollment() {
      const enrollBtn = document.getElementById("enroll-btn");
      if (!enrollBtn) return;

      const originalText = enrollBtn.textContent;

      // Disable button and show loading
      enrollBtn.disabled = true;
      enrollBtn.textContent = "Enrolling...";
      enrollBtn.classList.add("opacity-50", "cursor-not-allowed");

      try {
        const api = await import("/src/lib/api.ts");
        const enrollment = await api.enrollInCourse(course.id);

        // Update global state
        userEnrollment = enrollment;

        // Show success state
        enrollBtn.textContent = "Enrolled!";
        enrollBtn.classList.remove("bg-teal-700", "hover:bg-teal-800");
        enrollBtn.classList.add("bg-green-600");

        // Wait a moment then redirect to course dashboard
        setTimeout(() => {
          window.location.href = `/courses/${course.slug}/dashboard`;
        }, 1500);
      } catch (error) {
        console.error("Enrollment failed:", error);

        // Reset button and show error
        enrollBtn.disabled = false;
        enrollBtn.textContent = originalText;
        enrollBtn.classList.remove("opacity-50", "cursor-not-allowed");

        // Show error message
        alert("Failed to enroll in course. Please try again.");
      }
    }

    // Preview video functionality
    window.playPreview = function () {
      if (course.video_preview) {
        // Create and show video modal
        const modal = document.createElement("div");
        modal.className =
          "fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4";
        modal.innerHTML = `
          <div class="relative bg-white rounded-lg w-full max-w-4xl">
            <button 
              onclick="this.closest('.fixed').remove()"
              class="absolute top-4 right-4 text-gray-500 hover:text-gray-700 z-10"
            >
              <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            <div class="aspect-video">
              <iframe
                src="${course.video_preview}"
                class="w-full h-full rounded-lg"
                allowfullscreen
              ></iframe>
            </div>
          </div>
        `;
        document.body.appendChild(modal);
      }
    };
  });
</script>

<!-- Hidden data attributes for JavaScript -->
<div
  data-course-id={courseData.id.toString()}
  data-course-price={courseData.price.toString()}
  data-video-preview={courseData.video_preview}
  style="display: none;"
>
</div>
