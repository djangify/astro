---
// src/pages/courses/my-courses.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import DashboardNav from "../../components/dashboard/DashboardNav.astro";

// This page requires authentication, so we'll handle data loading client-side
---

<BaseLayout>
  <title slot="title">My Courses ‚Äì Corrison</title>
  <meta
    slot="head"
    name="description"
    content="Track your learning progress and continue your courses. Access all your enrolled courses in one place."
  />

  <!-- Dashboard Navigation -->
  <DashboardNav currentPage="courses" />

  <!-- Main Content with Sidebar Layout -->
  <div class="lg:ml-64">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Page Header -->
      <section>
        <div class="container mx-auto px-4 py-12">
          <div class="max-w-4xl mx-auto">
            <h1 class="text-3xl font-semibold text-gray-900 mb-4">
              My Courses
            </h1>
            <p class="text-xl text-gray-600">
              Access all your enrolled courses in one place.
            </p>
          </div>
        </div>
      </section>

      <!-- Main Content -->
      <main class="container mx-auto px-4 py-12">
        <!-- Loading State -->
        <div id="loading-state" class="text-center py-16">
          <div
            class="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-700 mx-auto mb-4"
          >
          </div>
          <p class="text-gray-600">Loading your courses...</p>
        </div>

        <!-- Not Authenticated State removed -->

        <!-- Course Statistics -->
        <div id="course-stats" class="hidden mb-12">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div class="bg-white rounded-lg shadow-sm p-6 text-center">
              <div class="text-3xl font-bold text-teal-700" id="total-courses">
                0
              </div>
              <div class="text-sm text-gray-600">Total Courses</div>
            </div>
            <div class="bg-white rounded-lg shadow-sm p-6 text-center">
              <div
                class="text-3xl font-bold text-green-600"
                id="completed-courses"
              >
                0
              </div>
              <div class="text-sm text-gray-600">Completed</div>
            </div>
            <div class="bg-white rounded-lg shadow-sm p-6 text-center">
              <div
                class="text-3xl font-bold text-blue-600"
                id="in-progress-courses"
              >
                0
              </div>
              <div class="text-sm text-gray-600">In Progress</div>
            </div>
            <div class="bg-white rounded-lg shadow-sm p-6 text-center">
              <div class="text-3xl font-bold text-gray-600" id="avg-progress">
                0%
              </div>
              <div class="text-sm text-gray-600">Avg Progress</div>
            </div>
          </div>
        </div>

        <!-- Filter/Sort Controls -->
        <div id="course-controls" class="hidden mb-8">
          <div
            class="flex flex-col md:flex-row gap-4 items-center justify-between"
          >
            <div class="flex flex-wrap gap-4">
              <!-- Status Filter -->
              <select
                id="status-filter"
                class="border border-gray-300 rounded-lg px-3 py-2 text-sm"
              >
                <option value="all">All Courses</option>
                <option value="not-started">Not Started</option>
                <option value="in-progress">In Progress</option>
                <option value="completed">Completed</option>
              </select>

              <!-- Sort Options -->
              <select
                id="sort-filter"
                class="border border-gray-300 rounded-lg px-3 py-2 text-sm"
              >
                <option value="recent">Recently Accessed</option>
                <option value="progress">Progress</option>
                <option value="enrollment-date">Enrollment Date</option>
                <option value="alphabetical">Alphabetical</option>
              </select>
            </div>

            <!-- View Toggle -->
            <div class="flex border border-gray-300 rounded-lg overflow-hidden">
              <button
                id="grid-view"
                class="px-3 py-2 bg-teal-700 text-white text-sm hover:bg-teal-800"
                data-view="grid"
              >
                <svg
                  class="h-4 w-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
                  ></path>
                </svg>
              </button>
              <button
                id="list-view"
                class="px-3 py-2 bg-gray-100 text-gray-700 text-sm hover:bg-gray-200"
                data-view="list"
              >
                <svg
                  class="h-4 w-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>

        <!-- Courses Grid -->
        <div
          id="courses-grid"
          class="hidden grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
        >
          <!-- Course cards will be populated here -->
        </div>

        <!-- Empty State (Hidden initially) -->
        <div id="empty-state" class="text-center py-16 hidden">
          <svg
            class="h-16 w-16 mx-auto text-gray-300 mb-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
            ></path>
          </svg>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">No Courses Yet</h2>
          <p class="text-gray-600 mb-6">
            You haven't enrolled in any courses yet. Start learning today!
          </p>
          <a
            href="/courses"
            class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Browse Courses
          </a>
        </div>
      </main>
    </div>
  </div>
</BaseLayout>

<!-- JavaScript for loading and displaying user courses -->
<script>
  import { authStore } from "../../stores/authStore";

  document.addEventListener("DOMContentLoaded", function () {
    let userCourses: any[] = [];
    let filteredCourses: any[] = [];

    // Initialize the page
    initializePage();

    async function initializePage(): Promise<void> {
      console.log("üîç Initializing My Courses page...");

      try {
        console.log("‚úÖ Loading all available courses...");

        // Load all courses using fetch API - no authentication required
        userCourses = await fetchAllCourses();
        console.log("üìö Loaded courses:", userCourses);

        if (userCourses.length === 0) {
          console.log("üì≠ No courses found, showing empty state");
          showEmptyState();
        } else {
          console.log("üìä Showing courses and stats");
          showCoursesState();
          updateStatistics();
          renderCourses();
          setupEventListeners();
        }
      } catch (error) {
        console.error("‚ùå Error loading courses:", error);
        console.log("üí• General error, showing empty state as fallback");
        showEmptyState();
      } finally {
        hideLoadingState();
      }
    }

    async function fetchAllCourses(): Promise<any[]> {
      const response = await fetch("/api/v1/courses/my_courses/");

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const courses = await response.json();

      // Transform courses to match enrollment format for existing UI
      return courses.map((course: any) => ({
        course: course,
        progress_percentage: 0,
        enrollment_date: course.created_at,
        last_accessed: null,
        status: "active",
      }));
    }

    function hideLoadingState(): void {
      const loadingElement = document.getElementById("loading-state");
      if (loadingElement) {
        loadingElement.classList.add("hidden");
      }
    }

    function showEmptyState(): void {
      const emptyElement = document.getElementById("empty-state");
      if (emptyElement) {
        emptyElement.classList.remove("hidden");
      }
    }

    function showCoursesState(): void {
      const statsElement = document.getElementById("course-stats");
      const controlsElement = document.getElementById("course-controls");
      const gridElement = document.getElementById("courses-grid");

      if (statsElement) statsElement.classList.remove("hidden");
      if (controlsElement) controlsElement.classList.remove("hidden");
      if (gridElement) gridElement.classList.remove("hidden");
    }

    function updateStatistics(): void {
      const totalCourses = userCourses.length;
      const completedCourses = userCourses.filter(
        (enrollment: any) => enrollment.progress_percentage === 100,
      ).length;
      const inProgressCourses = userCourses.filter(
        (enrollment: any) =>
          enrollment.progress_percentage > 0 &&
          enrollment.progress_percentage < 100,
      ).length;
      const avgProgress =
        totalCourses > 0
          ? Math.round(
              userCourses.reduce(
                (sum: number, enrollment: any) =>
                  sum + (enrollment.progress_percentage || 0),
                0,
              ) / totalCourses,
            )
          : 0;

      const totalElement = document.getElementById("total-courses");
      const completedElement = document.getElementById("completed-courses");
      const progressElement = document.getElementById("in-progress-courses");
      const avgElement = document.getElementById("avg-progress");

      if (totalElement) totalElement.textContent = totalCourses.toString();
      if (completedElement)
        completedElement.textContent = completedCourses.toString();
      if (progressElement)
        progressElement.textContent = inProgressCourses.toString();
      if (avgElement) avgElement.textContent = `${avgProgress}%`;
    }

    function renderCourses(): void {
      const coursesGrid = document.getElementById("courses-grid");
      if (!coursesGrid) return;

      filteredCourses = [...userCourses];
      coursesGrid.innerHTML = filteredCourses
        .map((enrollment: any) => createCourseCard(enrollment))
        .join("");
    }

    function createCourseCard(enrollment: any): string {
      const course = enrollment.course;
      const progress = enrollment.progress_percentage || 0;
      const isStarted = progress > 0;

      return `
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-300">
          <div class="p-6">
            <div class="aspect-video bg-gradient-to-br from-teal-100 to-teal-200 flex items-center justify-center mb-4 rounded-lg">
              ${
                course.thumbnail
                  ? `<img src="${course.thumbnail}" alt="${course.name}" class="w-full h-full object-cover rounded-lg" />`
                  : `<svg class="w-16 h-16 text-teal-600" fill="currentColor" viewBox="0 0 20 20">
                       <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                     </svg>`
              }
            </div>
            
            <div class="mb-3">
              <span class="bg-teal-100 text-teal-800 text-xs font-medium px-2 py-1 rounded-full">
                ${course.category ? course.category.name : "Course"}
              </span>
            </div>

            <h3 class="text-xl font-bold text-gray-900 mb-3">${course.name}</h3>
            
            <p class="text-gray-600 text-sm mb-4">${course.short_description || course.description?.substring(0, 100) + "..." || ""}</p>

            <div class="mb-4">
              <div class="flex justify-between text-sm mb-1">
                <span class="text-gray-600">Progress</span>
                <span class="text-gray-900 font-medium">${progress}%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-teal-700 h-2 rounded-full transition-all duration-300" style="width: ${progress}%"></div>
              </div>
            </div>

            <div class="flex space-x-3">
              <a
                href="/courses/${course.slug}"
                class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors text-center text-sm"
              >
                Course Details
              </a>
              <a
                href="/courses/${course.slug}"
                class="flex-1 bg-teal-700 hover:bg-teal-800 text-white font-medium py-2 px-4 rounded-lg transition-colors text-center text-sm"
              >
                Start Course
              </a>
            </div>
          </div>
        </div>
      `;
    }

    function setupEventListeners(): void {
      // Filter functionality
      const statusFilter = document.getElementById(
        "status-filter",
      ) as HTMLSelectElement;
      const sortFilter = document.getElementById(
        "sort-filter",
      ) as HTMLSelectElement;

      if (statusFilter) {
        statusFilter.addEventListener("change", applyFilters);
      }
      if (sortFilter) {
        sortFilter.addEventListener("change", applyFilters);
      }

      // View toggle functionality
      const gridViewBtn = document.getElementById(
        "grid-view",
      ) as HTMLButtonElement;
      const listViewBtn = document.getElementById(
        "list-view",
      ) as HTMLButtonElement;
      const coursesGrid = document.getElementById(
        "courses-grid",
      ) as HTMLElement;

      if (gridViewBtn && listViewBtn && coursesGrid) {
        gridViewBtn.addEventListener("click", () => {
          gridViewBtn.classList.add("bg-teal-700", "text-white");
          gridViewBtn.classList.remove("bg-gray-100", "text-gray-700");
          listViewBtn.classList.add("bg-gray-100", "text-gray-700");
          listViewBtn.classList.remove("bg-teal-700", "text-white");

          coursesGrid.className =
            "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8";
        });

        listViewBtn.addEventListener("click", () => {
          listViewBtn.classList.add("bg-teal-700", "text-white");
          listViewBtn.classList.remove("bg-gray-100", "text-gray-700");
          gridViewBtn.classList.add("bg-gray-100", "text-gray-700");
          gridViewBtn.classList.remove("bg-teal-700", "text-white");

          coursesGrid.className = "grid grid-cols-1 gap-6";
        });
      }
    }

    function applyFilters(): void {
      const statusFilter = document.getElementById(
        "status-filter",
      ) as HTMLSelectElement;
      const sortFilter = document.getElementById(
        "sort-filter",
      ) as HTMLSelectElement;

      if (!statusFilter || !sortFilter) return;

      const statusValue = statusFilter.value;
      const sortValue = sortFilter.value;

      // Filter by status
      filteredCourses = userCourses.filter((enrollment: any) => {
        const progress = enrollment.progress_percentage || 0;

        switch (statusValue) {
          case "not-started":
            return progress === 0;
          case "in-progress":
            return progress > 0 && progress < 100;
          case "completed":
            return progress === 100;
          default:
            return true;
        }
      });

      // Sort courses
      filteredCourses.sort((a: any, b: any) => {
        switch (sortValue) {
          case "progress":
            return (b.progress_percentage || 0) - (a.progress_percentage || 0);
          case "enrollment-date":
            return (
              new Date(b.enrollment_date).getTime() -
              new Date(a.enrollment_date).getTime()
            );
          case "alphabetical":
            return a.course.name.localeCompare(b.course.name);
          case "recent":
          default:
            return (
              new Date(b.enrollment_date).getTime() -
              new Date(a.enrollment_date).getTime()
            );
        }
      });

      // Re-render courses
      const coursesGrid = document.getElementById("courses-grid");
      if (coursesGrid) {
        coursesGrid.innerHTML = filteredCourses
          .map((enrollment: any) => createCourseCard(enrollment))
          .join("");
      }
    }
  });
</script>
