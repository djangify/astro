---
// src/pages/courses/[courseSlug]/lessons/[lessonSlug].astro
import BaseLayout from "../../../../layouts/BaseLayout.astro";
import { fetchCourses, fetchCourseLessons } from "../../../../lib/api";
import type { Course, CourseLesson } from "../../../../types";


// Generate all lesson routes at build time
export async function getStaticPaths() {
  try {
    const courses = await fetchCourses();
    const paths: Array<{
      params: { courseSlug: string; lessonSlug: string };
      props: { course: Course; lesson: CourseLesson; allLessons: CourseLesson[] };
    }> = [];

    for (const course of courses) {
      try {
        // Fetch lessons for each course separately
        const lessons = await fetchCourseLessons(course.slug);
        
        if (lessons && lessons.length > 0) {
          for (const lesson of lessons) {
            paths.push({
              params: { 
                courseSlug: course.slug, 
                lessonSlug: lesson.slug 
              },
              props: { 
                course, 
                lesson,
                allLessons: lessons
              },
            });
          }
        }
      } catch (lessonError) {
        console.error(`Error fetching lessons for course ${course.slug}:`, lessonError);
        // Continue with other courses even if one fails
      }
    }

    console.log(`Generated ${paths.length} lesson paths`);
    return paths;
  } catch (error) {
    console.error("Error fetching courses for lesson paths:", error);
    return [];
  }
}

// Get the lesson and course from props
const { course, lesson, allLessons } = Astro.props;

// Find current lesson index for navigation
const currentLessonIndex = allLessons.findIndex(l => l.slug === lesson.slug);
const previousLesson = currentLessonIndex > 0 ? allLessons[currentLessonIndex - 1] : null;
const nextLesson = currentLessonIndex < allLessons.length - 1 ? allLessons[currentLessonIndex + 1] : null;

// If lesson not found, redirect to 404
if (!lesson || !course) {
  return Astro.redirect("/404");
}
---

<BaseLayout>
  <title slot="title">{lesson.title} – {course.title} – Corrison</title>
  <meta
    slot="head"
    name="description"
    content={`${lesson.title} from ${course.title}. ${lesson.content ? lesson.content.substring(0, 150) : ''}`}
  />

  <div class="min-h-screen bg-gray-50">
    <!-- Lesson Header -->
    <section class="bg-white border-b border-gray-200">
      <div class="container mx-auto px-4 py-6">
        <!-- Breadcrumb -->
        <nav class="mb-4">
          <ol class="flex items-center space-x-2 text-sm text-gray-500">
            <li>
              <a href="/courses" class="hover:text-teal-700">Courses</a>
            </li>
            <li><span class="mx-2">/</span></li>
            <li>
              <a href={`/courses/${course.slug}`} class="hover:text-teal-700">{course.title}</a>
            </li>
            <li><span class="mx-2">/</span></li>
            <li>
              <span class="text-gray-900 font-medium">{lesson.title}</span>
            </li>
          </ol>
        </nav>

        <!-- Course Info Bar -->
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl md:text-3xl font-bold text-gray-900">{lesson.title}</h1>
            <p class="text-gray-600 mt-1">
              Lesson {lesson.order || currentLessonIndex + 1} of {allLessons.length} • {course.title}
            </p>
          </div>
          
          <!-- Lesson Meta -->
          <div class="flex items-center space-x-4 text-sm text-gray-500">
            {lesson.duration_minutes && (
              <span class="flex items-center">
                <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {lesson.duration_minutes} min
              </span>
            )}
            {lesson.is_free && (
              <span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-1 rounded-full">
                FREE
              </span>
            )}
          </div>
        </div>
      </div>
    </section>

    <!-- Main Content -->
    <main class="container mx-auto px-4 py-8">
      <div class="max-w-5xl mx-auto">
        <!-- Video Player Section -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-8">
          <div class="p-6">
            <!-- Video Container -->
            <div class="relative bg-black rounded-lg overflow-hidden" style="aspect-ratio: 16/9;">
              {lesson.youtube_url ? (
                <div id="video-container" class="w-full h-full">
                  <!-- Video will be loaded here by JavaScript -->
                  <div id="video-loading" class="flex items-center justify-center w-full h-full">
                    <div class="text-center">
                      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
                      <p class="text-white">Loading video...</p>
                    </div>
                  </div>
                </div>
              ) : (
                <div class="flex items-center justify-center w-full h-full">
                  <div class="text-center text-gray-400">
                    <svg class="h-16 w-16 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
                    </svg>
                    <p>No video available for this lesson</p>
                  </div>
                </div>
              )}
            </div>

            <!-- Lesson Navigation -->
            <div class="flex items-center justify-between mt-6 pt-6 border-t border-gray-200">
              <!-- Previous Lesson -->
              <div class="flex-1">
                {previousLesson ? (
                  <a 
                    href={`/courses/${course.slug}/lessons/${previousLesson.slug}`}
                    class="flex items-center text-gray-600 hover:text-teal-700 transition-colors group"
                  >
                    <svg class="h-5 w-5 mr-2 group-hover:-translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                    <div>
                      <div class="text-sm text-gray-400">Previous</div>
                      <div class="font-medium">{previousLesson.title}</div>
                    </div>
                  </a>
                ) : (
                  <div class="text-gray-400">
                    <div class="text-sm">This is the first lesson</div>
                  </div>
                )}
              </div>

              <!-- Progress Indicator -->
              <div class="flex-shrink-0 mx-8">
                <div class="text-center">
                  <div class="text-sm text-gray-500 mb-2">
                    {currentLessonIndex + 1} of {allLessons.length}
                  </div>
                  <div class="w-32 bg-gray-200 rounded-full h-2">
                    <div 
                      class="bg-teal-700 h-2 rounded-full transition-all duration-300"
                      style={`width: ${((currentLessonIndex + 1) / allLessons.length) * 100}%`}
                    ></div>
                  </div>
                </div>
              </div>

              <!-- Next Lesson -->
              <div class="flex-1 text-right">
                {nextLesson ? (
                  <a 
                    href={`/courses/${course.slug}/lessons/${nextLesson.slug}`}
                    class="flex items-center justify-end text-gray-600 hover:text-teal-700 transition-colors group"
                  >
                    <div class="text-right">
                      <div class="text-sm text-gray-400">Next</div>
                      <div class="font-medium">{nextLesson.title}</div>
                    </div>
                    <svg class="h-5 w-5 ml-2 group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </a>
                ) : (
                  <div class="text-gray-400">
                    <div class="text-sm">Course complete!</div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        <!-- Lesson Content -->
        {lesson.content && (
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-8">
            <div class="p-6">
              <h2 class="text-xl font-semibold text-gray-900 mb-4">Lesson Notes</h2>
              <div class="prose prose-lg max-w-none" set:html={lesson.content} />
            </div>
          </div>
        )}

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a
            href={`/courses/${course.slug}`}
            class="bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-3 px-6 rounded-lg transition-colors text-center inline-flex items-center justify-center"
          >
            <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
            Back to Course
          </a>
          
          <a
            href="/my-courses"
            class="bg-teal-700 hover:bg-teal-800 text-white font-medium py-3 px-6 rounded-lg transition-colors text-center inline-flex items-center justify-center"
          >
            <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
            </svg>
            Back to Dashboard
          </a>
        </div>

        <!-- Course Lessons Sidebar (Optional - for easy navigation) -->
        <div class="mt-12">
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Course Lessons</h3>
              <div class="space-y-2">
                {allLessons.map((lessonItem: any, index: number) => (
                  <a
                    href={`/courses/${course.slug}/lessons/${lessonItem.slug}`}
                    class={`block p-3 rounded-lg transition-colors ${
                      lessonItem.slug === lesson.slug
                        ? 'bg-teal-50 border border-teal-200 text-teal-900'
                        : 'hover:bg-gray-50 text-gray-700'
                    }`}
                  >
                    <div class="flex items-center justify-between">
                      <div class="flex items-center">
                        <span class="text-sm font-medium text-gray-500 mr-3">
                          {index + 1}
                        </span>
                        <span class="font-medium">{lessonItem.title}</span>
                      </div>
                      <div class="flex items-center space-x-2">
                        {lessonItem.duration_minutes && (
                          <span class="text-xs text-gray-500">
                            {lessonItem.duration_minutes}m
                          </span>
                        )}
                        {lessonItem.is_free && (
                          <span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">
                            FREE
                          </span>
                        )}
                        {lessonItem.slug === lesson.slug && (
                          <svg class="h-4 w-4 text-teal-600" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                          </svg>
                        )}
                      </div>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</BaseLayout>

<!-- JavaScript for video loading -->
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    const lessonData = {
      video_url: document.querySelector("[data-video-url]")?.getAttribute("data-video-url")
    };

    if (lessonData.video_url) {
      loadVideo(lessonData.video_url);
    }

    function loadVideo(videoUrl) {
      const videoContainer = document.getElementById("video-container");
      const loadingEl = document.getElementById("video-loading");
      
      if (!videoContainer || !videoUrl) return;

      // Determine video type and create appropriate embed
      let videoEmbed = "";
      
      if (videoUrl.includes("youtube.com") || videoUrl.includes("youtu.be")) {
        // YouTube video
        const videoId = extractYouTubeId(videoUrl);
        if (videoId) {
          videoEmbed = `
            <iframe
              src="https://www.youtube.com/embed/${videoId}?rel=0&modestbranding=1"
              class="w-full h-full"
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen
            ></iframe>
          `;
        }
      } else if (videoUrl.includes("vimeo.com")) {
        // Vimeo video
        const videoId = extractVimeoId(videoUrl);
        if (videoId) {
          videoEmbed = `
            <iframe
              src="https://player.vimeo.com/video/${videoId}?badge=0&autopause=0&player_id=0&app_id=58479"
              class="w-full h-full"
              frameborder="0"
              allow="autoplay; fullscreen; picture-in-picture"
              allowfullscreen
            ></iframe>
          `;
        }
      } else if (videoUrl.match(/\.(mp4|webm|ogg)$/i)) {
        // Direct video file
        videoEmbed = `
          <video
            class="w-full h-full"
            controls
            preload="metadata"
          >
            <source src="${videoUrl}" type="video/mp4">
            Your browser does not support the video tag.
          </video>
        `;
      } else {
        // Generic iframe embed
        videoEmbed = `
          <iframe
            src="${videoUrl}"
            class="w-full h-full"
            frameborder="0"
            allowfullscreen
          ></iframe>
        `;
      }

      // Replace loading with video
      if (videoEmbed) {
        videoContainer.innerHTML = videoEmbed;
      } else {
        videoContainer.innerHTML = `
          <div class="flex items-center justify-center w-full h-full">
            <div class="text-center text-gray-400">
              <svg class="h-16 w-16 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
              </svg>
              <p>Unable to load video</p>
            </div>
          </div>
        `;
      }
    }

    function extractYouTubeId(url) {
      const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
      const match = url.match(regex);
      return match ? match[1] : null;
    }

    function extractVimeoId(url) {
      const regex = /vimeo\.com\/(?:channels\/[^\/]+\/|groups\/[^\/]+\/videos\/|album\/[^\/]+\/video\/|video\/|)(\d+)/;
      const match = url.match(regex);
      return match ? match[1] : null;
    }

    // Keyboard navigation
    document.addEventListener("keydown", function(e) {
      if (e.key === "ArrowLeft") {
        const prevButton = document.querySelector('a[href*="/lessons/"]:has(svg)');
        if (prevButton && prevButton.href.includes("Previous")) {
          window.location.href = prevButton.href;
        }
      } else if (e.key === "ArrowRight") {
        const nextButton = document.querySelector('a[href*="/lessons/"]:last-of-type');
        if (nextButton) {
          window.location.href = nextButton.href;
        }
      }
    });
  });
</script>

<!-- Hidden data attributes for JavaScript -->
<div
  data-video-url={lesson.youtube_url ?? ""}
  style="display: none;"
>
</div>