---
// src/pages/courses/index.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import CourseGrid from "../../components/courses/CourseGrid.astro";
import { fetchCourses } from "../../lib/api";
import type { Course, CourseEnrollment } from "../../types";

// Fetch all courses with error handling
let courses: Course[] = [];

try {
  courses = await fetchCourses();
  console.log(`Successfully loaded ${courses.length} courses`);
} catch (error) {
  console.error("Error fetching courses:", error);
  courses = [];
}

// User enrollments will be handled client-side
let userEnrollments: CourseEnrollment[] = [];

// Calculate stats with safe fallbacks
const courseCount = courses.length;
const featuredCourses = courses.filter((course) => course.is_featured);
---

<BaseLayout>
  <title slot="title">Courses â€“ Corrison</title>
  <meta
    slot="head"
    name="description"
    content="Discover our comprehensive collection of courses designed to help you learn and grow."
  />

  <div class="min-h-screen bg-gray-50">
    <!-- Hero Section -->
    <section class="bg-white border-b border-gray-200">
      <div class="container mx-auto px-4 py-16">
        <div class="text-center max-w-4xl mx-auto" id="hero-content">
          <!-- Loading state for hero content -->
          <div id="hero-loading" class="animate-pulse">
            <div class="h-12 bg-gray-200 rounded mb-6 mx-auto max-w-md"></div>
            <div class="h-6 bg-gray-200 rounded mb-4 mx-auto max-w-lg"></div>
            <div class="h-20 bg-gray-200 rounded mb-8 mx-auto"></div>
          </div>

          <!-- Actual content (hidden initially) -->
          <div id="hero-actual" class="hidden">
            <h1
              class="text-4xl md:text-5xl font-bold text-gray-900 mb-6"
              id="page-title"
            >
              Courses
            </h1>

            <h2 class="text-2xl text-gray-700 mb-6 hidden" id="page-subtitle">
            </h2>

            <div class="text-xl text-gray-600 mb-8" id="page-description">
              Loading course information...
            </div>

            <!-- External Courses Section -->
            <div class="mb-8 hidden" id="external-courses-section">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">
                Find My Paid Courses
              </h3>
              <div
                class="flex flex-wrap justify-center gap-4"
                id="external-courses-links"
              >
                <!-- Links will be populated by JavaScript -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Filter and Search Section -->
    <section
      class="bg-white shadow-sm sticky top-16 z-10 border-b border-gray-200"
    >
      <div class="container mx-auto px-4 py-4">
        <div
          class="flex flex-col md:flex-row gap-4 items-center justify-between"
        >
          <!-- Left side: Course count -->
          <div class="flex-shrink-0">
            <p class="text-gray-600">
              <span id="filtered-count">{courseCount}</span> courses available
            </p>
          </div>

          <!-- Center: Search -->
          <div class="flex-1 max-w-md">
            <div class="relative">
              <input
                type="text"
                id="course-search"
                placeholder="Search courses..."
                class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              />
              <div
                class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
              >
                <svg
                  class="h-5 w-5 text-gray-400"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Right side: Filters -->
          <div class="flex flex-wrap gap-4 items-center">
            <!-- Level Filter -->
            <select
              id="level-filter"
              class="border border-gray-300 rounded-lg px-3 py-2 text-sm"
            >
              <option value="">All Levels</option>
              <option value="beginner">Beginner</option>
              <option value="intermediate">Intermediate</option>
              <option value="advanced">Advanced</option>
            </select>

            <!-- Sort -->
            <select
              id="sort-filter"
              class="border border-gray-300 rounded-lg px-3 py-2 text-sm"
            >
              <option value="featured">Featured First</option>
              <option value="newest">Newest First</option>
              <option value="popular">Most Popular</option>
              <option value="alphabetical">Alphabetical</option>
            </select>

            <!-- View Toggle -->
            <div class="flex border border-gray-300 rounded-lg overflow-hidden">
              <button
                id="grid-view"
                class="px-3 py-2 bg-teal-700 text-white text-sm hover:bg-teal-800"
                data-view="grid"
              >
                <svg
                  class="h-4 w-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
                  ></path>
                </svg>
              </button>
              <button
                id="list-view"
                class="px-3 py-2 bg-gray-100 text-gray-700 text-sm hover:bg-gray-200"
                data-view="list"
              >
                <svg
                  class="h-4 w-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Main Content -->
    <main class="container mx-auto px-4 py-12">
      <!-- Loading State -->
      <div id="courses-loading" class="hidden">
        <div class="text-center py-12">
          <div
            class="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-700 mx-auto mb-4"
          >
          </div>
          <p class="text-gray-600">Loading courses...</p>
        </div>
      </div>

      <!-- Error State -->
      <div id="courses-error" class="hidden">
        <div class="text-center py-12">
          <svg
            class="h-12 w-12 text-gray-400 mx-auto mb-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <h3 class="text-lg font-medium text-gray-900 mb-2">
            Unable to Load Courses
          </h3>
          <p class="text-gray-600 mb-4">
            We're having trouble connecting to our course catalog.
          </p>
          <button
            id="retry-courses"
            class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-4 py-2 rounded-lg transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>

      <!-- Courses Content -->
      <div id="courses-content">
        <!-- Featured Courses Section -->
        {
          featuredCourses.length > 0 && (
            <section class="mb-16" id="featured-section">
              <div class="text-center mb-8">
                <h2 class="text-3xl font-bold text-gray-900 mb-2">
                  Featured Courses
                </h2>
                <p class="text-gray-600">
                  Hand-picked courses to help you get started
                </p>
              </div>
              <CourseGrid
                courses={featuredCourses}
                userEnrollments={userEnrollments}
                gridCols={3}
                className="featured-courses"
              />
            </section>
          )
        }

        <!-- All Courses Section -->
        <section>
          <div class="mb-8">
            <h2 class="text-3xl font-bold text-gray-900 mb-2">All Courses</h2>
          </div>

          <!-- Course Grid Container -->
          <div id="course-grid-container">
            {
              courses.length > 0 ? (
                <CourseGrid
                  courses={courses}
                  userEnrollments={userEnrollments}
                  gridCols={3}
                  className="all-courses"
                />
              ) : (
                <div class="text-center py-12" id="no-courses-fallback">
                  <svg
                    class="h-12 w-12 text-gray-400 mx-auto mb-4"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                    />
                  </svg>
                  <h3 class="text-lg font-medium text-gray-900 mb-2">
                    Courses Loading
                  </h3>
                  <p class="text-gray-600">
                    Please wait while we load our course catalog...
                  </p>
                </div>
              )
            }
          </div>
        </section>
      </div>

      <!-- Empty State (when no courses found after loading) -->
      <div id="empty-state" class="hidden text-center py-12">
        <svg
          class="h-16 w-16 text-gray-300 mx-auto mb-4"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
          ></path>
        </svg>
        <h3 class="text-xl font-medium text-gray-900 mb-2">
          No Courses Available
        </h3>
        <p class="text-gray-600 mb-6">
          Check back soon for new learning opportunities!
        </p>
        <a
          href="/"
          class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors"
        >
          Explore Other Content
        </a>
      </div>
    </main>
  </div>
</BaseLayout>

<!-- JavaScript for dynamic course loading and filtering -->

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .list-view .courses-grid > div {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .list-view .courses-grid .bg-white {
    display: flex;
    flex-direction: row;
    max-width: none;
  }

  .list-view .courses-grid .bg-white > div:first-child {
    flex-shrink: 0;
    width: 200px;
  }

  .list-view .courses-grid .bg-white > div:last-child {
    flex: 1;
  }

  @media (max-width: 768px) {
    .list-view .courses-grid .bg-white {
      flex-direction: column;
    }

    .list-view .courses-grid .bg-white > div:first-child {
      width: 100%;
    }
  }
</style>
<!-- JavaScript for dynamic course loading and filtering -->
<!-- JavaScript for dynamic course loading and filtering -->
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    // Store courses data
    let originalCourses = [];
    let filteredCourses = [];
    let currentUserEnrollments = [];
    let coursesLoaded = false;
    let courseSettings = null;

    // Initialize the page
    initializePage();

    async function initializePage() {
      // Load course settings first
      await loadCourseSettings();

      // Load courses from API
      await loadCoursesFromAPI();
    }

    async function loadCourseSettings() {
      try {
        const response = await fetch(
          `https://corrison.corrisonapi.com/api/v1/courses-settings/`,
          {
            method: "GET",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
            },
          },
        );

        if (response.ok) {
          const data = await response.json();
          console.log("Course Settings Response:", data); // Debug log
          // Handle both single object and array responses
          courseSettings = Array.isArray(data) ? data[0] : data;
          updateHeroContent();
        } else {
          console.error("Failed to load course settings:", response.status);
          showDefaultHeroContent();
        }
      } catch (error) {
        console.error("Error loading course settings:", error);
        showDefaultHeroContent();
      }
    }

    function updateHeroContent() {
      const heroLoading = document.getElementById("hero-loading");
      const heroActual = document.getElementById("hero-actual");
      const pageTitle = document.getElementById("page-title");
      const pageSubtitle = document.getElementById("page-subtitle");
      const pageDescription = document.getElementById("page-description");
      const externalSection = document.getElementById(
        "external-courses-section",
      );
      const externalLinks = document.getElementById("external-courses-links");

      if (courseSettings) {
        // Update title
        if (pageTitle) {
          pageTitle.textContent =
            courseSettings.page_title || "Learn New Skills";
        }

        // Update subtitle
        if (pageSubtitle && courseSettings.page_subtitle) {
          pageSubtitle.textContent = courseSettings.page_subtitle;
          pageSubtitle.classList.remove("hidden");
        }

        // Update description
        if (pageDescription) {
          if (courseSettings.page_description) {
            pageDescription.innerHTML = courseSettings.page_description;
          } else {
            pageDescription.textContent =
              "Discover our comprehensive collection of courses.";
          }
        }

        // Update external courses
        if (
          courseSettings.external_courses &&
          courseSettings.external_courses.length > 0 &&
          externalLinks
        ) {
          externalLinks.innerHTML = courseSettings.external_courses
            .map(function (course) {
              return `<a href="${course.url}" target="_blank" rel="noopener noreferrer" class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center">${course.title}<svg class="h-4 w-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" /></svg></a>`;
            })
            .join("");
          if (externalSection) externalSection.classList.remove("hidden");
        }
      }

      // Show actual content and hide loading
      if (heroLoading) heroLoading.classList.add("hidden");
      if (heroActual) heroActual.classList.remove("hidden");
    }

    function showDefaultHeroContent() {
      const heroLoading = document.getElementById("hero-loading");
      const heroActual = document.getElementById("hero-actual");
      const pageTitle = document.getElementById("page-title");
      const pageDescription = document.getElementById("page-description");

      if (pageTitle) {
        pageTitle.textContent = "Learn New Skills";
      }
      if (pageDescription) {
        pageDescription.textContent =
          "Discover our comprehensive collection of courses designed to help you learn and grow.";
      }

      // Show actual content and hide loading
      if (heroLoading) heroLoading.classList.add("hidden");
      if (heroActual) heroActual.classList.remove("hidden");
    }

    async function loadCoursesFromAPI() {
      const loadingEl = document.getElementById("courses-loading");
      const errorEl = document.getElementById("courses-error");
      const contentEl = document.getElementById("courses-content");
      const emptyEl = document.getElementById("empty-state");

      try {
        // Show loading state
        if (loadingEl) loadingEl.classList.remove("hidden");
        if (errorEl) errorEl.classList.add("hidden");
        if (contentEl) contentEl.classList.add("hidden");
        if (emptyEl) emptyEl.classList.add("hidden");

        // Fetch courses from Django API
        const response = await fetch(
          `https://corrison.corrisonapi.com/api/v1/courses/`,
          {
            method: "GET",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
            },
          },
        );

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("API Response:", data); // Debug log

        // Your API returns a direct array, not paginated
        const courses = Array.isArray(data) ? data : [data];

        if (courses && courses.length > 0) {
          originalCourses = courses;
          filteredCourses = [...originalCourses];
          coursesLoaded = true;

          // Render courses
          renderCoursesGrid();

          // Show content
          if (contentEl) contentEl.classList.remove("hidden");

          initializeAfterLoad();
        } else {
          // No courses found
          if (emptyEl) emptyEl.classList.remove("hidden");
        }
      } catch (error) {
        console.error("Failed to load courses:", error);

        // Show error state
        if (errorEl) errorEl.classList.remove("hidden");
      } finally {
        // Hide loading state
        if (loadingEl) loadingEl.classList.add("hidden");
      }
    }

    function renderCoursesGrid() {
      // Update the count
      const filteredCountSpan = document.getElementById("filtered-count");
      if (filteredCountSpan) {
        filteredCountSpan.textContent = filteredCourses.length;
      }

      const gridContainer = document.getElementById("course-grid-container");
      const noCoursesEl = document.getElementById("no-courses-fallback");

      if (filteredCourses.length === 0) {
        if (noCoursesEl) noCoursesEl.classList.remove("hidden");
        return;
      }

      if (noCoursesEl) noCoursesEl.classList.add("hidden");

      // Basic course grid rendering with correct field names
      if (gridContainer) {
        gridContainer.innerHTML = `
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 courses-grid">
            ${filteredCourses
              .map(function (course) {
                return `
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                  <div class="aspect-video bg-gradient-to-br from-teal-400 to-teal-600 flex items-center justify-center relative">
                    ${
                      course.thumbnail
                        ? `<img src="${course.thumbnail}" alt="${course.name}" class="w-full h-full object-cover" loading="lazy" />`
                        : `<svg class="h-12 w-12 text-white opacity-50" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" /></svg>`
                    }
                    <div class="absolute top-3 right-3">
                      <span class="bg-green-500 text-white px-2 py-1 text-sm font-bold rounded-full shadow">
                        ${course.is_free ? "FREE" : `$${course.price}`}
                      </span>
                    </div>
                  </div>
                  
                  <div class="p-6">
                    <div class="flex items-center justify-between mb-3">
                      ${
                        course.category
                          ? `<span class="text-teal-600 text-sm font-medium">${course.category.name}</span>`
                          : '<span class="text-gray-400 text-sm">Course</span>'
                      }
                      <span class="px-2 py-1 text-xs rounded-full border ${getLevelColor(course.difficulty)}">
                        ${course.difficulty}
                      </span>
                    </div>
                    
                    <h3 class="font-semibold text-gray-900 mb-2 line-clamp-2">
                      <a href="/courses/${course.slug}" class="hover:text-teal-700">${course.name}</a>
                    </h3>
                    
                    <p class="text-gray-600 text-sm mb-4 line-clamp-2">
                      ${course.short_description || course.description || ""}
                    </p>
                    
                    <div class="flex items-center text-sm text-gray-500 mb-4">
                      ${
                        course.lesson_count !== undefined
                          ? `<span class="flex items-center mr-4">
                             <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 002 2z"></path>
                             </svg>
                             ${course.lesson_count} lessons
                           </span>`
                          : ""
                      }
                      ${
                        course.instructor
                          ? `<span class="flex items-center">
                             <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                             </svg>
                             ${course.instructor.full_name || course.instructor.username}
                           </span>`
                          : ""
                      }
                    </div>
                    
                    <div class="flex space-x-3">
                      <a href="/courses/${course.slug}" class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors text-center text-sm">
                        View Details
                      </a>
                      ${
                        course.external_course_url
                          ? `<a href="${course.external_course_url}" target="_blank" rel="noopener noreferrer" class="flex-1 bg-teal-700 hover:bg-teal-800 text-white font-medium py-2 px-4 rounded-lg transition-colors text-center text-sm">
                             ${course.external_platform ? `View on ${course.external_platform}` : "View Paid Course"}
                           </a>`
                          : `<a href="/courses/${course.slug}" class="flex-1 bg-teal-700 hover:bg-teal-800 text-white font-medium py-2 px-4 rounded-lg transition-colors text-center text-sm">
                             ${course.is_free ? "Start Free" : "Enroll Now"}
                           </a>`
                      }
                    </div>
                  </div>
                </div>
              `;
              })
              .join("")}
          </div>
        `;
      }
    }

    function getLevelColor(level) {
      switch (level && level.toLowerCase()) {
        case "beginner":
          return "bg-green-100 text-green-800 border-green-200";
        case "intermediate":
          return "bg-yellow-100 text-yellow-800 border-yellow-200";
        case "advanced":
          return "bg-red-100 text-red-800 border-red-200";
        default:
          return "bg-gray-100 text-gray-800 border-gray-200";
      }
    }

    function initializeAfterLoad() {
      // Initialize filtering
      initializeFiltering();
    }

    function initializeFiltering() {
      // Filter and search functionality
      const searchInput = document.getElementById("course-search");
      const levelFilter = document.getElementById("level-filter");
      const sortFilter = document.getElementById("sort-filter");

      function applyFilters() {
        if (!coursesLoaded) return;

        const searchTerm =
          searchInput && searchInput.value
            ? searchInput.value.toLowerCase()
            : "";
        const levelValue =
          levelFilter && levelFilter.value ? levelFilter.value : "";
        const sortValue =
          sortFilter && sortFilter.value ? sortFilter.value : "featured";

        // Filter courses
        filteredCourses = originalCourses.filter(function (course) {
          // Search filter - using correct field names
          const matchesSearch =
            !searchTerm ||
            course.name.toLowerCase().includes(searchTerm) ||
            (course.short_description &&
              course.short_description.toLowerCase().includes(searchTerm)) ||
            (course.description &&
              course.description.toLowerCase().includes(searchTerm)) ||
            (course.category &&
              course.category.name.toLowerCase().includes(searchTerm)) ||
            (course.instructor &&
              ((course.instructor.full_name &&
                course.instructor.full_name
                  .toLowerCase()
                  .includes(searchTerm)) ||
                (course.instructor.username &&
                  course.instructor.username
                    .toLowerCase()
                    .includes(searchTerm))));

          // Level filter
          const matchesLevel =
            !levelValue ||
            (course.difficulty &&
              course.difficulty.toLowerCase() === levelValue);

          return matchesSearch && matchesLevel;
        });

        // Sort courses
        filteredCourses.sort(function (a, b) {
          switch (sortValue) {
            case "newest":
              return (
                new Date(b.created_at).getTime() -
                new Date(a.created_at).getTime()
              );
            case "popular":
              return (b.total_enrollments || 0) - (a.total_enrollments || 0);
            case "alphabetical":
              return a.name.localeCompare(b.name);
            case "featured":
            default:
              // Featured first, then by enrollment count
              if (a.is_featured && !b.is_featured) return -1;
              if (!a.is_featured && b.is_featured) return 1;
              return (b.total_enrollments || 0) - (a.total_enrollments || 0);
          }
        });

        // Re-render grid
        renderCoursesGrid();
      }

      // Event listeners
      if (searchInput) searchInput.addEventListener("input", applyFilters);
      if (levelFilter) levelFilter.addEventListener("change", applyFilters);
      if (sortFilter) sortFilter.addEventListener("change", applyFilters);

      // View toggle functionality
      const gridViewBtn = document.getElementById("grid-view");
      const listViewBtn = document.getElementById("list-view");
      const courseGridContainer = document.getElementById(
        "course-grid-container",
      );

      if (gridViewBtn && listViewBtn) {
        gridViewBtn.addEventListener("click", function () {
          gridViewBtn.classList.add("bg-teal-700", "text-white");
          gridViewBtn.classList.remove("bg-gray-100", "text-gray-700");
          listViewBtn.classList.add("bg-gray-100", "text-gray-700");
          listViewBtn.classList.remove("bg-teal-700", "text-white");

          if (courseGridContainer) {
            courseGridContainer.classList.remove("list-view");
          }
        });

        listViewBtn.addEventListener("click", function () {
          listViewBtn.classList.add("bg-teal-700", "text-white");
          listViewBtn.classList.remove("bg-gray-100", "text-gray-700");
          gridViewBtn.classList.add("bg-gray-100", "text-gray-700");
          gridViewBtn.classList.remove("bg-teal-700", "text-white");

          if (courseGridContainer) {
            courseGridContainer.classList.add("list-view");
          }
        });
      }
    }

    // Retry button functionality
    const retryButton = document.getElementById("retry-courses");
    if (retryButton) {
      retryButton.addEventListener("click", loadCoursesFromAPI);
    }
  });
</script>
