---
// src/pages/calendar/appointments/[id].astro
import BaseLayout from "../../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  // For now, return empty array since appointments are dynamic
  // In production, you might want to pre-generate some common appointment pages
  return [];
}

const { id } = Astro.params;
---

<BaseLayout>
  <title slot="title">Appointment Details</title>
  <meta
    slot="head"
    name="description"
    content="View your appointment details, status, and manage your booking."
  />

  <main class="min-h-screen bg-gray-50">
    <!-- Page Header -->
    <div class="bg-white border-b border-gray-200">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="py-6">
          <nav class="flex" aria-label="Breadcrumb">
            <ol class="flex items-center space-x-4">
              <li>
                <div>
                  <a href="/" class="text-gray-400 hover:text-gray-500">
                    <svg
                      class="flex-shrink-0 h-5 w-5"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"
                      ></path>
                    </svg>
                  </a>
                </div>
              </li>
              <li>
                <div class="flex items-center">
                  <svg
                    class="flex-shrink-0 h-5 w-5 text-gray-300"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                      clip-rule="evenodd"></path>
                  </svg>
                  <a
                    href="/calendar"
                    class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700"
                    >Calendar</a
                  >
                </div>
              </li>
              <li>
                <div class="flex items-center">
                  <svg
                    class="flex-shrink-0 h-5 w-5 text-gray-300"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                      clip-rule="evenodd"></path>
                  </svg>
                  <span class="ml-4 text-sm font-medium text-gray-500"
                    >Appointment #{id}</span
                  >
                </div>
              </li>
            </ol>
          </nav>

          <div class="mt-4">
            <h1 class="text-2xl font-bold text-gray-900" id="appointment-title">
              Appointment Details
            </h1>
            <p class="mt-1 text-sm text-gray-600">
              View and manage your appointment booking
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Loading State -->
      <div id="appointment-loading" class="space-y-6">
        <div class="bg-white rounded-lg shadow-sm p-6">
          <div class="animate-pulse">
            <div class="flex items-center space-x-4 mb-4">
              <div class="w-12 h-12 bg-gray-200 rounded-lg"></div>
              <div class="flex-1 space-y-2">
                <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                <div class="h-3 bg-gray-200 rounded w-1/2"></div>
              </div>
              <div class="w-20 h-6 bg-gray-200 rounded"></div>
            </div>
            <div class="space-y-3">
              <div class="h-3 bg-gray-200 rounded"></div>
              <div class="h-3 bg-gray-200 rounded w-5/6"></div>
              <div class="h-3 bg-gray-200 rounded w-4/6"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Appointment Content -->
      <div id="appointment-content" class="hidden">
        <!-- This will be populated by JavaScript -->
      </div>

      <!-- Error State -->
      <div id="appointment-error" class="hidden">
        <div class="bg-white rounded-lg shadow-sm p-8 text-center">
          <svg
            class="w-16 h-16 mx-auto mb-4 text-red-300"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <h3 class="text-lg font-medium text-gray-900 mb-2">
            Appointment Not Found
          </h3>
          <p class="text-gray-600 mb-6" id="error-message">
            The appointment could not be found or you don't have permission to
            view it.
          </p>
          <div class="space-x-3">
            <a
              href="/calendar"
              class="inline-flex items-center px-4 py-2 bg-teal-600 hover:bg-teal-700 text-white font-medium rounded-lg transition-colors"
            >
              <svg
                class="w-4 h-4 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                ></path>
              </svg>
              Book New Appointment
            </a>
            <button
              onclick="retryLoadAppointment()"
              class="inline-flex items-center px-4 py-2 bg-white hover:bg-gray-50 text-gray-700 font-medium border border-gray-300 rounded-lg transition-colors"
            >
              Try Again
            </button>
          </div>
        </div>
      </div>

      <!-- Email Verification Form (for public access) -->
      <div id="email-verification" class="hidden">
        <div class="bg-white rounded-lg shadow-sm p-6">
          <div class="text-center mb-6">
            <svg
              class="w-12 h-12 mx-auto mb-4 text-teal-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
              ></path>
            </svg>
            <h3 class="text-lg font-medium text-gray-900">
              Email Verification Required
            </h3>
            <p class="mt-2 text-gray-600">
              Please enter your email address to view this appointment.
            </p>
          </div>

          <form id="email-verification-form" onsubmit="verifyEmail(event)">
            <div class="space-y-4">
              <div>
                <label
                  for="verification-email"
                  class="block text-sm font-medium text-gray-700 mb-1"
                >
                  Email Address
                </label>
                <input
                  type="email"
                  id="verification-email"
                  required
                  class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Enter the email used for booking"
                />
              </div>

              <div id="verification-error" class="hidden text-sm text-red-600">
                <!-- Error message will be displayed here -->
              </div>

              <div class="flex justify-end space-x-3">
                <a
                  href="/calendar"
                  class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Back to Calendar
                </a>
                <button
                  type="submit"
                  id="verify-btn"
                  class="px-6 py-2 text-sm font-medium text-white bg-teal-600 hover:bg-teal-700 rounded-lg transition-colors"
                >
                  <span id="verify-btn-text">Verify Email</span>
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </main>
</BaseLayout>

<script is:inline define:vars={{ id }}>
  // Global variables
  let appointmentData = null;
  let isAuthenticated = false;

  // Check authentication status
  function checkAuthentication() {
    const token = localStorage.getItem("access_token");
    return !!token;
  }

  // Load appointment details using single-user endpoints
  async function loadAppointment(email = null) {
    showLoading();

    try {
      const API_BASE = window.location.origin.includes("localhost")
        ? "http://localhost:8000"
        : "https://corrison.corrisonapi.com";

      let response;

      isAuthenticated = checkAuthentication();

      if (isAuthenticated) {
        // Try authenticated endpoint first
        response = await fetch(
          `${API_BASE}/api/v1/appointments/appointments/${id}/`,
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("access_token")}`,
            },
          },
        );
      }

      // If not authenticated or authenticated request failed, try public endpoint
      if (!isAuthenticated || !response.ok) {
        if (!email) {
          showEmailVerification();
          return;
        }

        response = await fetch(
          `${API_BASE}/api/v1/calendar/appointment/${id}/?email=${encodeURIComponent(email)}`,
        );
      }

      if (!response.ok) {
        throw new Error(`Failed to load appointment: ${response.status}`);
      }

      appointmentData = await response.json();
      showAppointment();
    } catch (error) {
      console.error("Error loading appointment:", error);
      showError(error.message || "Failed to load appointment details");
    }
  }

  // Verify email for public access
  window.verifyEmail = async function (event) {
    event.preventDefault();

    const emailInput = document.getElementById("verification-email");
    const verifyBtn = document.getElementById("verify-btn");
    const verifyBtnText = document.getElementById("verify-btn-text");
    const errorDiv = document.getElementById("verification-error");

    const email = emailInput.value.trim();

    if (!email) {
      showVerificationError("Please enter your email address");
      return;
    }

    // Show loading state
    verifyBtn.disabled = true;
    verifyBtnText.textContent = "Verifying...";
    hideVerificationError();

    try {
      await loadAppointment(email);
    } catch (error) {
      showVerificationError("Invalid email address or appointment not found");
    } finally {
      verifyBtn.disabled = false;
      verifyBtnText.textContent = "Verify Email";
    }
  };

  // Show appointment details
  function showAppointment() {
    if (!appointmentData) return;

    const contentDiv = document.getElementById("appointment-content");
    const titleElement = document.getElementById("appointment-title");

    if (titleElement) {
      titleElement.textContent = `${appointmentData.appointment_type_name || "Appointment"} - #${appointmentData.id}`;
    }

    if (contentDiv) {
      contentDiv.innerHTML = `
        <div class="space-y-6">
          <!-- Main Appointment Card -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            ${renderAppointmentCard(appointmentData)}
          </div>

          ${
            appointmentData.customer_notes
              ? `
            <!-- Customer Notes -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 class="text-lg font-medium text-gray-900 mb-3">Notes</h3>
              <p class="text-gray-700">${appointmentData.customer_notes}</p>
            </div>
          `
              : ""
          }

          <!-- Actions -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Actions</h3>
            <div class="flex flex-wrap gap-3">
              ${
                appointmentData.can_be_cancelled &&
                appointmentData.status !== "cancelled"
                  ? `
                <button
                  onclick="cancelAppointment()"
                  class="inline-flex items-center px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-medium rounded-lg transition-colors"
                >
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Cancel Appointment
                </button>
              `
                  : ""
              }
              
              <a
                href="/calendar"
                class="inline-flex items-center px-4 py-2 bg-teal-600 hover:bg-teal-700 text-white font-medium rounded-lg transition-colors"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                Book Another Appointment
              </a>

              ${
                isAuthenticated
                  ? `
                <a
                  href="/calendar/my-appointments"
                  class="inline-flex items-center px-4 py-2 bg-white hover:bg-gray-50 text-gray-700 font-medium border border-gray-300 rounded-lg transition-colors"
                >
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                  </svg>
                  My Appointments
                </a>
              `
                  : ""
              }
            </div>
          </div>
        </div>
      `;
    }

    hideLoading();
    showContent();
  }

  // Render appointment card HTML
  function renderAppointmentCard(appointment) {
    const statusColors = {
      confirmed: "bg-green-100 text-green-800",
      pending: "bg-yellow-100 text-yellow-800",
      cancelled: "bg-red-100 text-red-800",
      completed: "bg-blue-100 text-blue-800",
    };

    const statusText = {
      confirmed: "Confirmed",
      pending: "Pending",
      cancelled: "Cancelled",
      completed: "Completed",
    };

    return `
      <div class="space-y-6">
        <!-- Header -->
        <div class="flex items-start justify-between">
          <div>
            <h2 class="text-xl font-semibold text-gray-900">${appointment.appointment_type_name || "Appointment"}</h2>
            ${
              appointment.calendar_user_name
                ? `
              <p class="text-gray-600 mt-1">with ${appointment.calendar_user_name}</p>
            `
                : ""
            }
          </div>
          <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${statusColors[appointment.status] || "bg-gray-100 text-gray-800"}">
            ${statusText[appointment.status] || appointment.status}
          </span>
        </div>

        <!-- Date and Time -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-teal-100 rounded-lg flex items-center justify-center">
              <svg class="w-5 h-5 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div>
              <p class="text-sm text-gray-600">Date</p>
              <p class="font-medium">${formatDate(appointment.date)}</p>
            </div>
          </div>

          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-teal-100 rounded-lg flex items-center justify-center">
              <svg class="w-5 h-5 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div>
              <p class="text-sm text-gray-600">Time</p>
              <p class="font-medium">${formatTime(appointment.start_time)} - ${formatTime(appointment.end_time)}</p>
            </div>
          </div>

          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-teal-100 rounded-lg flex items-center justify-center">
              <svg class="w-5 h-5 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
            <div>
              <p class="text-sm text-gray-600">Duration</p>
              <p class="font-medium">${appointment.duration_minutes} minutes</p>
            </div>
          </div>
        </div>

        ${
          appointment.payment_required && appointment.payment_amount
            ? `
          <!-- Payment Information -->
          <div class="bg-gray-50 rounded-lg p-4">
            <div class="flex items-center justify-between">
              <div class="flex items-center space-x-3">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v2"></path>
                </svg>
                <span class="text-gray-700">Payment</span>
              </div>
              <div class="text-right">
                <div class="font-semibold text-gray-900">${appointment.payment_amount}</div>
                <div class="text-sm ${
                  appointment.payment_status === "paid"
                    ? "text-green-600"
                    : appointment.payment_status === "pending"
                      ? "text-yellow-600"
                      : "text-gray-600"
                }">
                  ${
                    appointment.payment_status === "paid"
                      ? "Paid"
                      : appointment.payment_status === "pending"
                        ? "Payment Required"
                        : "Not Required"
                  }
                </div>
              </div>
            </div>
          </div>
        `
            : ""
        }

        <!-- Customer Information -->
        <div class="border-t border-gray-200 pt-6">
          <h4 class="text-sm font-medium text-gray-900 mb-3">Contact Information</h4>
          <div class="space-y-2 text-sm">
            <div><span class="text-gray-600">Name:</span> <span class="font-medium">${appointment.customer_name}</span></div>
            <div><span class="text-gray-600">Email:</span> <span class="font-medium">${appointment.customer_email}</span></div>
            ${
              appointment.customer_phone
                ? `
              <div><span class="text-gray-600">Phone:</span> <span class="font-medium">${appointment.customer_phone}</span></div>
            `
                : ""
            }
          </div>
        </div>
      </div>
    `;
  }

  // Cancel appointment using single-user endpoints
  window.cancelAppointment = async function () {
    if (!confirm("Are you sure you want to cancel this appointment?")) {
      return;
    }

    try {
      const API_BASE = window.location.origin.includes("localhost")
        ? "http://localhost:8000"
        : "https://corrison.corrisonapi.com";

      let response;

      if (isAuthenticated) {
        response = await fetch(
          `${API_BASE}/api/v1/appointments/appointments/${id}/cancel/`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("access_token")}`,
            },
          },
        );
      } else {
        const email = appointmentData.customer_email;
        response = await fetch(
          `${API_BASE}/api/v1/calendar/appointment/${id}/cancel/`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ email }),
          },
        );
      }

      if (response.ok) {
        // Reload appointment data
        const email = isAuthenticated ? null : appointmentData.customer_email;
        await loadAppointment(email);

        // Show success message
        showNotification("Appointment cancelled successfully", "success");
      } else {
        throw new Error("Failed to cancel appointment");
      }
    } catch (error) {
      console.error("Error cancelling appointment:", error);
      showNotification(
        "Failed to cancel appointment. Please try again.",
        "error",
      );
    }
  };

  // Retry loading appointment
  window.retryLoadAppointment = function () {
    const email = isAuthenticated
      ? null
      : appointmentData
        ? appointmentData.customer_email
        : null;
    loadAppointment(email);
  };

  // Utility functions
  function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  }

  function formatTime(timeString) {
    const [hours, minutes] = timeString.split(":");
    const date = new Date();
    date.setHours(parseInt(hours), parseInt(minutes));
    return date.toLocaleTimeString("en-US", {
      hour: "numeric",
      minute: "2-digit",
      hour12: true,
    });
  }

  // State management functions
  function showLoading() {
    document.getElementById("appointment-loading").classList.remove("hidden");
    document.getElementById("appointment-content").classList.add("hidden");
    document.getElementById("appointment-error").classList.add("hidden");
    document.getElementById("email-verification").classList.add("hidden");
  }

  function showContent() {
    document.getElementById("appointment-loading").classList.add("hidden");
    document.getElementById("appointment-content").classList.remove("hidden");
    document.getElementById("appointment-error").classList.add("hidden");
    document.getElementById("email-verification").classList.add("hidden");
  }

  function showError(message) {
    const errorDiv = document.getElementById("appointment-error");
    const errorMessage = document.getElementById("error-message");

    if (errorMessage) errorMessage.textContent = message;

    document.getElementById("appointment-loading").classList.add("hidden");
    document.getElementById("appointment-content").classList.add("hidden");
    errorDiv.classList.remove("hidden");
    document.getElementById("email-verification").classList.add("hidden");
  }

  function showEmailVerification() {
    document.getElementById("appointment-loading").classList.add("hidden");
    document.getElementById("appointment-content").classList.add("hidden");
    document.getElementById("appointment-error").classList.add("hidden");
    document.getElementById("email-verification").classList.remove("hidden");
  }

  function hideLoading() {
    document.getElementById("appointment-loading").classList.add("hidden");
  }

  function showVerificationError(message) {
    const errorDiv = document.getElementById("verification-error");
    errorDiv.textContent = message;
    errorDiv.classList.remove("hidden");
  }

  function hideVerificationError() {
    document.getElementById("verification-error").classList.add("hidden");
  }

  // Notification function
  function showNotification(message, type = "info") {
    const notification = document.createElement("div");
    notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm ${
      type === "success"
        ? "bg-green-100 text-green-800 border border-green-200"
        : type === "error"
          ? "bg-red-100 text-red-800 border border-red-200"
          : "bg-blue-100 text-blue-800 border border-blue-200"
    }`;

    notification.innerHTML = `
      <div class="flex items-center">
        <div class="flex-1">
          <p class="text-sm font-medium">${message}</p>
        </div>
        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-gray-400 hover:text-gray-600">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;

    document.body.appendChild(notification);

    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 5000);
  }

  // Initialize page
  document.addEventListener("DOMContentLoaded", function () {
    loadAppointment();
  });
</script>
