---
// src/pages/calendar/my-appointments.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import DashboardNav from "../../components/dashboard/DashboardNav.astro";
import AppointmentList from "../../components/calendar/AppointmentList.astro";
---

<BaseLayout>
  <title slot="title">My Appointments - Dashboard</title>
  <meta
    slot="head"
    name="description"
    content="View and manage all your scheduled appointments in one place."
  />

  <!-- Dashboard Navigation -->
  <DashboardNav currentPage="appointments" />

  <!-- Main Content -->
  <div class="lg:ml-64">
    <main class="py-6">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Page Header -->
        <div class="mb-8">
          <div class="md:flex md:items-center md:justify-between">
            <div class="flex-1 min-w-0">
              <h1 class="text-2xl font-bold text-gray-900">My Appointments</h1>
              <p class="mt-1 text-sm text-gray-600">
                View and manage all your scheduled appointments
              </p>
            </div>

            <div class="mt-4 flex md:mt-0 md:ml-4">
              <a
                href="/calendar"
                class="inline-flex items-center px-4 py-2 bg-teal-600 hover:bg-teal-700 text-white font-medium rounded-lg transition-colors"
              >
                <svg
                  class="w-4 h-4 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Book New Appointment
              </a>
            </div>
          </div>
        </div>

        <!-- Authentication Check -->
        <div id="auth-check" class="hidden">
          <div
            class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6"
          >
            <div class="flex">
              <div class="flex-shrink-0">
                <svg
                  class="h-5 w-5 text-yellow-400"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fill-rule="evenodd"
                    d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                    clip-rule="evenodd"></path>
                </svg>
              </div>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-yellow-800">
                  Authentication Required
                </h3>
                <div class="mt-2 text-sm text-yellow-700">
                  <p>Please log in to view your appointments.</p>
                </div>
                <div class="mt-4">
                  <div class="-mx-2 -my-1.5 flex">
                    <a
                      href="/auth/login?redirect=/calendar/my-appointments"
                      class="bg-yellow-50 px-2 py-1.5 rounded-md text-sm font-medium text-yellow-800 hover:bg-yellow-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-yellow-50 focus:ring-yellow-600"
                    >
                      Sign In
                    </a>
                    <a
                      href="/auth/register?redirect=/calendar/my-appointments"
                      class="ml-3 bg-yellow-50 px-2 py-1.5 rounded-md text-sm font-medium text-yellow-800 hover:bg-yellow-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-yellow-50 focus:ring-yellow-600"
                    >
                      Create Account
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Stats - Fixed to display horizontally -->
        <div
          id="appointment-stats"
          class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"
        >
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="flex items-center">
              <div
                class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center"
              >
                <svg
                  class="w-5 h-5 text-blue-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                  ></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm text-gray-600">Total</p>
                <p
                  class="text-2xl font-semibold text-gray-900"
                  id="total-count"
                >
                  0
                </p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="flex items-center">
              <div
                class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center"
              >
                <svg
                  class="w-5 h-5 text-green-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm text-gray-600">Confirmed</p>
                <p
                  class="text-2xl font-semibold text-gray-900"
                  id="confirmed-count"
                >
                  0
                </p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="flex items-center">
              <div
                class="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center"
              >
                <svg
                  class="w-5 h-5 text-yellow-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm text-gray-600">Pending</p>
                <p
                  class="text-2xl font-semibold text-gray-900"
                  id="pending-count"
                >
                  0
                </p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="flex items-center">
              <div
                class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center"
              >
                <svg
                  class="w-5 h-5 text-purple-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm text-gray-600">This Month</p>
                <p
                  class="text-2xl font-semibold text-gray-900"
                  id="month-count"
                >
                  0
                </p>
              </div>
            </div>
          </div>
        </div>

        <!-- All Appointments with Filters -->
        <div id="appointments-section" class="hidden mb-8">
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="px-6 py-4 border-b border-gray-200">
              <div class="flex items-center justify-between">
                <h2 class="text-lg font-semibold text-gray-900">
                  My Appointments
                </h2>

                <!-- Filters -->
                <div class="flex items-center space-x-4">
                  <select
                    id="status-filter"
                    class="text-sm border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500"
                  >
                    <option value="">All Status</option>
                    <option value="upcoming">Upcoming</option>
                    <option value="confirmed">Confirmed</option>
                    <option value="pending">Pending</option>
                    <option value="completed">Completed</option>
                    <option value="cancelled">Cancelled</option>
                  </select>

                  <button
                    onclick="refreshAppointments()"
                    class="p-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                    title="Refresh"
                  >
                    <svg
                      class="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                      ></path>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
            <div class="p-6">
              <div id="appointments-list" class="space-y-4">
                <!-- All appointments will be populated here -->
              </div>
              <div id="no-appointments" class="hidden text-center py-8">
                <svg
                  class="w-12 h-12 mx-auto mb-4 text-gray-300"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                  ></path>
                </svg>
                <h3 class="text-lg font-medium text-gray-900 mb-2">
                  No Appointments Found
                </h3>
                <p class="text-gray-600 mb-4">
                  You don't have any appointments that match the current filter.
                </p>
                <a
                  href="/calendar"
                  class="inline-flex items-center px-4 py-2 bg-teal-600 hover:bg-teal-700 text-white font-medium rounded-lg transition-colors"
                >
                  Book an Appointment
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</BaseLayout>

<script>
  import { authStore } from "../../stores/authStore";

  document.addEventListener("DOMContentLoaded", function () {
    console.log("🔍 Initializing My Appointments page...");

    // Global variables
    let allAppointments: any[] = [];
    let filteredAppointments: any[] = [];
    let currentFilter = "upcoming";

    // Initialize page
    initializePage();

    async function initializePage(): Promise<void> {
      try {
        // Check authentication using proper method
        const authState = authStore.getState();
        console.log("🔐 Auth state:", {
          isAuthenticated: authState.isAuthenticated,
          user: authState.user,
        });

        if (!authState.isAuthenticated || !authState.user) {
          console.log("❌ User not authenticated, showing auth warning");
          showAuthWarning();
          return;
        }

        console.log("✅ User authenticated, loading appointments...");
        await loadAppointments();
        applyFilters(); // Apply default filter
        showContent();
      } catch (error) {
        console.error("❌ Error initializing page:", error);

        // Check if it's an auth error
        if (
          error instanceof Error &&
          (error.message.includes("401") ||
            error.message.includes("Unauthorized"))
        ) {
          console.log("🔐 Authentication error, showing auth warning");
          showAuthWarning();
        } else {
          console.log("💥 General error, showing error message");
          showError("Failed to load appointments. Please try again later.");
        }
      }
    }

    // Load all appointments using single-user endpoints
    async function loadAppointments(): Promise<void> {
      try {
        const token = localStorage.getItem("access_token");
        if (!token) {
          throw new Error("No access token");
        }

        const API_BASE = window.location.origin.includes("localhost")
          ? "http://localhost:8000"
          : "https://corrison.corrisonapi.com";

        const response = await fetch(
          `${API_BASE}/api/v1/appointments/appointments/`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          },
        );

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        allAppointments = await response.json();
        updateStats();

        // Set up filter event listener
        const statusFilter = document.getElementById(
          "status-filter",
        ) as HTMLSelectElement;
        if (statusFilter) {
          statusFilter.value = currentFilter;
          statusFilter.addEventListener("change", applyFilters);
        }
      } catch (error) {
        console.error("Error loading appointments:", error);
        throw error;
      }
    }

    // Apply filters and render appointments
    function applyFilters(): void {
      const statusFilter = document.getElementById(
        "status-filter",
      ) as HTMLSelectElement;
      currentFilter = statusFilter?.value || "upcoming";

      const now = new Date();

      filteredAppointments = allAppointments.filter((appointment: any) => {
        const appointmentDate = new Date(
          `${appointment.date}T${appointment.start_time}`,
        );

        switch (currentFilter) {
          case "upcoming":
            return (
              appointmentDate > now &&
              (appointment.status === "confirmed" ||
                appointment.status === "pending")
            );
          case "confirmed":
            return appointment.status === "confirmed";
          case "pending":
            return appointment.status === "pending";
          case "completed":
            return appointment.status === "completed";
          case "cancelled":
            return appointment.status === "cancelled";
          default:
            return true; // 'all' or empty filter
        }
      });

      // Sort by date and time
      filteredAppointments.sort((a: any, b: any) => {
        const dateA = new Date(`${a.date}T${a.start_time}`);
        const dateB = new Date(`${b.date}T${b.start_time}`);
        return dateA.getTime() - dateB.getTime();
      });

      renderAppointments();
    }

    // Render filtered appointments
    function renderAppointments(): void {
      const appointmentsList = document.getElementById("appointments-list");
      const noAppointments = document.getElementById("no-appointments");

      if (filteredAppointments.length === 0) {
        if (appointmentsList) appointmentsList.classList.add("hidden");
        if (noAppointments) noAppointments.classList.remove("hidden");
      } else {
        if (noAppointments) noAppointments.classList.add("hidden");
        if (appointmentsList) {
          appointmentsList.classList.remove("hidden");
          appointmentsList.innerHTML = filteredAppointments
            .map((appointment: any) => renderAppointmentCard(appointment))
            .join("");
        }
      }
    }

    // Load upcoming appointments
    async function loadUpcomingAppointments(): Promise<void> {
      // This function is no longer needed as we use filters instead
    }

    // Render appointment card (replaces renderUpcomingAppointment)
    function renderAppointmentCard(appointment: any): string {
      const statusColors: Record<string, string> = {
        confirmed: "bg-green-100 text-green-800",
        pending: "bg-yellow-100 text-yellow-800",
        cancelled: "bg-red-100 text-red-800",
        completed: "bg-blue-100 text-blue-800",
      };

      return `
        <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
          <div class="flex items-center space-x-4">
            <div class="w-10 h-10 bg-teal-100 rounded-lg flex items-center justify-center">
              <svg class="w-5 h-5 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div>
              <h3 class="font-medium text-gray-900">${appointment.appointment_type_name || "Appointment"}</h3>
              <div class="flex items-center space-x-4 text-sm text-gray-600">
                <span>${formatDate(appointment.date)}</span>
                <span>${formatTime(appointment.start_time)}</span>
              </div>
            </div>
          </div>
          
          <div class="flex items-center space-x-3">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColors[appointment.status] || "bg-gray-100 text-gray-800"}">
              ${getStatusText(appointment.status)}
            </span>
            
            <a
              href="/calendar/appointment/?id=${appointment.id}&email=${encodeURIComponent(appointment.customer_email)}"
              class="text-teal-600 hover:text-teal-800 text-sm font-medium"
            >
              View Details
            </a>
          </div>
        </div>
      `;
    }

    // Update statistics
    function updateStats(): void {
      const total = allAppointments.length;
      const confirmed = allAppointments.filter(
        (a: any) => a.status === "confirmed",
      ).length;
      const pending = allAppointments.filter(
        (a: any) => a.status === "pending",
      ).length;

      // This month count
      const now = new Date();
      const thisMonth = allAppointments.filter((appointment: any) => {
        const appointmentDate = new Date(appointment.date);
        return (
          appointmentDate.getMonth() === now.getMonth() &&
          appointmentDate.getFullYear() === now.getFullYear()
        );
      }).length;

      // Update DOM
      const totalElement = document.getElementById("total-count");
      const confirmedElement = document.getElementById("confirmed-count");
      const pendingElement = document.getElementById("pending-count");
      const monthElement = document.getElementById("month-count");

      if (totalElement) totalElement.textContent = total.toString();
      if (confirmedElement) confirmedElement.textContent = confirmed.toString();
      if (pendingElement) pendingElement.textContent = pending.toString();
      if (monthElement) monthElement.textContent = thisMonth.toString();
    }

    // Cancel appointment function (no browser modal)
    (window as any).cancelAppointment = async function (
      appointmentId: number,
    ): Promise<void> {
      // Show custom confirmation instead of browser confirm
      showConfirmation(
        "Cancel Appointment",
        "Are you sure you want to cancel this appointment?",
        async () => {
          await performCancelAppointment(appointmentId);
        },
      );
    };

    // Perform the actual cancellation
    async function performCancelAppointment(
      appointmentId: number,
    ): Promise<void> {
      try {
        const token = localStorage.getItem("access_token");
        const authState = authStore.getState();

        if (!token || !authState.user?.email) {
          throw new Error("Authentication required");
        }

        const API_BASE = window.location.origin.includes("localhost")
          ? "http://localhost:8000"
          : "https://corrison.corrisonapi.com";

        const response = await fetch(
          `${API_BASE}/api/v1/calendar/appointment/${appointmentId}/cancel/`,
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              email: authState.user.email,
            }),
          },
        );

        if (response.ok) {
          showSuccess("Appointment cancelled successfully");
          // Refresh appointments
          await loadAppointments();
          applyFilters(); // Re-apply current filter
        } else {
          const errorData = await response.json();
          throw new Error(errorData.error || "Failed to cancel appointment");
        }
      } catch (error) {
        console.error("Error cancelling appointment:", error);
        showError(
          error instanceof Error
            ? error.message
            : "Failed to cancel appointment",
        );
      }
    }

    // Utility functions
    function formatDate(dateString: string): string {
      const date = new Date(dateString);
      return date.toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
        year: "numeric",
      });
    }

    function formatTime(timeString: string): string {
      const [hours, minutes] = timeString.split(":");
      const date = new Date();
      date.setHours(parseInt(hours), parseInt(minutes));
      return date.toLocaleTimeString("en-US", {
        hour: "numeric",
        minute: "2-digit",
        hour12: true,
      });
    }

    function getStatusText(status: string): string {
      const statusTexts: Record<string, string> = {
        confirmed: "Confirmed",
        pending: "Pending",
        cancelled: "Cancelled",
        completed: "Completed",
      };
      return statusTexts[status] || status;
    }

    // State management
    function showAuthWarning(): void {
      const authCheckElement = document.getElementById("auth-check");
      if (authCheckElement) {
        authCheckElement.classList.remove("hidden");
      }
      hideContent();
    }

    function showContent(): void {
      const statsElement = document.getElementById("appointment-stats");
      const appointmentsElement = document.getElementById(
        "appointments-section",
      );
      const authElement = document.getElementById("auth-check");

      if (statsElement) statsElement.classList.remove("hidden");
      if (appointmentsElement) appointmentsElement.classList.remove("hidden");
      if (authElement) authElement.classList.add("hidden");
    }

    function hideContent(): void {
      const statsElement = document.getElementById("appointment-stats");
      const appointmentsElement = document.getElementById(
        "appointments-section",
      );

      if (statsElement) statsElement.classList.add("hidden");
      if (appointmentsElement) appointmentsElement.classList.add("hidden");
    }

    function showError(message: string): void {
      showNotification(message, "error");
    }

    function showSuccess(message: string): void {
      showNotification(message, "success");
    }

    function showNotification(
      message: string,
      type: "success" | "error" = "error",
    ): void {
      // Create notification
      const notification = document.createElement("div");
      notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm ${
        type === "success"
          ? "bg-green-100 text-green-800 border border-green-200"
          : "bg-red-100 text-red-800 border border-red-200"
      }`;

      notification.innerHTML = `
        <div class="flex items-center">
          <div class="flex-1">
            <p class="text-sm font-medium">${message}</p>
          </div>
          <button onclick="this.parentElement.parentElement.remove()" class="ml-4 ${type === "success" ? "text-green-400 hover:text-green-600" : "text-red-400 hover:text-red-600"}">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      `;

      document.body.appendChild(notification);

      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 5000);
    }

    // Custom confirmation dialog (replaces browser confirm)
    function showConfirmation(
      title: string,
      message: string,
      onConfirm: () => void,
    ): void {
      const modal = document.createElement("div");
      modal.className = "fixed inset-0 z-50 overflow-y-auto";
      modal.innerHTML = `
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
          <div class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75" onclick="closeModal()"></div>
          
          <div class="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
            <h3 class="text-lg font-medium text-gray-900 mb-4">${title}</h3>
            <p class="text-sm text-gray-600 mb-6">${message}</p>
            
            <div class="flex justify-end space-x-3">
              <button
                onclick="closeModal()"
                class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                onclick="confirmAction()"
                class="px-4 py-2 text-sm font-medium text-white bg-red-600 hover:bg-red-700 rounded-lg transition-colors"
              >
                Confirm
              </button>
            </div>
          </div>
        </div>
      `;

      // Add modal functions
      (window as any).closeModal = () => {
        modal.remove();
      };

      (window as any).confirmAction = () => {
        onConfirm();
        modal.remove();
      };

      document.body.appendChild(modal);
    }

    // Global refresh function
    (window as any).refreshAppointments = async function () {
      const authState = authStore.getState();
      if (authState.isAuthenticated) {
        try {
          await loadAppointments();
          applyFilters();
        } catch (error) {
          console.error("Error refreshing appointments:", error);
          showError("Failed to refresh appointments");
        }
      }
    };

    // Subscribe to auth changes
    authStore.subscribe(() => {
      const newAuthState = authStore.getState();
      if (!newAuthState.isAuthenticated) {
        // User logged out, redirect to login
        window.location.href =
          "/auth/login?redirect=" +
          encodeURIComponent(window.location.pathname);
      }
    });

    // Legacy functions for compatibility
    (window as any).refreshUserAppointments = async function () {
      const authState = authStore.getState();
      if (authState.isAuthenticated) {
        try {
          await loadAppointments();
          applyFilters();
        } catch (error) {
          console.error("Error refreshing appointments:", error);
          showError("Failed to refresh appointments");
        }
      }
    };

    // Export for use by components
    (window as any).getUserAppointments = function () {
      return filteredAppointments; // Return filtered appointments instead of all
    };
  });
</script>

<style>
  /* Page specific styles */
  main {
    min-height: calc(100vh - 64px);
  }

  /* Ensure stats cards are responsive */
  @media (max-width: 1024px) {
    #appointment-stats {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    #appointment-stats {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 640px) {
    #appointment-stats {
      grid-template-columns: 1fr;
    }
  }
</style>
