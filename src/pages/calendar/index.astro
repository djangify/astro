---
// src/pages/calendar/index.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import DashboardNav from "../../components/dashboard/DashboardNav.astro";
---

<BaseLayout>
  <title slot="title">Calendar - Book an Appointment</title>
  <meta
    slot="head"
    name="description"
    content="Book an appointment with our calendar system. Select your preferred date and time."
  />

  <!-- Sidebar (hidden by default) -->
  <div id="sidebar-nav" class="hidden">
    <DashboardNav currentPage="calendar" />
  </div>

  <main id="main-content" class="min-h-screen bg-gray-50">
    <!-- Page Header -->
    <section>
      <div class="container mx-auto px-4 py-12">
        <div class="max-w-4xl mx-auto">
          <h1 class="text-3xl font-semibold text-gray-900 mb-4">
            Book An Appointment
          </h1>
          <p class="text-xl text-gray-600">
            Select your preferred date and time from our available slots.
          </p>
        </div>
      </div>
    </section>

    <!-- Main Content Area -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Calendar Container - will be populated dynamically -->
      <div id="calendar-container" class="hidden"></div>

      <!-- Loading State -->
      <div id="calendar-loading-state" class="text-center py-12">
        <div
          class="animate-spin rounded-full h-16 w-16 border-b-2 border-teal-600 mx-auto mb-4"
        >
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">
          Loading Calendar...
        </h3>
        <p class="text-gray-600">
          Please wait while we load the appointment calendar.
        </p>
      </div>

      <!-- Error State -->
      <div id="calendar-error-state" class="hidden text-center py-12">
        <svg
          class="w-16 h-16 mx-auto mb-4 text-red-300"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <h3 class="text-lg font-medium text-gray-900 mb-2">
          Calendar Not Available
        </h3>
        <p class="text-gray-600 mb-6" id="calendar-error-message">
          The calendar is not available for booking at this time.
        </p>
        <button
          onclick="loadCalendar()"
          class="bg-teal-600 hover:bg-teal-700 text-white font-medium px-4 py-2 rounded-lg transition-colors"
        >
          Try Again
        </button>
      </div>
    </div>
  </main>
</BaseLayout>

<script>
  import { authStore } from "../../stores/authStore";

  // Declare the global function type
  declare global {
    interface Window {
      loadCalendar: () => Promise<void>;
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    // Check authentication and setup layout
    const authState = authStore.getState();

    if (authState.isAuthenticated) {
      // Show sidebar
      const sidebarNav = document.getElementById("sidebar-nav");
      if (sidebarNav) {
        sidebarNav.classList.remove("hidden");
      }

      // Add margin to main content
      const mainContent = document.getElementById("main-content");
      if (mainContent) {
        mainContent.classList.add("lg:ml-64");
      }
    }

    // Initialize calendar after layout is set
    setTimeout(() => {
      if (window.loadCalendar) {
        window.loadCalendar();
      }
    }, 100);
  });
</script>

<script is:inline>
  // Global calendar instance
  let currentCalendar = null;

  // Load calendar automatically
  window.loadCalendar = async function () {
    showState("loading");

    try {
      const API_BASE = window.location.origin.includes("localhost")
        ? "http://localhost:8000"
        : "https://corrison.corrisonapi.com";

      // Get calendar info using new single-user endpoint
      const response = await fetch(`${API_BASE}/api/v1/calendar/info/`);

      if (!response.ok) {
        throw new Error("No calendar available for booking");
      }

      const calendarUser = await response.json();

      // Create calendar HTML dynamically
      const calendarContainer = document.getElementById("calendar-container");
      if (calendarContainer) {
        calendarContainer.innerHTML = createCalendarHTML();

        // Initialize the calendar JavaScript
        currentCalendar = new CalendarView(calendarUser);
      }

      // Show calendar
      showState("calendar");
    } catch (error) {
      console.error("Error loading calendar:", error);
      showState("error");

      const errorMessage = document.getElementById("calendar-error-message");
      if (errorMessage) {
        errorMessage.textContent =
          error.message || "Failed to load calendar. Please try again.";
      }
    }
  };

  // Create calendar HTML structure
  function createCalendarHTML() {
    return `
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <!-- Calendar Header -->
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="text-lg font-semibold text-gray-900" id="calendar-title">
                Loading...
              </h3>
              <p class="text-sm text-gray-600" id="calendar-subtitle">
                Select a date to view available appointment times
              </p>
            </div>

            <!-- Month Navigation -->
            <div class="flex items-center space-x-2">
              <button
                id="prev-month"
                class="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                aria-label="Previous month"
              >
                <svg
                  class="w-5 h-5 text-gray-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>

              <div
                class="px-4 py-2 text-sm font-medium text-gray-700"
                id="month-year-display"
              >
                <!-- Will be populated by JavaScript -->
              </div>

              <button
                id="next-month"
                class="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                aria-label="Next month"
              >
                <svg
                  class="w-5 h-5 text-gray-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>

        <!-- Loading State -->
        <div id="calendar-loading" class="p-6">
          <div class="animate-pulse">
            <div class="grid grid-cols-7 gap-1 mb-4">
              <div class="h-8 bg-gray-200 rounded"></div>
              <div class="h-8 bg-gray-200 rounded"></div>
              <div class="h-8 bg-gray-200 rounded"></div>
              <div class="h-8 bg-gray-200 rounded"></div>
              <div class="h-8 bg-gray-200 rounded"></div>
              <div class="h-8 bg-gray-200 rounded"></div>
              <div class="h-8 bg-gray-200 rounded"></div>
            </div>
            <div class="grid grid-cols-7 gap-1">
              ${Array.from({ length: 35 })
                .map(() => '<div class="h-16 bg-gray-100 rounded"></div>')
                .join("")}
            </div>
          </div>
        </div>

        <!-- Calendar Grid -->
        <div id="calendar-content" class="hidden">
          <!-- Day Headers -->
          <div class="grid grid-cols-7 border-b border-gray-200">
            <div class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200">Sun</div>
            <div class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200">Mon</div>
            <div class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200">Tue</div>
            <div class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200">Wed</div>
            <div class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200">Thu</div>
            <div class="px-3 py-2 text-xs font-medium text-gray-500 text-center border-r border-gray-200">Fri</div>
            <div class="px-3 py-2 text-xs font-medium text-gray-500 text-center">Sat</div>
          </div>

          <!-- Calendar Days -->
          <div id="calendar-grid" class="grid grid-cols-7">
            <!-- Days will be populated by JavaScript -->
          </div>
        </div>

        <!-- Error State -->
        <div id="calendar-error" class="hidden p-6 text-center">
          <div class="text-red-600 mb-2">
            <svg
              class="w-12 h-12 mx-auto mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">
            Unable to load calendar
          </h3>
          <p class="text-gray-600 mb-4" id="error-message">Please try again later</p>
          <button
            id="retry-calendar"
            class="bg-teal-700 hover:bg-teal-800 text-white font-medium px-4 py-2 rounded-lg transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>

      <!-- Selected Date Details Modal/Panel -->
      <div
        id="date-details"
        class="hidden mt-4 bg-white rounded-lg shadow-sm border border-gray-200"
      >
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <h4 class="text-lg font-medium text-gray-900" id="selected-date-title">
              Available Times
            </h4>
            <button
              id="close-date-details"
              class="text-gray-400 hover:text-gray-600"
              aria-label="Close"
            >
              <svg
                class="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>

        <div class="p-6">
          <div id="available-slots" class="space-y-3">
            <!-- Available time slots will be populated here -->
          </div>

          <div id="no-slots" class="hidden text-center py-8">
            <svg
              class="w-12 h-12 mx-auto mb-4 text-gray-300"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
              ></path>
            </svg>
            <h5 class="text-lg font-medium text-gray-900 mb-2">No Available Times</h5>
            <p class="text-gray-600">
              No appointment slots are available on this date.
            </p>
          </div>
        </div>
      </div>
    `;
  }

  function showState(state) {
    const calendarContainer = document.getElementById("calendar-container");
    const errorState = document.getElementById("calendar-error-state");
    const loadingState = document.getElementById("calendar-loading-state");

    // Hide all states
    [calendarContainer, errorState, loadingState].forEach((el) => {
      if (el) el.classList.add("hidden");
    });

    // Show selected state
    switch (state) {
      case "calendar":
        if (calendarContainer) calendarContainer.classList.remove("hidden");
        break;
      case "error":
        if (errorState) errorState.classList.remove("hidden");
        break;
      case "loading":
        if (loadingState) loadingState.classList.remove("hidden");
        break;
    }
  }

  // CalendarView class - updated for single user system with booking
  class CalendarView {
    constructor(calendarUser, selectedDate = null) {
      this.calendarUser = calendarUser;
      this.currentDate = new Date();
      this.selectedDate = selectedDate ? new Date(selectedDate) : null;
      this.availableSlots = new Map();
      this.appointmentTypes = calendarUser.appointment_types || [];

      this.init();
    }

    async init() {
      try {
        await this.loadCurrentMonth();
        this.setupEventListeners();
        this.hideLoading();

        // Update calendar title
        const title = document.getElementById("calendar-title");
        if (title) {
          title.textContent = `Book with ${this.calendarUser.display_name}`;
        }
      } catch (error) {
        console.error("Calendar initialization failed:", error);
        this.showError("Failed to load calendar");
      }
    }

    async loadCurrentMonth() {
      const year = this.currentDate.getFullYear();
      const month = this.currentDate.getMonth() + 1;

      // Update month/year display
      const monthYearDisplay = document.getElementById("month-year-display");
      if (monthYearDisplay) {
        monthYearDisplay.textContent = this.currentDate.toLocaleDateString(
          "en-US",
          {
            month: "long",
            year: "numeric",
          },
        );
      }

      // Load available slots for the month
      await this.loadAvailableSlots(year, month);

      // Render calendar grid
      this.renderCalendarGrid();
    }

    async loadAvailableSlots(year, month) {
      const API_BASE = window.location.origin.includes("localhost")
        ? "http://localhost:8000"
        : "https://corrison.corrisonapi.com";

      // Calculate date range for the month
      const startDate = new Date(year, month - 1, 1);
      const endDate = new Date(year, month, 0);

      const startDateStr = startDate.toISOString().split("T")[0];
      const endDateStr = endDate.toISOString().split("T")[0];

      if (this.appointmentTypes.length === 0) {
        console.warn("No appointment types available");
        return;
      }

      try {
        const allSlots = new Map();

        for (const appointmentType of this.appointmentTypes) {
          const url = `${API_BASE}/api/v1/calendar/slots/?start_date=${startDateStr}&end_date=${endDateStr}&appointment_type_id=${appointmentType.id}`;

          const response = await fetch(url);
          if (!response.ok) continue;

          const slots = await response.json();

          slots.forEach((slot) => {
            const dateKey = slot.date;
            if (!allSlots.has(dateKey)) {
              allSlots.set(dateKey, []);
            }
            allSlots.get(dateKey).push({
              ...slot,
              appointment_type: appointmentType,
            });
          });
        }

        this.availableSlots = allSlots;
      } catch (error) {
        console.error("Failed to load available slots:", error);
      }
    }

    renderCalendarGrid() {
      const grid = document.getElementById("calendar-grid");
      if (!grid) return;

      grid.innerHTML = "";

      const year = this.currentDate.getFullYear();
      const month = this.currentDate.getMonth();

      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const daysInMonth = lastDay.getDate();
      const startingDayOfWeek = firstDay.getDay();

      // Add empty cells for days before month starts
      for (let i = 0; i < startingDayOfWeek; i++) {
        const emptyCell = document.createElement("div");
        emptyCell.className = "h-16 border-r border-b border-gray-200";
        grid.appendChild(emptyCell);
      }

      // Add cells for each day of the month
      for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(year, month, day);
        const dateStr = date.toISOString().split("T")[0];
        const isToday = this.isToday(date);
        const isPast = date < new Date().setHours(0, 0, 0, 0);
        const hasSlots = this.availableSlots.has(dateStr);
        const isSelected =
          this.selectedDate && this.isSameDate(date, this.selectedDate);

        const dayCell = document.createElement("div");
        dayCell.className = `h-16 border-r border-b border-gray-200 p-1 cursor-pointer transition-colors ${
          isPast
            ? "bg-gray-50 text-gray-400"
            : hasSlots
              ? "hover:bg-teal-50 bg-white"
              : "bg-gray-50 text-gray-600"
        } ${isSelected ? "bg-teal-100 border-teal-300" : ""}`;

        dayCell.innerHTML = `
        <div class="flex flex-col h-full">
          <div class="flex-1">
            <span class="text-sm font-medium ${isToday ? "text-teal-700" : ""}">${day}</span>
            ${isToday ? '<div class="w-1 h-1 bg-teal-700 rounded-full mt-1"></div>' : ""}
          </div>
          ${
            hasSlots && !isPast
              ? `
            <div class="flex-shrink-0">
              <div class="w-2 h-2 bg-teal-600 rounded-full"></div>
            </div>
          `
              : ""
          }
        </div>
      `;

        if (!isPast && hasSlots) {
          dayCell.addEventListener("click", () => this.selectDate(dateStr));
        }

        grid.appendChild(dayCell);
      }
    }

    selectDate(dateStr) {
      this.selectedDate = new Date(dateStr);
      this.renderCalendarGrid();
      this.showDateDetails(dateStr);
    }

    showDateDetails(dateStr) {
      const dateDetails = document.getElementById("date-details");
      const selectedDateTitle = document.getElementById("selected-date-title");
      const availableSlotsContainer =
        document.getElementById("available-slots");
      const noSlotsMessage = document.getElementById("no-slots");

      if (!dateDetails || !selectedDateTitle || !availableSlotsContainer)
        return;

      const date = new Date(dateStr);
      selectedDateTitle.textContent = `Available Times - ${date.toLocaleDateString(
        "en-US",
        {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
        },
      )}`;

      const slots = this.availableSlots.get(dateStr) || [];

      if (slots.length === 0) {
        availableSlotsContainer.classList.add("hidden");
        noSlotsMessage.classList.remove("hidden");
      } else {
        noSlotsMessage.classList.add("hidden");
        availableSlotsContainer.classList.remove("hidden");

        // Group slots by appointment type
        const slotsByType = new Map();
        slots.forEach((slot) => {
          const typeId = slot.appointment_type.id;
          if (!slotsByType.has(typeId)) {
            slotsByType.set(typeId, {
              type: slot.appointment_type,
              slots: [],
            });
          }
          slotsByType.get(typeId).slots.push(slot);
        });

        // Render slots by type
        availableSlotsContainer.innerHTML = "";
        slotsByType.forEach(({ type, slots }) => {
          const typeSection = document.createElement("div");
          typeSection.className = "mb-6 last:mb-0";

          typeSection.innerHTML = `
          <h6 class="font-medium text-gray-900 mb-3">
            ${type.name} (${type.duration_minutes} min)
            ${type.price ? `- $${type.price}` : ""}
          </h6>
          <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2">
            ${slots
              .map(
                (slot) => `
              <button
                class="p-2 text-sm border border-gray-300 rounded-lg hover:border-teal-500 hover:bg-teal-50 transition-colors"
                onclick="selectTimeSlot('${dateStr}', '${slot.start_time}', ${type.id})"
              >
                ${this.formatTime(slot.start_time)}
              </button>
            `,
              )
              .join("")}
          </div>
        `;

          availableSlotsContainer.appendChild(typeSection);
        });
      }

      dateDetails.classList.remove("hidden");
      dateDetails.scrollIntoView({ behavior: "smooth", block: "nearest" });
    }

    formatTime(timeString) {
      const [hours, minutes] = timeString.split(":");
      const date = new Date();
      date.setHours(parseInt(hours), parseInt(minutes));
      return date.toLocaleTimeString("en-US", {
        hour: "numeric",
        minute: "2-digit",
        hour12: true,
      });
    }

    setupEventListeners() {
      // Month navigation
      const prevButton = document.getElementById("prev-month");
      const nextButton = document.getElementById("next-month");

      if (prevButton) {
        prevButton.addEventListener("click", () => this.navigateMonth(-1));
      }

      if (nextButton) {
        nextButton.addEventListener("click", () => this.navigateMonth(1));
      }

      // Close date details
      const closeButton = document.getElementById("close-date-details");
      if (closeButton) {
        closeButton.addEventListener("click", () => {
          document.getElementById("date-details").classList.add("hidden");
        });
      }

      // Retry button
      const retryButton = document.getElementById("retry-calendar");
      if (retryButton) {
        retryButton.addEventListener("click", () => {
          this.hideError();
          this.showLoading();
          this.init();
        });
      }
    }

    async navigateMonth(direction) {
      this.currentDate.setMonth(this.currentDate.getMonth() + direction);
      await this.loadCurrentMonth();
    }

    hideLoading() {
      const loading = document.getElementById("calendar-loading");
      const content = document.getElementById("calendar-content");

      if (loading) loading.classList.add("hidden");
      if (content) content.classList.remove("hidden");
    }

    showLoading() {
      const loading = document.getElementById("calendar-loading");
      const content = document.getElementById("calendar-content");
      const error = document.getElementById("calendar-error");

      if (loading) loading.classList.remove("hidden");
      if (content) content.classList.add("hidden");
      if (error) error.classList.add("hidden");
    }

    showError(message) {
      const loading = document.getElementById("calendar-loading");
      const content = document.getElementById("calendar-content");
      const error = document.getElementById("calendar-error");
      const errorMessage = document.getElementById("error-message");

      if (loading) loading.classList.add("hidden");
      if (content) content.classList.add("hidden");
      if (error) error.classList.remove("hidden");
      if (errorMessage) errorMessage.textContent = message;
    }

    hideError() {
      const error = document.getElementById("calendar-error");
      if (error) error.classList.add("hidden");
    }

    isToday(date) {
      const today = new Date();
      return this.isSameDate(date, today);
    }

    isSameDate(date1, date2) {
      return (
        date1.getFullYear() === date2.getFullYear() &&
        date1.getMonth() === date2.getMonth() &&
        date1.getDate() === date2.getDate()
      );
    }
  }

  // Updated selectTimeSlot function with authentication and booking
  window.selectTimeSlot = function (date, time, appointmentTypeId) {
    console.log("Selected slot:", { date, time, appointmentTypeId });

    // Check authentication first
    const token = localStorage.getItem("access_token");
    if (!token) {
      showLoginRequired();
      return;
    }

    // Show booking form
    showBookingForm(date, time, appointmentTypeId);
  };

  // Show login required message
  function showLoginRequired() {
    // Remove any existing messages
    const existingMessages = document.querySelectorAll(".login-message");
    existingMessages.forEach((msg) => msg.remove());

    // Create login message element
    const loginMessage = document.createElement("div");
    loginMessage.className =
      "login-message mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg";
    loginMessage.innerHTML = `
      <div class="flex items-center">
        <svg class="w-5 h-5 text-yellow-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>
        </svg>
        <div>
          <h3 class="text-sm font-medium text-yellow-800">Login Required</h3>
          <p class="mt-1 text-sm text-yellow-700">
            Please log in to book appointments. 
            <a href="/auth/login" class="underline hover:text-yellow-900">Click here to log in</a>
          </p>
        </div>
        <button onclick="this.parentElement.parentElement.remove()" class="ml-auto text-yellow-400 hover:text-yellow-600">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;

    // Insert after calendar
    const calendar = document.querySelector('[id="calendar-container"]');
    calendar.parentNode.insertBefore(loginMessage, calendar.nextSibling);

    // Auto-remove after 10 seconds
    setTimeout(() => {
      if (loginMessage.parentElement) {
        loginMessage.remove();
      }
    }, 10000);
  }

  // Show booking form
  function showBookingForm(date, time, appointmentTypeId) {
    // Get user data for pre-filling
    const userData = getUserData();
    const appointmentType = getAppointmentType(appointmentTypeId);

    if (!appointmentType) {
      showMessage("Error: Appointment type not found", "error");
      return;
    }

    // Calculate end time
    const [hours, minutes] = time.split(":");
    const startDateTime = new Date();
    startDateTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);
    const endDateTime = new Date(
      startDateTime.getTime() + appointmentType.duration_minutes * 60000,
    );
    const endTime = endDateTime.toTimeString().slice(0, 5);

    // Create booking form HTML
    const bookingFormHTML = `
      <div id="booking-form-container" class="mt-6 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="mb-4">
          <h3 class="text-lg font-semibold text-gray-900">Book Your Appointment</h3>
          <div class="mt-2 p-3 bg-gray-50 rounded-lg">
            <div class="text-sm text-gray-600 space-y-1">
              <p><span class="font-medium">Service:</span> ${appointmentType.name}</p>
              <p><span class="font-medium">Duration:</span> ${appointmentType.duration_minutes} minutes</p>
              <p><span class="font-medium">Date:</span> ${formatDate(date)}</p>
              <p><span class="font-medium">Time:</span> ${formatTime(time)} - ${formatTime(endTime)}</p>
              ${appointmentType.price ? `<p><span class="font-medium">Price:</span> $${appointmentType.price}</p>` : '<p><span class="font-medium">Price:</span> Free</p>'}
            </div>
          </div>
        </div>
        
        <form id="appointment-booking-form" onsubmit="submitBooking(event)">
          <div class="space-y-4">
            <div>
              <label for="customer_name" class="block text-sm font-medium text-gray-700 mb-1">Full Name *</label>
              <input 
                type="text" 
                id="customer_name" 
                name="customer_name" 
                required 
                value="${userData.name || ""}"
                class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
              />
            </div>
            
            <div>
              <label for="customer_email" class="block text-sm font-medium text-gray-700 mb-1">Email Address *</label>
              <input 
                type="email" 
                id="customer_email" 
                name="customer_email" 
                required 
                value="${userData.email || ""}"
                readonly
                class="w-full border border-gray-300 rounded-lg px-3 py-2 bg-gray-50 text-gray-600"
              />
            </div>
            
            <div>
              <label for="customer_phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
              <input 
                type="tel" 
                id="customer_phone" 
                name="customer_phone" 
                value="${userData.phone || ""}"
                class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
              />
            </div>
            
            <div>
              <label for="customer_notes" class="block text-sm font-medium text-gray-700 mb-1">Notes (Optional)</label>
              <textarea 
                id="customer_notes" 
                name="customer_notes" 
                rows="3"
                class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                placeholder="Any additional information or special requests..."
              ></textarea>
            </div>
          </div>
          
          <!-- Hidden fields -->
          <input type="hidden" name="appointment_type_id" value="${appointmentTypeId}">
          <input type="hidden" name="date" value="${date}">
          <input type="hidden" name="start_time" value="${time}">
          
          <div class="mt-6 flex justify-end space-x-3">
            <button 
              type="button" 
              onclick="cancelBooking()"
              class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button 
              type="submit"
              id="submit-booking-btn"
              class="px-6 py-2 text-sm font-medium text-white bg-teal-600 hover:bg-teal-700 rounded-lg transition-colors"
            >
              <span id="submit-text">${appointmentType.requires_payment ? `Book & Pay $${appointmentType.price}` : "Book Appointment"}</span>
            </button>
          </div>
        </form>
      </div>
    `;

    // Remove existing booking form if any
    const existingForm = document.getElementById("booking-form-container");
    if (existingForm) {
      existingForm.remove();
    }

    // Insert booking form after calendar
    const calendar = document.getElementById("calendar-container");
    calendar.insertAdjacentHTML("afterend", bookingFormHTML);

    // Scroll to form
    document.getElementById("booking-form-container").scrollIntoView({
      behavior: "smooth",
      block: "nearest",
    });
  }

  // Helper functions
  function getUserData() {
    try {
      const userData = localStorage.getItem("user");
      const user = userData ? JSON.parse(userData) : {};
      return {
        name:
          user.first_name && user.last_name
            ? `${user.first_name} ${user.last_name}`.trim()
            : user.username || "",
        email: user.email || "",
        phone: user.profile ? user.profile.phone || "" : "",
      };
    } catch {
      return { name: "", email: "", phone: "" };
    }
  }

  function getAppointmentType(typeId) {
    if (!currentCalendar || !currentCalendar.appointmentTypes) {
      return null;
    }
    return currentCalendar.appointmentTypes.find((type) => type.id === typeId);
  }

  function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  }

  function formatTime(timeString) {
    const [hours, minutes] = timeString.split(":");
    const date = new Date();
    date.setHours(parseInt(hours), parseInt(minutes));
    return date.toLocaleTimeString("en-US", {
      hour: "numeric",
      minute: "2-digit",
      hour12: true,
    });
  }

  function cancelBooking() {
    const form = document.getElementById("booking-form-container");
    if (form) {
      form.remove();
    }
  }

  async function submitBooking(event) {
    event.preventDefault();

    const submitBtn = document.getElementById("submit-booking-btn");
    const submitText = document.getElementById("submit-text");

    // Show loading state
    submitBtn.disabled = true;
    submitText.textContent = "Booking...";

    try {
      const formData = new FormData(event.target);
      const bookingData = {
        appointment_type_id: parseInt(formData.get("appointment_type_id")),
        customer_name: formData.get("customer_name"),
        customer_email: formData.get("customer_email"),
        customer_phone: formData.get("customer_phone") || "",
        customer_notes: formData.get("customer_notes") || "",
        date: formData.get("date"),
        start_time: formData.get("start_time"),
      };

      const API_BASE = window.location.origin.includes("localhost")
        ? "http://localhost:8000"
        : "https://corrison.corrisonapi.com";

      const response = await fetch(`${API_BASE}/api/v1/calendar/book/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("access_token")}`,
        },
        body: JSON.stringify(bookingData),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Booking failed");
      }

      // Handle successful booking
      if (result.requires_payment) {
        // Redirect to checkout
        showMessage("Appointment created. Redirecting to payment...", "info");
        setTimeout(() => {
          window.location.href = result.checkout_url;
        }, 2000);
      } else {
        // Free appointment - show success and refresh calendar
        showMessage(result.message, "success");
        cancelBooking(); // Remove form

        // Refresh calendar to show updated availability
        if (currentCalendar) {
          await currentCalendar.loadCurrentMonth();
        }
      }
    } catch (error) {
      console.error("Booking error:", error);
      showMessage(
        error.message || "Failed to book appointment. Please try again.",
        "error",
      );

      // Reset button
      submitBtn.disabled = false;
      const appointmentType = getAppointmentType(
        parseInt(formData.get("appointment_type_id")),
      );
      submitText.textContent = appointmentType?.requires_payment
        ? `Book & Pay $${appointmentType.price}`
        : "Book Appointment";
    }
  }

  function showMessage(message, type = "info") {
    // Create message element styled like Django messages
    const messageElement = document.createElement("div");
    messageElement.className = `message-notification mt-4 p-4 rounded-lg ${
      type === "success"
        ? "bg-green-50 border border-green-200 text-green-800"
        : type === "error"
          ? "bg-red-50 border border-red-200 text-red-800"
          : type === "warning"
            ? "bg-yellow-50 border border-yellow-200 text-yellow-800"
            : "bg-blue-50 border border-blue-200 text-blue-800"
    }`;

    messageElement.innerHTML = `
      <div class="flex items-center">
        <div class="flex-1">
          <p class="text-sm font-medium">${message}</p>
        </div>
        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-gray-400 hover:text-gray-600">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;

    // Insert at top of main content area
    const mainContent = document.querySelector("main .max-w-7xl");
    if (mainContent) {
      mainContent.insertBefore(messageElement, mainContent.firstChild);
    }

    // Auto-remove after 8 seconds
    setTimeout(() => {
      if (messageElement.parentElement) {
        messageElement.remove();
      }
    }, 8000);
  }
</script>

<style>
  /* Calendar page specific styles */
  main {
    min-height: calc(100vh - 64px);
  }

  /* Calendar grid styles */
  #calendar-grid > div:nth-child(7n) {
    border-right: none;
  }

  #calendar-grid > div:nth-last-child(-n + 7) {
    border-bottom: none;
  }
</style>
