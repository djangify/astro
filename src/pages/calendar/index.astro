---
// src/pages/calendar/index.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import CalendarView from "../../components/calendar/CalendarView.astro";
---

<BaseLayout>
  <title slot="title">Calendar - Book an Appointment</title>
  <meta
    slot="head"
    name="description"
    content="Book an appointment with our calendar system. Select your preferred date and time."
  />

  <main class="min-h-screen bg-gray-50">
    <!-- Page Header -->
    <div class="bg-white border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="py-8">
          <div class="md:flex md:items-center md:justify-between">
            <div class="flex-1 min-w-0">
              <h1 class="text-3xl font-bold text-gray-900">
                Book an Appointment
              </h1>
              <p class="mt-2 text-lg text-gray-600">
                Select a calendar owner to view their availability and book an
                appointment.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Calendar Owner Selection -->
      <div class="mb-8" id="calendar-selection">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h2 class="text-xl font-semibold text-gray-900 mb-4">
            Select Calendar Owner
          </h2>

          <div class="space-y-4">
            <div>
              <label
                for="calendar-username"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Calendar Username
              </label>
              <div class="flex space-x-3">
                <input
                  type="text"
                  id="calendar-username"
                  class="flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Enter calendar username (e.g., johndoe)"
                  value=""
                />
                <button
                  id="load-calendar-btn"
                  class="bg-teal-600 hover:bg-teal-700 text-white font-medium px-6 py-2 rounded-lg transition-colors"
                >
                  Load Calendar
                </button>
              </div>
              <p class="mt-2 text-sm text-gray-500">
                Enter the username of the calendar owner you'd like to book
                with.
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Loading State -->
      <div id="calendar-loading" class="text-center py-12">
        <div
          class="animate-spin rounded-full h-16 w-16 border-b-2 border-teal-600 mx-auto mb-4"
        >
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">
          Loading Calendar...
        </h3>
        <p class="text-gray-600">
          Finding available appointment slots for you.
        </p>
      </div>

      <!-- Error State -->
      <div id="calendar-error" class="hidden text-center py-12">
        <svg
          class="w-16 h-16 mx-auto mb-4 text-red-300"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <h3 class="text-lg font-medium text-gray-900 mb-2">
          Calendar Not Found
        </h3>
        <p class="text-gray-600 mb-6" id="error-message">
          No calendars are available for booking at this time.
        </p>
        <button
          id="retry-btn"
          class="bg-teal-600 hover:bg-teal-700 text-white font-medium px-4 py-2 rounded-lg transition-colors"
        >
          Try Again
        </button>
      </div>

      <!-- Calendar Container -->
      <div id="calendar-container" class="hidden">
        <CalendarView username="" />
      </div>
    </div>
  </main>
</BaseLayout>
<script>
  document.addEventListener("DOMContentLoaded", async function () {
    const calendarContainer = document.getElementById("calendar-container");
    const loadingDiv = document.getElementById("calendar-loading");
    const errorDiv = document.getElementById("calendar-error");
    const selectionDiv = document.getElementById("calendar-selection");
    const usernameInput = document.getElementById(
      "calendar-username",
    ) as HTMLInputElement;
    const loadBtn = document.getElementById("load-calendar-btn");
    const retryBtn = document.getElementById("retry-btn");
    const errorMessage = document.getElementById("error-message");

    // Check URL parameters first
    const urlParams = new URLSearchParams(window.location.search);
    const calendarParam = urlParams.get("calendar");

    if (calendarParam) {
      await loadCalendar(calendarParam);
    } else {
      await loadDefaultCalendar();
    }

    async function loadDefaultCalendar(): Promise<void> {
      try {
        const API_BASE = window.location.origin.includes("localhost")
          ? "http://localhost:8000"
          : "https://corrison.corrisonapi.com";

        const response = await fetch(
          `${API_BASE}/api/v1/appointments-booking/api/public/default/`,
        );

        if (response.ok) {
          const defaultCalendar = await response.json();
          await loadCalendar(defaultCalendar.username);
        } else {
          // No default calendar, show selection
          showSelection();
        }
      } catch (error: unknown) {
        console.error("No default calendar:", error);
        showSelection();
      }
    }

    async function loadCalendar(username: string): Promise<void> {
      showLoading();

      try {
        const API_BASE = window.location.origin.includes("localhost")
          ? "http://localhost:8000"
          : "https://corrison.corrisonapi.com";

        const response = await fetch(
          `${API_BASE}/api/v1/appointments-booking/api/public/${username}/`,
        );

        if (!response.ok) {
          throw new Error(
            `Calendar user '${username}' not found or not accepting bookings`,
          );
        }

        // Update input field
        if (usernameInput) {
          usernameInput.value = username;
        }

        // Show calendar container and initialize it
        showCalendar();

        // Update URL
        const url = new URL(window.location.href);
        url.searchParams.set("calendar", username);
        window.history.pushState({}, "", url);

        // Initialize calendar with the username
        // We need to pass the username to the CalendarView component
        if (calendarContainer) {
          const calendarView = calendarContainer.querySelector(
            "[data-calendar-username]",
          ) as HTMLElement;
          if (calendarView) {
            calendarView.setAttribute("data-calendar-username", username);
          }
        }
      } catch (error: unknown) {
        console.error("Error loading calendar:", error);
        const message =
          error instanceof Error ? error.message : "Unknown error occurred";
        showError(message);
      }
    }

    function showLoading(): void {
      hideAll();
      if (loadingDiv) loadingDiv.classList.remove("hidden");
    }

    function showCalendar(): void {
      hideAll();
      if (calendarContainer) calendarContainer.classList.remove("hidden");
    }

    function showSelection(): void {
      hideAll();
      if (selectionDiv) selectionDiv.classList.remove("hidden");
    }

    function showError(message: string): void {
      hideAll();
      if (errorDiv) errorDiv.classList.remove("hidden");
      if (errorMessage) errorMessage.textContent = message;
    }

    function hideAll(): void {
      [calendarContainer, loadingDiv, errorDiv, selectionDiv].forEach((el) => {
        if (el) el.classList.add("hidden");
      });
    }

    // Event listeners
    if (loadBtn) {
      loadBtn.addEventListener("click", async () => {
        const username = usernameInput?.value.trim();
        if (!username) {
          alert("Please enter a calendar username");
          return;
        }
        await loadCalendar(username);
      });
    }

    if (retryBtn) {
      retryBtn.addEventListener("click", () => {
        loadDefaultCalendar();
      });
    }

    if (usernameInput) {
      usernameInput.addEventListener(
        "keypress",
        async (event: KeyboardEvent) => {
          if (event.key === "Enter") {
            const username = usernameInput.value.trim();
            if (username) {
              await loadCalendar(username);
            }
          }
        },
      );
    }
  });
</script>
