---
// src/pages/calendar/appointment.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import DashboardNav from "../../components/dashboard/DashboardNav.astro";
// This page handles both:
// 1. Single appointment management: /calendar/appointment?id=123&email=user@example.com
// 2. All user appointments list: /calendar/appointment (no parameters)
---

<BaseLayout>
  <title slot="title">Manage Appointments – Corrison</title>
  <meta
    slot="head"
    name="description"
    content="View, edit, or cancel your appointments. See all your booking history and make changes as needed."
  />

  <!-- Dashboard Navigation -->
  <DashboardNav currentPage="customer-appointments" />

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Page Header -->
    <section>
      <div class="container mx-auto px-4 py-12">
        <div class="max-w-4xl mx-auto">
          <!-- Loading state for header content -->
          <div id="header-loading" class="animate-pulse">
            <div class="h-8 bg-gray-200 rounded mb-4 max-w-md"></div>
            <div class="h-6 bg-gray-200 rounded max-w-lg"></div>
          </div>

          <!-- Actual header content (hidden initially) -->
          <div id="header-content" class="hidden">
            <h1
              id="page-title"
              class="text-3xl font-semibold text-gray-900 mb-4"
            >
              Your Appointments
            </h1>
            <p id="page-description" class="text-xl text-gray-600">
              View and manage all your appointments in one place.
            </p>
          </div>
        </div>
      </div>
    </section>
    <!-- Main Content -->
    <main class="container mx-auto px-4 py-12">
      <!-- Loading State -->
      <div id="loading-state" class="text-center py-16">
        <div
          class="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-700 mx-auto mb-4"
        >
        </div>
        <p class="text-gray-600">Loading your appointments...</p>
      </div>

      <!-- Email Verification for Single Appointment -->
      <div id="email-verification" class="max-w-md mx-auto hidden">
        <div class="bg-white shadow-sm rounded-lg p-6">
          <h2 class="text-lg font-semibold text-gray-900 mb-4">
            Verify Your Email
          </h2>
          <p class="text-gray-600 mb-6">
            Please enter your email address to view this appointment.
          </p>
          <form onsubmit="verifyEmail(event)">
            <div class="mb-4">
              <input
                type="email"
                id="verification-email"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                placeholder="Enter your email address"
              />
            </div>
            <div
              id="verification-error"
              class="hidden text-sm text-red-600 mb-4"
            >
            </div>
            <button
              type="submit"
              id="verify-btn"
              class="w-full bg-teal-600 hover:bg-teal-700 text-white font-medium px-4 py-2 rounded-lg transition-colors"
            >
              <span id="verify-btn-text">Verify Email</span>
            </button>
          </form>
        </div>
      </div>

      <!-- No Appointments State -->
      <div id="no-appointments-state" class="text-center py-16 hidden">
        <svg
          class="h-16 w-16 mx-auto text-gray-300 mb-4"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
          ></path>
        </svg>
        <h2 class="text-2xl font-bold text-gray-900 mb-4">
          No Appointments Yet
        </h2>
        <p class="text-gray-600 mb-6">
          You don't have any appointments scheduled. Ready to book your first
          one?
        </p>
        <a
          href="/calendar/"
          class="inline-block bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors"
        >
          Book Your First Appointment
        </a>
      </div>

      <!-- Appointments List -->
      <div id="appointments-list" class="hidden max-w-6xl mx-auto">
        <div class="bg-white shadow-sm rounded-lg mb-8">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-900">
              All Appointments
            </h2>
            <p class="text-sm text-gray-600">
              Complete history of your bookings, reschedules, and cancellations.
            </p>
          </div>
          <div class="p-6">
            <div id="appointments-grid" class="space-y-4">
              <!-- Appointments will be populated here -->
            </div>
          </div>
        </div>
      </div>

      <!-- Single Appointment View -->
      <div id="single-appointment" class="hidden max-w-4xl mx-auto">
        <!-- Success/Info Messages -->
        <div id="global-message" class="hidden mb-6"></div>

        <!-- Appointment Details Card -->
        <div class="bg-white shadow-sm rounded-lg mb-8">
          <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <div>
                <h2 class="text-lg font-semibold text-gray-900">
                  Appointment Details
                </h2>
                <p class="text-sm text-gray-600">
                  Review your appointment information below.
                </p>
              </div>
              <div
                id="appointment-status-badge"
                class="px-3 py-1 rounded-full text-sm font-medium"
              >
                <!-- Status badge will be populated by JavaScript -->
              </div>
            </div>
          </div>

          <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Service Information -->
              <div class="space-y-4">
                <div>
                  <h3
                    class="text-sm font-medium text-gray-500 uppercase tracking-wide"
                  >
                    Service
                  </h3>
                  <p
                    id="service-name"
                    class="mt-1 text-lg font-medium text-gray-900"
                  >
                    -
                  </p>
                </div>
                <div>
                  <h3
                    class="text-sm font-medium text-gray-500 uppercase tracking-wide"
                  >
                    Provider
                  </h3>
                  <p
                    id="provider-name"
                    class="mt-1 text-lg font-medium text-gray-900"
                  >
                    -
                  </p>
                </div>
                <div>
                  <h3
                    class="text-sm font-medium text-gray-500 uppercase tracking-wide"
                  >
                    Duration
                  </h3>
                  <p
                    id="duration"
                    class="mt-1 text-lg font-medium text-gray-900"
                  >
                    -
                  </p>
                </div>
              </div>

              <!-- Appointment Time -->
              <div class="space-y-4">
                <div>
                  <h3
                    class="text-sm font-medium text-gray-500 uppercase tracking-wide"
                  >
                    Date
                  </h3>
                  <p
                    id="appointment-date"
                    class="mt-1 text-lg font-medium text-gray-900"
                  >
                    -
                  </p>
                </div>
                <div>
                  <h3
                    class="text-sm font-medium text-gray-500 uppercase tracking-wide"
                  >
                    Time
                  </h3>
                  <p
                    id="appointment-time"
                    class="mt-1 text-lg font-medium text-gray-900"
                  >
                    -
                  </p>
                </div>
                <div id="payment-info" class="hidden">
                  <h3
                    class="text-sm font-medium text-gray-500 uppercase tracking-wide"
                  >
                    Payment
                  </h3>
                  <p
                    id="payment-amount"
                    class="mt-1 text-lg font-medium text-gray-900"
                  >
                    -
                  </p>
                </div>
              </div>
            </div>

            <!-- Customer Notes -->
            <div
              id="notes-section"
              class="mt-6 pt-6 border-t border-gray-200 hidden"
            >
              <h3
                class="text-sm font-medium text-gray-500 uppercase tracking-wide"
              >
                Your Notes
              </h3>
              <p id="customer-notes" class="mt-1 text-gray-900">-</p>
            </div>

            <!-- Action Buttons -->
            <div
              class="mt-8 pt-6 border-t border-gray-200 flex flex-wrap gap-3"
            >
              <button
                id="edit-btn"
                class="bg-teal-600 hover:bg-teal-700 text-white font-medium px-4 py-2 rounded-lg transition-colors"
              >
                Edit Details
              </button>
              <button
                id="reschedule-btn"
                class="bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2 rounded-lg transition-colors"
              >
                Reschedule
              </button>
              <button
                id="cancel-btn"
                class="bg-red-600 hover:bg-red-700 text-white font-medium px-4 py-2 rounded-lg transition-colors"
              >
                Cancel Appointment
              </button>
              <a
                href="/calendar/appointment"
                class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium px-4 py-2 rounded-lg transition-colors"
              >
                ← View All Appointments
              </a>
            </div>
          </div>
        </div>

        <!-- Edit Form (Hidden initially) -->
        <div
          id="edit-form-section"
          class="bg-white shadow-sm rounded-lg mb-8 hidden"
        >
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-900">
              Edit Appointment Details
            </h2>
            <p class="text-sm text-gray-600">
              Update your contact information and notes.
            </p>
          </div>

          <form id="edit-form" class="p-6 space-y-6">
            <!-- Form Messages -->
            <div id="form-message" class="hidden"></div>

            <!-- Customer Name -->
            <div>
              <label
                for="customer_name"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Full Name
              </label>
              <input
                type="text"
                id="customer_name"
                name="customer_name"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                placeholder="Enter your full name"
              />
            </div>

            <!-- Phone Number -->
            <div>
              <label
                for="customer_phone"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Phone Number
              </label>
              <input
                type="tel"
                id="customer_phone"
                name="customer_phone"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                placeholder="Enter your phone number"
              />
            </div>

            <!-- Customer Notes -->
            <div>
              <label
                for="customer_notes_input"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Notes
              </label>
              <textarea
                id="customer_notes_input"
                name="customer_notes"
                rows="4"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                placeholder="Any special requests or information..."></textarea>
            </div>

            <!-- Action Buttons -->
            <div
              class="flex justify-end space-x-3 pt-6 border-t border-gray-200"
            >
              <button
                type="button"
                id="cancel-edit-btn"
                class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                id="save-edit-btn"
                class="px-4 py-2 bg-teal-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-teal-700 transition-colors"
              >
                Save Changes
              </button>
            </div>
          </form>
        </div>

        <!-- Reschedule Form (Hidden initially) -->
        <div
          id="reschedule-form-section"
          class="bg-white shadow-sm rounded-lg mb-8 hidden"
        >
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-900">
              Reschedule Appointment
            </h2>
            <p class="text-sm text-gray-600">
              Select a new date and time for your appointment.
            </p>
          </div>

          <div class="p-6">
            <!-- Reschedule Messages -->
            <div id="reschedule-message" class="hidden mb-6"></div>

            <!-- Loading available slots -->
            <div id="slots-loading" class="text-center py-8">
              <div
                class="animate-spin rounded-full h-8 w-8 border-b-2 border-teal-700 mx-auto mb-2"
              >
              </div>
              <p class="text-gray-600">Loading available times...</p>
            </div>

            <!-- Available slots grid -->
            <div id="available-slots" class="hidden">
              <h3 class="text-lg font-medium text-gray-900 mb-4">
                Available Times
              </h3>
              <div
                id="slots-grid"
                class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6"
              >
                <!-- Slots will be populated by JavaScript -->
              </div>

              <div
                class="flex justify-end space-x-3 pt-6 border-t border-gray-200"
              >
                <button
                  type="button"
                  id="cancel-reschedule-btn"
                  class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="button"
                  id="confirm-reschedule-btn"
                  disabled
                  class="px-4 py-2 bg-teal-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-teal-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Confirm Reschedule
                </button>
              </div>
            </div>

            <!-- No slots available -->
            <div id="no-slots" class="hidden text-center py-8">
              <p class="text-gray-600 mb-4">
                No available times found for rescheduling.
              </p>
              <button
                type="button"
                id="cancel-reschedule-no-slots-btn"
                class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Back to Appointment
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Error State -->
      <div id="error-state" class="text-center py-16 hidden">
        <svg
          class="h-16 w-16 mx-auto text-red-300 mb-4"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
          ></path>
        </svg>
        <h2 class="text-2xl font-bold text-gray-900 mb-4">
          Something Went Wrong
        </h2>
        <p id="error-message" class="text-gray-600 mb-6">
          Unable to load appointment information.
        </p>
        <div class="space-x-4">
          <button
            onclick="window.location.reload()"
            class="inline-block bg-teal-700 hover:bg-teal-800 text-white font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Try Again
          </button>
          <a
            href="/calendar/"
            class="inline-block bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium px-6 py-3 rounded-lg transition-colors"
          >
            Book New Appointment
          </a>
        </div>
      </div>
    </main>
  </div>

  <!-- Custom Confirmation Modal -->
  <div
    id="confirmation-modal"
    class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50"
  >
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="p-6">
          <div class="flex items-center mb-4">
            <div
              class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100"
            >
              <svg
                class="h-6 w-6 text-red-600"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
                ></path>
              </svg>
            </div>
          </div>
          <div class="text-center">
            <h3 class="text-lg font-medium text-gray-900 mb-2" id="modal-title">
              Cancel Appointment
            </h3>
            <p class="text-sm text-gray-500 mb-6" id="modal-message">
              Are you sure you want to cancel this appointment? This action
              cannot be undone.
            </p>
          </div>
          <div class="flex space-x-3">
            <button
              type="button"
              id="modal-cancel-btn"
              class="flex-1 px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Keep Appointment
            </button>
            <button
              type="button"
              id="modal-confirm-btn"
              class="flex-1 px-4 py-2 bg-red-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-red-700 transition-colors"
            >
              <span id="modal-confirm-text">Cancel Appointment</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script is:inline>
  let allAppointments = [];
  let currentAppointment = null;
  let selectedSlot = null;
  let customerEmail = null;
  let appointmentId = null;
  let isAuthenticated = false;

  document.addEventListener("DOMContentLoaded", function () {
    console.log("Initializing Appointments page...");

    // Initialize page settings first
    initializePageSettings();

    // Get URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    customerEmail = urlParams.get("email");
    appointmentId = urlParams.get("id");

    // Check authentication
    isAuthenticated = checkAuthentication();

    if (appointmentId && customerEmail) {
      // Single appointment view with email
      initializeSingleAppointment(appointmentId, customerEmail);
    } else if (appointmentId && !customerEmail) {
      // Show email verification for single appointment
      hideLoadingState();
      showEmailVerification();
    } else {
      // List all appointments - check if authenticated
      if (isAuthenticated) {
        initializeAuthenticatedAppointmentsList();
      } else {
        initializeUnauthenticatedAppointmentsList();
      }
    }
  });

  // Add these new functions anywhere after your DOMContentLoaded block
  async function initializePageSettings() {
    await loadAppointmentSettings();
  }

  async function loadAppointmentSettings() {
    try {
      const API_BASE = window.location.origin.includes("localhost")
        ? "http://localhost:8000"
        : "https://corrison.corrisonapi.com";

      const response = await fetch(`${API_BASE}/api/v1/appointment-settings/`, {
        method: "GET",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const data = await response.json();
        console.log("Appointment Settings Response:", data);

        // Handle both single object and array responses
        const settings = Array.isArray(data) ? data[0] : data;
        updateHeaderContent(settings);
      } else {
        console.error("Failed to load appointment settings:", response.status);
        showDefaultHeaderContent();
      }
    } catch (error) {
      console.error("Error loading appointment settings:", error);
      showDefaultHeaderContent();
    }
  }

  function updateHeaderContent(settings) {
    const headerLoading = document.getElementById("header-loading");
    const headerContent = document.getElementById("header-content");
    const pageTitle = document.getElementById("page-title");
    const pageDescription = document.getElementById("page-description");

    if (settings) {
      // Update title
      if (pageTitle && settings.page_title) {
        pageTitle.textContent = settings.page_title;
      }

      // Update description - use innerHTML for HTML content
      if (pageDescription && settings.page_description) {
        pageDescription.innerHTML = settings.page_description;
      }
    }

    // Show actual content and hide loading
    if (headerLoading) headerLoading.classList.add("hidden");
    if (headerContent) headerContent.classList.remove("hidden");
  }

  function showDefaultHeaderContent() {
    const headerLoading = document.getElementById("header-loading");
    const headerContent = document.getElementById("header-content");

    // Show actual content and hide loading
    if (headerLoading) headerLoading.classList.add("hidden");
    if (headerContent) headerContent.classList.remove("hidden");
  }

  function checkAuthentication() {
    const token = localStorage.getItem("access_token");
    return !!token;
  }

  // Initialize for authenticated users - load all their appointments
  async function initializeAuthenticatedAppointmentsList() {
    try {
      console.log("Loading authenticated user appointments...");

      await loadAllUserAppointments();

      if (allAppointments.length === 0) {
        hideLoadingState();
        showNoAppointmentsState();
      } else {
        displayAppointmentsList();
        hideLoadingState();
        showAppointmentsList();
      }
    } catch (error) {
      console.error("❌ Error loading user appointments:", error);
      hideLoadingState();

      if (
        error &&
        error.message &&
        (error.message.includes("401") ||
          error.message.includes("Unauthorized"))
      ) {
        // Token expired or invalid - treat as unauthenticated
        localStorage.removeItem("access_token");
        initializeUnauthenticatedAppointmentsList();
      } else {
        showError("Failed to load appointments");
      }
    }
  }

  // Initialize for unauthenticated users
  async function initializeUnauthenticatedAppointmentsList() {
    console.log("User not authenticated - showing no appointments");
    hideLoadingState();
    showNoAppointmentsState();
  }

  // Load all appointments for authenticated user
  async function loadAllUserAppointments() {
    const token = localStorage.getItem("access_token");
    if (!token) {
      throw new Error("No access token");
    }

    const API_BASE = window.location.origin.includes("localhost")
      ? "http://localhost:8000"
      : "https://corrison.corrisonapi.com";

    // FIXED: Use the correct customer appointments endpoint
    const response = await fetch(
      API_BASE + "/api/v1/my-appointments/", // CHANGED from "/api/v1/appointments/appointments/"
      {
        headers: {
          Authorization: "Bearer " + token,
          "Content-Type": "application/json",
        },
      },
    );

    if (!response.ok) {
      throw new Error("HTTP " + response.status + ": " + response.statusText);
    }

    allAppointments = await response.json();
    console.log("Loaded " + allAppointments.length + " appointments for user");
  }

  // Display appointments list
  function displayAppointmentsList() {
    const appointmentsGrid = document.getElementById("appointments-grid");
    if (!appointmentsGrid) return;

    // Sort appointments by date/time (MOST RECENT FIRST - FIXED SORTING)
    const sortedAppointments = allAppointments.slice().sort(function (a, b) {
      const dateA = new Date(a.date + "T" + a.start_time);
      const dateB = new Date(b.date + "T" + b.start_time);
      return dateA.getTime() - dateB.getTime(); // CHANGED: removed the minus sign to show most recent first
    });

    const appointmentCards = sortedAppointments.map(function (appointment) {
      const appointmentDate = new Date(
        appointment.date + "T" + appointment.start_time,
      );
      const formattedDate = appointmentDate.toLocaleDateString("en-US", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
      });
      const formattedTime =
        formatTime(appointment.start_time) +
        " - " +
        formatTime(appointment.end_time);

      const canCancel =
        appointment.can_be_cancelled &&
        !["cancelled", "completed"].includes(appointment.status);

      let cancelButton = "";
      if (canCancel) {
        cancelButton =
          '<button onclick="handleQuickCancel(' +
          appointment.id +
          ", '" +
          appointment.customer_email.replace(/'/g, "\\'") +
          '\')" class="bg-red-600 hover:bg-red-700 text-white text-sm font-medium px-3 py-2 rounded-lg transition-colors">Cancel</button>';
      }

      return (
        '<div class="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">' +
        '<div class="flex items-start justify-between mb-4">' +
        "<div>" +
        '<h3 class="text-lg font-semibold text-gray-900">' +
        appointment.appointment_type_name +
        "</h3>" +
        '<p class="text-sm text-gray-600">' +
        appointment.calendar_user_name +
        "</p>" +
        "</div>" +
        '<span class="px-3 py-1 rounded-full text-sm font-medium ' +
        getStatusBadgeClasses(appointment.status) +
        '">' +
        getStatusText(appointment.status) +
        "</span>" +
        "</div>" +
        '<div class="space-y-2 mb-4">' +
        '<div class="flex items-center text-sm text-gray-600">' +
        '<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">' +
        '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />' +
        "</svg>" +
        formattedDate +
        "</div>" +
        '<div class="flex items-center text-sm text-gray-600">' +
        '<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">' +
        '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />' +
        "</svg>" +
        formattedTime +
        "</div>" +
        '<div class="flex items-center text-sm text-gray-600">' +
        '<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">' +
        '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />' +
        "</svg>" +
        appointment.customer_name +
        "</div>" +
        "</div>" +
        '<div class="flex gap-2">' +
        '<a href="/calendar/appointment?id=' +
        appointment.id +
        "&email=" +
        encodeURIComponent(appointment.customer_email) +
        '" class="bg-teal-600 hover:bg-teal-700 text-white text-sm font-medium px-3 py-2 rounded-lg transition-colors">View Details</a>' +
        cancelButton +
        "</div>" +
        "</div>"
      );
    });

    appointmentsGrid.innerHTML = appointmentCards.join("");
  }

  // Quick cancel function for appointments list
  async function handleQuickCancel(appointmentId, email) {
    if (!confirm("Are you sure you want to cancel this appointment?")) {
      return;
    }

    try {
      await cancelAppointment(appointmentId, email);

      // Reload appointments list
      await loadAllUserAppointments();
      displayAppointmentsList();

      alert("Appointment cancelled successfully!");
    } catch (error) {
      console.error("Cancel error:", error);
      alert("Failed to cancel appointment. Please try again.");
    }
  }

  function getStatusBadgeClasses(status) {
    const statusClasses = {
      pending: "bg-yellow-100 text-yellow-800",
      confirmed: "bg-green-100 text-green-800",
      cancelled: "bg-red-100 text-red-800",
      completed: "bg-blue-100 text-blue-800",
      no_show: "bg-gray-100 text-gray-800",
    };
    return statusClasses[status] || "bg-gray-100 text-gray-800";
  }

  function getStatusText(status) {
    const statusText = {
      pending: "Pending",
      confirmed: "Confirmed",
      cancelled: "Cancelled",
      completed: "Completed",
      no_show: "No Show",
    };
    return (
      statusText[status] || status.charAt(0).toUpperCase() + status.slice(1)
    );
  }

  async function initializeSingleAppointment(appointmentId, email) {
    try {
      console.log("📅 Loading single appointment:", {
        appointmentId: appointmentId,
        email: email,
      });

      const appointment = await loadSingleAppointment(appointmentId, email);
      currentAppointment = appointment;

      displaySingleAppointment(appointment);
      setupSingleAppointmentEventListeners();
      showSingleAppointmentView();
    } catch (error) {
      console.error("❌ Error loading appointment:", error);
      const errorMessage =
        error && error.message ? error.message : "Failed to load appointment";
      showError(errorMessage);
    } finally {
      hideLoadingState();
    }
  }

  // Email verification for single appointments without email in URL
  function verifyEmail(event) {
    event.preventDefault();

    const emailInput = document.getElementById("verification-email");
    const verifyBtn = document.getElementById("verify-btn");
    const verifyBtnText = document.getElementById("verify-btn-text");

    const email = emailInput.value.trim();

    if (!email) {
      showVerificationError("Please enter your email address");
      return;
    }

    // Show loading state
    verifyBtn.disabled = true;
    if (verifyBtnText) verifyBtnText.textContent = "Verifying...";
    hideVerificationError();

    if (appointmentId) {
      initializeSingleAppointment(appointmentId, email)
        .then(function () {
          customerEmail = email;
        })
        .catch(function (error) {
          showVerificationError(
            "Invalid email address or appointment not found",
          );
        })
        .finally(function () {
          verifyBtn.disabled = false;
          if (verifyBtnText) verifyBtnText.textContent = "Verify Email";
        });
    }
  }

  // State management functions
  function hideLoadingState() {
    const loadingElement = document.getElementById("loading-state");
    if (loadingElement) loadingElement.classList.add("hidden");
  }

  function showEmailVerification() {
    const element = document.getElementById("email-verification");
    if (element) element.classList.remove("hidden");
  }

  function hideEmailVerification() {
    const element = document.getElementById("email-verification");
    if (element) element.classList.add("hidden");
  }

  function showVerificationError(message) {
    const errorDiv = document.getElementById("verification-error");
    if (errorDiv) {
      errorDiv.textContent = message;
      errorDiv.classList.remove("hidden");
    }
  }

  function hideVerificationError() {
    const errorDiv = document.getElementById("verification-error");
    if (errorDiv) errorDiv.classList.add("hidden");
  }

  function showNoAppointmentsState() {
    const element = document.getElementById("no-appointments-state");
    if (element) element.classList.remove("hidden");
  }

  function showAppointmentsList() {
    const element = document.getElementById("appointments-list");
    if (element) element.classList.remove("hidden");
  }

  function showSingleAppointmentView() {
    hideEmailVerification();
    const element = document.getElementById("single-appointment");
    if (element) element.classList.remove("hidden");
  }

  function showError(message) {
    const errorElement = document.getElementById("error-state");
    const errorMessageElement = document.getElementById("error-message");

    if (errorMessageElement) {
      errorMessageElement.textContent = message;
    }

    if (errorElement) errorElement.classList.remove("hidden");
  }

  // Single appointment display
  function displaySingleAppointment(appointment) {
    // Update status badge
    updateStatusBadge(appointment.status);

    // Update appointment details
    updateElement("service-name", appointment.appointment_type_name);
    updateElement("provider-name", appointment.calendar_user_name);
    updateElement("duration", appointment.duration_minutes + " minutes");

    // Format and display date/time
    const appointmentDate = new Date(
      appointment.date + "T" + appointment.start_time,
    );
    updateElement(
      "appointment-date",
      appointmentDate.toLocaleDateString("en-US", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
      }),
    );

    updateElement(
      "appointment-time",
      formatTime(appointment.start_time) +
        " - " +
        formatTime(appointment.end_time),
    );

    // Show payment info if applicable
    if (appointment.payment_amount && appointment.payment_amount > 0) {
      const paymentInfo = document.getElementById("payment-info");
      if (paymentInfo) paymentInfo.classList.remove("hidden");
      updateElement(
        "payment-amount",
        "$" +
          appointment.payment_amount +
          " (" +
          (appointment.payment_status || "N/A") +
          ")",
      );
    }

    // Show notes if present
    if (appointment.customer_notes) {
      const notesSection = document.getElementById("notes-section");
      if (notesSection) notesSection.classList.remove("hidden");
      updateElement("customer-notes", appointment.customer_notes);
    }

    // Update button states based on appointment status
    updateButtonStates(appointment);
  }

  function updateStatusBadge(status) {
    const badge = document.getElementById("appointment-status-badge");
    if (!badge) return;

    const statusConfig = {
      pending: { text: "Pending", classes: "bg-yellow-100 text-yellow-800" },
      confirmed: { text: "Confirmed", classes: "bg-green-100 text-green-800" },
      cancelled: { text: "Cancelled", classes: "bg-red-100 text-red-800" },
      completed: { text: "Completed", classes: "bg-blue-100 text-blue-800" },
      no_show: { text: "No Show", classes: "bg-gray-100 text-gray-800" },
    };

    const config = statusConfig[status] || {
      text: status,
      classes: "bg-gray-100 text-gray-800",
    };
    badge.textContent = config.text;
    badge.className =
      "px-3 py-1 rounded-full text-sm font-medium " + config.classes;
  }

  function updateButtonStates(appointment) {
    const editBtn = document.getElementById("edit-btn");
    const rescheduleBtn = document.getElementById("reschedule-btn");
    const cancelBtn = document.getElementById("cancel-btn");

    const canModify =
      appointment.can_be_cancelled &&
      !["cancelled", "completed", "no_show"].includes(appointment.status);

    if (editBtn) editBtn.disabled = !canModify;
    if (rescheduleBtn) rescheduleBtn.disabled = !canModify;
    if (cancelBtn) cancelBtn.disabled = !canModify;

    // Update button styles for disabled state
    [editBtn, rescheduleBtn, cancelBtn].forEach(function (btn) {
      if (btn && btn.disabled) {
        btn.classList.add("opacity-50", "cursor-not-allowed");
      }
    });
  }

  // Event listeners for single appointment management
  function setupSingleAppointmentEventListeners() {
    // Edit button
    const editBtn = document.getElementById("edit-btn");
    if (editBtn) editBtn.addEventListener("click", showEditForm);

    // Reschedule button
    const rescheduleBtn = document.getElementById("reschedule-btn");
    if (rescheduleBtn)
      rescheduleBtn.addEventListener("click", showRescheduleForm);

    // Cancel appointment button
    const cancelBtn = document.getElementById("cancel-btn");
    if (cancelBtn) cancelBtn.addEventListener("click", showCancelConfirmation);

    // Edit form
    const editForm = document.getElementById("edit-form");
    if (editForm) editForm.addEventListener("submit", handleEditSubmit);

    const cancelEditBtn = document.getElementById("cancel-edit-btn");
    if (cancelEditBtn) cancelEditBtn.addEventListener("click", hideEditForm);

    // Reschedule form
    const cancelRescheduleBtn = document.getElementById(
      "cancel-reschedule-btn",
    );
    if (cancelRescheduleBtn)
      cancelRescheduleBtn.addEventListener("click", hideRescheduleForm);

    const cancelRescheduleNoSlotsBtn = document.getElementById(
      "cancel-reschedule-no-slots-btn",
    );
    if (cancelRescheduleNoSlotsBtn)
      cancelRescheduleNoSlotsBtn.addEventListener("click", hideRescheduleForm);

    const confirmRescheduleBtn = document.getElementById(
      "confirm-reschedule-btn",
    );
    if (confirmRescheduleBtn)
      confirmRescheduleBtn.addEventListener("click", handleRescheduleConfirm);

    // Modal event listeners
    const modalCancelBtn = document.getElementById("modal-cancel-btn");
    if (modalCancelBtn)
      modalCancelBtn.addEventListener("click", hideConfirmationModal);

    const modalConfirmBtn = document.getElementById("modal-confirm-btn");
    if (modalConfirmBtn)
      modalConfirmBtn.addEventListener("click", handleCancelAppointment);
  }

  // Modal functions
  function showCancelConfirmation() {
    const modal = document.getElementById("confirmation-modal");
    if (modal) modal.classList.remove("hidden");
  }

  function hideConfirmationModal() {
    const modal = document.getElementById("confirmation-modal");
    if (modal) modal.classList.add("hidden");
  }

  // Form functions
  function showEditForm() {
    if (!currentAppointment) return;

    const customerNameInput = document.getElementById("customer_name");
    const customerPhoneInput = document.getElementById("customer_phone");
    const customerNotesInput = document.getElementById("customer_notes_input");

    if (customerNameInput)
      customerNameInput.value = currentAppointment.customer_name || "";
    if (customerPhoneInput)
      customerPhoneInput.value = currentAppointment.customer_phone || "";
    if (customerNotesInput)
      customerNotesInput.value = currentAppointment.customer_notes || "";

    const editFormSection = document.getElementById("edit-form-section");
    if (editFormSection) {
      editFormSection.classList.remove("hidden");
      editFormSection.scrollIntoView({ behavior: "smooth" });
    }
  }

  function hideEditForm() {
    const editFormSection = document.getElementById("edit-form-section");
    if (editFormSection) editFormSection.classList.add("hidden");
    clearMessage("form-message");
  }

  function showRescheduleForm() {
    if (!currentAppointment) return;

    const rescheduleFormSection = document.getElementById(
      "reschedule-form-section",
    );
    if (rescheduleFormSection) rescheduleFormSection.classList.remove("hidden");

    selectedSlot = null;
    updateRescheduleButton();

    loadAvailableSlots(currentAppointment.id)
      .then(function (slots) {
        displayAvailableSlots(slots);
      })
      .catch(function (error) {
        console.error("Error loading slots:", error);
        showMessage(
          "reschedule-message",
          "Failed to load available times",
          "error",
        );
      });

    if (rescheduleFormSection)
      rescheduleFormSection.scrollIntoView({ behavior: "smooth" });
  }

  function hideRescheduleForm() {
    const rescheduleFormSection = document.getElementById(
      "reschedule-form-section",
    );
    if (rescheduleFormSection) rescheduleFormSection.classList.add("hidden");
    clearMessage("reschedule-message");
  }

  function handleEditSubmit(e) {
    e.preventDefault();
    if (!currentAppointment || !customerEmail) return;

    const saveBtn = document.getElementById("save-edit-btn");
    const originalText = saveBtn ? saveBtn.textContent : "Save Changes";

    if (saveBtn) {
      saveBtn.textContent = "Saving...";
      saveBtn.disabled = true;
    }

    const form = e.target;
    const formData = new FormData(form);

    const updateData = {
      email: customerEmail,
      customer_name: formData.get("customer_name"),
      customer_phone: formData.get("customer_phone"),
      customer_notes: formData.get("customer_notes"),
    };

    updateAppointment(currentAppointment.id, updateData)
      .then(function (result) {
        currentAppointment = result.appointment;
        displaySingleAppointment(currentAppointment);
        hideEditForm();
        showMessage(
          "global-message",
          "Appointment updated successfully!",
          "success",
        );
      })
      .catch(function (error) {
        console.error("Update error:", error);
        const errorMessage =
          error && error.message
            ? error.message
            : "Failed to update appointment";
        showMessage("form-message", errorMessage, "error");
      })
      .finally(function () {
        if (saveBtn) {
          saveBtn.textContent = originalText;
          saveBtn.disabled = false;
        }
      });
  }

  function handleCancelAppointment() {
    if (!currentAppointment || !customerEmail) return;

    const confirmBtn = document.getElementById("modal-confirm-btn");
    const confirmText = document.getElementById("modal-confirm-text");
    const originalText = confirmText
      ? confirmText.textContent
      : "Cancel Appointment";

    if (confirmText) confirmText.textContent = "Cancelling...";
    if (confirmBtn) confirmBtn.disabled = true;

    cancelAppointment(currentAppointment.id, customerEmail)
      .then(function () {
        hideConfirmationModal();
        showMessage(
          "global-message",
          "Appointment cancelled successfully. Redirecting to your appointments...",
          "success",
        );

        setTimeout(function () {
          window.location.href = "/calendar/appointment";
        }, 2000);
      })
      .catch(function (error) {
        console.error("Cancel error:", error);
        const errorMessage =
          error && error.message
            ? error.message
            : "Failed to cancel appointment";
        hideConfirmationModal();
        showMessage("global-message", errorMessage, "error");
      })
      .finally(function () {
        if (confirmText) confirmText.textContent = originalText;
        if (confirmBtn) confirmBtn.disabled = false;
      });
  }

  function displayAvailableSlots(slots) {
    const slotsLoading = document.getElementById("slots-loading");
    const availableSlots = document.getElementById("available-slots");
    const noSlots = document.getElementById("no-slots");
    const slotsGrid = document.getElementById("slots-grid");

    if (slotsLoading) slotsLoading.classList.add("hidden");

    if (slots.length === 0) {
      if (noSlots) noSlots.classList.remove("hidden");
      return;
    }

    if (!slotsGrid) return;

    // Group slots by date
    const slotsByDate = slots.reduce(function (acc, slot) {
      if (!acc[slot.date]) acc[slot.date] = [];
      acc[slot.date].push(slot);
      return acc;
    }, {});

    // Generate HTML for slots
    const slotElements = Object.entries(slotsByDate).map(function ([
      date,
      dateSlots,
    ]) {
      const formattedDate = new Date(date).toLocaleDateString("en-US", {
        weekday: "short",
        month: "short",
        day: "numeric",
      });

      const slotsHtml = dateSlots
        .map(function (slot) {
          return (
            '<button type="button" class="slot-btn w-full p-2 text-sm border border-gray-300 rounded hover:bg-teal-50 hover:border-teal-500 transition-colors" data-slot=\'' +
            JSON.stringify(slot) +
            "'>" +
            formatTime(slot.start_time) +
            "</button>"
          );
        })
        .join("");

      return (
        '<div class="space-y-2">' +
        '<h4 class="font-medium text-gray-900">' +
        formattedDate +
        "</h4>" +
        '<div class="space-y-1">' +
        slotsHtml +
        "</div>" +
        "</div>"
      );
    });

    slotsGrid.innerHTML = slotElements.join("");

    // Add click listeners to slot buttons
    slotsGrid.querySelectorAll(".slot-btn").forEach(function (btn) {
      btn.addEventListener("click", function (e) {
        const slotData = e.target.getAttribute("data-slot");
        if (slotData) {
          selectedSlot = JSON.parse(slotData);
          updateSlotSelection();
          updateRescheduleButton();
        }
      });
    });

    if (availableSlots) availableSlots.classList.remove("hidden");
  }

  function updateSlotSelection() {
    document.querySelectorAll(".slot-btn").forEach(function (btn) {
      btn.classList.remove("bg-teal-600", "text-white", "border-teal-600");
      btn.classList.add("border-gray-300");
    });

    if (selectedSlot) {
      const selectedBtn = document.querySelector(
        "[data-slot='" + JSON.stringify(selectedSlot) + "']",
      );
      if (selectedBtn) {
        selectedBtn.classList.add(
          "bg-teal-600",
          "text-white",
          "border-teal-600",
        );
        selectedBtn.classList.remove("border-gray-300");
      }
    }
  }

  function updateRescheduleButton() {
    const confirmBtn = document.getElementById("confirm-reschedule-btn");
    if (confirmBtn) {
      confirmBtn.disabled = !selectedSlot;
    }
  }

  function handleRescheduleConfirm() {
    if (!currentAppointment || !customerEmail || !selectedSlot) return;

    const confirmBtn = document.getElementById("confirm-reschedule-btn");
    const originalText = confirmBtn
      ? confirmBtn.textContent
      : "Confirm Reschedule";

    if (confirmBtn) {
      confirmBtn.textContent = "Rescheduling...";
      confirmBtn.disabled = true;
    }

    const updateData = {
      email: customerEmail,
      date: selectedSlot.date,
      start_time: selectedSlot.start_time.substring(0, 5), // Remove seconds to fix ":00" error
    };

    updateAppointment(currentAppointment.id, updateData)
      .then(function (result) {
        currentAppointment = result.appointment;
        displaySingleAppointment(currentAppointment);
        hideRescheduleForm();
        showMessage(
          "global-message",
          "Appointment rescheduled successfully!",
          "success",
        );
      })
      .catch(function (error) {
        console.error("Reschedule error:", error);
        const errorMessage =
          error && error.message
            ? error.message
            : "Failed to reschedule appointment";
        showMessage("reschedule-message", errorMessage, "error");
      })
      .finally(function () {
        if (confirmBtn) {
          confirmBtn.textContent = originalText;
          confirmBtn.disabled = false;
        }
      });
  }

  // Utility functions
  function updateElement(id, text) {
    const element = document.getElementById(id);
    if (element) {
      element.textContent = text;
    }
  }

  function formatTime(timeString) {
    const time = new Date("2000-01-01T" + timeString);
    return time.toLocaleTimeString("en-US", {
      hour: "numeric",
      minute: "2-digit",
      hour12: true,
    });
  }

  function showMessage(elementId, message, type) {
    const messageEl = document.getElementById(elementId);
    if (!messageEl) return;

    const typeClasses = {
      success: "bg-green-50 text-green-700 border-green-200",
      error: "bg-red-50 text-red-700 border-red-200",
      info: "bg-blue-50 text-blue-700 border-blue-200",
    };

    messageEl.className =
      "p-4 rounded-md border " + typeClasses[type] + " mb-4";
    messageEl.textContent = message;
    messageEl.classList.remove("hidden");

    if (type !== "error") {
      setTimeout(function () {
        messageEl.classList.add("hidden");
      }, 5000);
    }
  }

  function clearMessage(elementId) {
    const messageEl = document.getElementById(elementId);
    if (messageEl) {
      messageEl.classList.add("hidden");
    }
  }

  // API functions
  async function loadSingleAppointment(appointmentId, email) {
    const API_BASE = window.location.origin.includes("localhost")
      ? "http://localhost:8000"
      : "https://corrison.corrisonapi.com";

    const response = await fetch(
      API_BASE +
        "/api/v1/calendar/appointment/" +
        appointmentId +
        "/?email=" +
        encodeURIComponent(email),
    );

    if (!response.ok) {
      const errorData = await response.json().catch(function () {
        return {};
      });
      throw new Error(
        errorData.error ||
          "HTTP " + response.status + ": " + response.statusText,
      );
    }

    return response.json();
  }

  async function updateAppointment(appointmentId, updateData) {
    const API_BASE = window.location.origin.includes("localhost")
      ? "http://localhost:8000"
      : "https://corrison.corrisonapi.com";

    const response = await fetch(
      API_BASE + "/api/v1/calendar/appointment/" + appointmentId + "/update/",
      {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updateData),
      },
    );

    if (!response.ok) {
      const errorData = await response.json().catch(function () {
        return {};
      });
      throw new Error(
        errorData.error ||
          "HTTP " + response.status + ": " + response.statusText,
      );
    }

    return response.json();
  }

  async function cancelAppointment(appointmentId, email) {
    const API_BASE = window.location.origin.includes("localhost")
      ? "http://localhost:8000"
      : "https://corrison.corrisonapi.com";

    const response = await fetch(
      API_BASE + "/api/v1/calendar/appointment/" + appointmentId + "/cancel/",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email: email }),
      },
    );

    if (!response.ok) {
      const errorData = await response.json().catch(function () {
        return {};
      });
      throw new Error(
        errorData.error ||
          "HTTP " + response.status + ": " + response.statusText,
      );
    }

    return response.json();
  }

  async function loadAvailableSlots(appointmentId) {
    if (!customerEmail) throw new Error("Email not available");

    const API_BASE = window.location.origin.includes("localhost")
      ? "http://localhost:8000"
      : "https://corrison.corrisonapi.com";

    const response = await fetch(
      API_BASE +
        "/api/v1/calendar/appointment/" +
        appointmentId +
        "/available-slots/?email=" +
        encodeURIComponent(customerEmail),
    );

    if (!response.ok) {
      const errorData = await response.json().catch(function () {
        return {};
      });
      throw new Error(
        errorData.error ||
          "HTTP " + response.status + ": " + response.statusText,
      );
    }

    return response.json();
  }
</script>
